import importlib
import random
import graphic
import binary_tree
import linked_list
import time

test_module = None
def randomString(size):
	s = ""
	for i in xrange(0, size):
		s += chr(random.randint(97,122))
	return s

def outputTopath(s):
	tempName = os.path.dirname(os.path.abspath( __file__ ));
	tempName = os.path.join(tempName, "output.txt")
	
	f = open(tempName, "a")
	f.write(s + "\n")

	f.close()

def testTwoSum():
	testCase = [
		([], 12, []),
		([2, 7, 11, 15], 9, [1,2]),
		([3,2,4], 6,[2,3]),
		([15, 59, 51, 96, 99, 13, 36, 51, 45, 72, 37, 97, 23, 1, 98, 62, 63], 131, [2, 10]),
		([58, 38, 67, 67, 80, 84, 99, 34, 57, 23, 32, 99, 58, 54, 95, 57, 37, 60], 280,[]),
		([8, 68, 11, 17, 30, 33, 76, 92, 79, 37, 31, 48, 55, 78, 65], 65, [4, 12]),
		([71, 18, 45, 83, 8, 53, 42, 42, 72, 19, 80, 74, 91, 90, 36, 20], 10, []),
		([68, 40, 67, 46, 78, 74, 25, 51, 80, 6, 51, 38, 36, 6, 74, 77, 98, 58, 84, 22], 18, []),
		([6, 99, 79, 6, 30, 68, 17, 14, 25, 50, 32, 83, 8, 53, 65, 60, 95, 32], 46, [8,18]),
		([41, 2, 30, 9, 62, 2, 49, 10, 33, 80, 100, 35, 44, 79, 70, 89, 17, 56, 2, 94], 47, [3, 17]),
		([5, 91, 83, 68, 16, 35, 79, 83, 48, 56], 152, []),
		([91, 21, 67, 82, 31, 48, 84, 99, 2, 76, 33, 30], 250, []),
		([45, 33, 42, 22, 78, 10, 35, 67, 19, 17, 33, 30], 94, []),
		([29, 84, 84, 38, 63, 10, 9, 84, 76, 21, 22, 16], 111, []),
		([4, 3, 29, 87, 39, 24, 33, 53, 73, 96, 48, 74, 22, 71], 110, [5, 14]),
		([78, 76, 75, 63, 66, 55, 86, 100, 96, 23, 100, 69, 60, 33, 74], 60, []),
		([83, 1, 12, 37, 67, 72, 62, 98, 82, 25, 68, 50, 85, 94, 65, 12, 15, 41, 30, 65], 13, [2, 16]),
		([73, 9, 45, 21, 24, 32, 66, 33, 16, 4, 80], 136, []),
		([23, 11, 73, 20, 84, 29, 29, 30, 91, 41, 75], 248, []),
		([22, 99, 31, 69, 97, 6, 47, 32, 74, 44, 31, 16, 19, 11, 69], 43, [8, 14]),
		([44, 2, 33, 54, 57, 23, 20, 59, 38, 76, 95, 19, 54, 94, 45, 20, 64, 4, 84], 262, []),
		([25, 6, 35, 6, 78, 7, 4, 69, 82, 30], 237, []),
		([63, 83, 24, 59, 96, 58, 47, 75, 12, 37, 90, 38], 149, [4, 11]),
	]

	for case in testCase:
		ret = 0
		for idx in test_module.twoSum(case[0], case[1]):
			ret += case[0][idx-1]
		for idx in case[2]:
			ret -= case[0][idx-1]

		if ret != 0:
			raise RuntimeError("testTwoSum failed!!")
	print "testTwoSum done!"

def testAddTwoNumbers():
	testCase = [
		(0, 123),
		(2, 12),
		(1, 99)
	]
	for i in xrange(0, 200):
		testCase.append( (random.randint(0,1999), random.randint(0,3000)) )
	for case in testCase:
		num1 = case[0]
		num2 = case[1]
		lst1, lst2 = [], []
		n1, n2 = num1, num2

		if num1 == 0:
			lst1.append(0)
		while num1:
			lst1.append(num1 % 10)
			num1 /= 10

		if num2 == 0:
			lst2.append(0)
		while num2:
			lst2.append(num2 % 10)
			num2 /= 10

		lst1 = linked_list.createLinkedLst(lst1)
		lst2 = linked_list.createLinkedLst(lst2)

		calc = int("".join(str(test_module.addTwoNumbers(lst1, lst2)).split(',')[::-1]))
		if n1 + n2 != calc:
			raise RuntimeError("testAddTwoNumbers failed", n1, n2)

	print "testAddTwoNumbers done!"

def testLongestSubstring():
	testCase = [
		("", 0), ("a", 1), ("abca", 3), ("aab", 2), ("tmmzuxt", 5),
		("vqblqcb", 4), ("jbpnbwwd", 4), ("eee", 1), ("au", 2)
	]

	for case in testCase:
		if test_module.lengthOfLongestSubstring(case[0]) != case[1]:
			print test_module.lengthOfLongestSubstring(case[0])
			raise RuntimeError("testLongestSubstring failed!! %s" % str(case[0]))

	print "testLongestSubstring done!"

def testLongestPalindrome():
	testCase = [
		("a", "a"), ("bb", "bb"), ("abb", "bb"), ("bba", "bb"),
		("wqwqabccba", "abccba"), ("abccbawqwq", "abccba"), ("abccbawqwq", "abccba")
	]
	for case in testCase:
		if test_module.longestPalindrome(case[0]) != case[1]:
			print test_module.longestPalindrome(case[0])
			raise RuntimeError("testLongestPalindrome failed!! %s" % str(case[0]))
			
	print "testLongestPalindrome done!"
	
	
def testMaxArea():
	testCase = [
		([1,1], 1), ([2,1], 1),
		([8, 12, 15, 8, 13, 5, 4], 36), ([13, 10, 12, 12, 8, 19, 12], 72),
		([17, 1, 7, 13, 20, 15, 16], 96), ([8, 13, 11, 18, 16, 11, 5], 44),
		([17, 1, 20, 20, 18, 9, 15], 90),([9, 4, 9, 20, 10, 4, 16], 54),
		([4, 15, 3, 11, 13, 5, 16], 75),([17, 12, 1, 16, 1, 17, 20], 102),
		([20, 10, 10, 14, 11, 19, 2], 95),([7, 6, 9, 6, 3, 3, 10], 42),
		([13, 4, 2, 2, 18, 10, 14], 78),([6, 13, 17, 7, 13, 7, 15], 65),
		([13, 15, 10, 13, 16, 15, 6], 65),([6, 2, 11, 12, 16, 16, 17], 44),
		([15, 18, 8, 20, 14, 19, 12], 75),
	]

	for case in testCase:
		if test_module.maxArea(case[0]) != case[1]:
			raise RuntimeError("testMaxArea failed!! %s" % str(case[0]) )
	print "testMaxArea done!"


def testThreeSum():
	testCase = [
		([], []),
		([-1,0,1], [[-1,0,1]]),
		([-1,1,0], [[-1,0,1]]),
		([-13, -7, -3, 2, 6, 9, 12, 15],[]),
		([-13, -12, -12, -5, -2, 10, 10, 11],[]),
		([-14, -10, -4, -4, -3, 3, 4, 13],[[-10, -3, 13]]),
		([-15, -14, -13, -13, -2, 7, 9, 14],[]),
		([-10, -9, -2, 1, 3, 4, 10, 15],[]),
		([-13, -13, -5, -2, -1, 0, 7, 11],[[-5, -2, 7]]),
		([-10, -10, 1, 2, 4, 5, 9, 12],[[-10, 1, 9]]),
		([-12, -11, -9, -9, -8, -4, -2, 14],[[-12, -2, 14]]),
		([-11, -1, 0, 0, 2, 4, 4, 14],[]),
		([-14, -11, -10, -1, 9, 11, 14, 15],[[-14, -1, 15], [-10, -1, 11]]),
		([-15, -13, -11, -10, -9, 5, 6, 9],[[-15, 6, 9], [-11, 5, 6]]),
		([-10, -4, 0, 8, 11, 11, 12, 12],[]),
		([-11, -11, -9, -4, 9, 12, 13, 14],[[-9, -4, 13]]),
		([-15, -8, -7, -7, 2, -10, 3, 12],[[-15, 3, 12]]),
		([-11, -11, -8, -7, 6, -10, 9, 10],[]),
		([-2,0,1,1,2], [[-2,0,2],[-2,1,1]]),
		([-15, -15, -15, -14, -14, -14, -14, -13, -13, -12, -12, -12, -12, -12, -12, -12,
		 -12, -11, -11, -11, -11, -10, -10, -10, -9, -9, -9, -9, -9, -9, -8, -8, -8, -8, 
		 -8, -8, -7, -7, -6, -6, -6, -5, -5, -5, -5, -4, -4, -4, -4, -3, -3, -3, -3, -3, 
		 -3, -2, -2, -2, -2, -2, -2, -2, -1, -1, -1, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 3, 
		 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8,8, 
		 9, 9, 9, 9, 10, 10, 10, 10, 10, 11, 11, 11, 12, 12, 12, 12, 12, 13, 13, 13, 14, 
		 14, 14, 14],[[-15, 1, 14], [-15, 2, 13], [-15, 3, 12], [-15, 4, 11], [-15, 5, 10], 
		 [-15, 6, 9], [-15, 7, 8], [-14, 0, 14], [-14, 1, 13], [-14, 2, 12], [-14,3, 11], 
		 [-14, 4, 10], [-14, 5, 9], [-14, 6, 8], [-14, 7, 7], [-13, -1, 14], [-13, 0, 13], 
		 [-13, 1, 12], [-13, 2, 11], [-13, 3, 10], [-13, 4, 9], [-13, 5, 8], [-13, 6, 7], 
		 [-12, -2, 14], [-12, -1, 13], [-12, 0, 12], [-12, 1, 11], [-12, 2, 10], [-12, 3, 9], 
		 [-12, 4, 8], [-12, 5, 7], [-12, 6, 6], [-11, -3, 14], [-11, -2,13], [-11, -1, 12], 
		 [-11, 0, 11], [-11, 1, 10], [-11, 2, 9], [-11, 3, 8], [-11,4, 7], [-11, 5, 6], 
		 [-10, -4, 14], [-10, -3, 13], [-10, -2, 12], [-10, -1, 11],[-10, 0, 10], [-10, 1, 9], 
		 [-10, 2, 8], [-10, 3, 7], [-10, 4, 6], [-10, 5, 5], [-9, -5, 14], [-9, -4, 13], 
		 [-9, -3, 12], [-9, -2, 11], [-9, -1, 10], [-9, 0, 9], [-9, 1, 8], [-9, 2, 7], 
		 [-9, 3, 6], [-9, 4, 5], [-8, -6, 14], [-8, -5, 13], [-8, -4, 12], [-8, -3, 11], 
		 [-8, -2, 10], [-8, -1, 9], [-8, 0, 8], [-8, 1, 7], [-8, 2, 6], [-8, 3, 5], [-8, 4, 4],
		  [-7, -7, 14], [-7, -6, 13], [-7, -5, 12], [-7, -4, 11], [-7, -3, 10], [-7, -2, 9],
		   [-7, -1, 8], [-7, 0, 7], [-7, 1, 6], [-7, 2,5], [-7, 3, 4], [-6, -6, 12], 
		   [-6, -5, 11], [-6, -4, 10], [-6, -3, 9], [-6, -2,8], [-6, -1, 7], [-6, 0, 6],
		   [-6, 1, 5], [-6, 2, 4], [-6, 3, 3], [-5, -5, 10], [-5, -4, 9], [-5, -3, 8], 
		   [-5, -2, 7], [-5, -1, 6], [-5, 0, 5], [-5, 1, 4], [-5,2, 3], [-4, -4, 8], 
		   [-4, -3, 7], [-4, -2, 6], [-4, -1, 5], [-4, 0, 4], [-4, 1, 3], [-4, 2, 2], 
		   [-3, -3, 6], [-3, -2, 5], [-3, -1, 4], [-3, 0, 3], [-3, 1, 2], [-2, -2, 4], [-2, -1, 3],
		    [-2, 0, 2], [-1, -1, 2], [-1, 0, 1], [0, 0, 0]]),
		]

	for case in testCase:
		if test_module.threeSum(case[0]) != case[1]:
			raise RuntimeError("testThreeSum failed!! %s", str(case[0]))

	print "testThreeSum done!"

def testThreeSumClosest():
	testCase = [
		([],0,0),
		([0,1,2], 3, 3),
		([-1, 0, 1], 0, 0),
		([-13, -7, -3, 2, 6, 9, 12, 15], 2, 2),
		([-13, -12, -12, -5, -2, 10, 10, 11], -2, -3),
		([-14, -10, -4, -4, -3, 3, 4, 13], -2, -1),
		([-15, -14, -13, -13, -2, 7, 9, 14], -4, -3),
		([-10, -9, -2, 1, 3, 4, 10, 15], 1, 1),
		([-13, -13, -5, -2, -1, 0, 7, 11], -2, -2),
		([-10, -10, 1, 2, 4, 5, 9, 12], 1, 1),
		([-12, -11, -9, -9, -8, -4, -2, 14], -6, -6),
		([-11, -1, 0, 0, 2, 4, 4, 14], 1, 1),
		([-14, -11, -10, -1, 9, 11, 14, 15], 1, 0),
		([-15, -13, -11, -10, -9, 5, 6, 9], -5, -4),
		([-10, -4, 0, 8, 11, 11, 12, 12], 5, 4),
		([-11, -11, -9, -4, 9, 12, 13, 14], 1, 1),
		([-15, -8, -7, -7, 2, 3, -10, 12], -4, -5),
		([-11, -11, -10, -8, -7, 6, 9, 10], -3, -5),
		([-15, -15, -15, -14, -14, -14, -14, -13, -13, -12, -12, -12, -12, -12, -12, -12, -12, -11, -11, -11, -11, -10, -10, -10, -9, -9, -9, -9, -9, -9, -8, -8, -8, -8, -8, -8, -7, -7, -6, -6, -6, -5, -5, -5, -5, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -2, -2, -2, -2, -2, -2, -2, -1, -1, -1, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8,8, 9, 9, 9, 9, 10, 10, 10, 10, 10, 11, 11, 11, 12, 12, 12, 12, 12, 13, 13, 13, 14, 14, 14, 14], -1, -1),
	]

	for case in testCase:
		if test_module.threeSumClosest(case[0], case[1]) != case[2]:
			raise RuntimeError("testThreeSumClosest failed!! %s, %d" % (case[0], case[1]))

	print "testThreeSumClosest done!"

def testLetterCombinations():
	testCase = [
		("", []),
		("0", ['']),
		("9592", ['wjwa', 'xjwa', 'yjwa', 'zjwa', 'wkwa', 'xkwa', 'ykwa', 'zkwa', 'wlwa', 'xlwa', 'ylwa', 'zlwa', 'wjxa', 'xjxa', 'yjxa', 'zjxa', 'wkxa', 'xkxa', 'ykxa', 'zkxa', 'wlxa', 'xlxa', 'ylxa', 'zlxa', 'wjya', 'xjya', 'yjya', 'zjya', 'wkya', 'xkya', 'ykya', 'zkya', 'wlya', 'xlya', 'ylya', 'zlya', 'wjza', 'xjza', 'yjza', 'zjza', 'wkza', 'xkza', 'ykza', 'zkza', 'wlza', 'xlza', 'ylza', 'zlza', 'wjwb', 'xjwb', 'yjwb', 'zjwb', 'wkwb', 'xkwb', 'ykwb', 'zkwb', 'wlwb', 'xlwb', 'ylwb', 'zlwb', 'wjxb', 'xjxb', 'yjxb', 'zjxb', 'wkxb', 'xkxb', 'ykxb', 'zkxb', 'wlxb', 'xlxb', 'ylxb', 'zlxb', 'wjyb', 'xjyb', 'yjyb', 'zjyb', 'wkyb', 'xkyb', 'ykyb', 'zkyb', 'wlyb', 'xlyb', 'ylyb', 'zlyb', 'wjzb', 'xjzb', 'yjzb', 'zjzb', 'wkzb', 'xkzb', 'ykzb', 'zkzb', 'wlzb', 'xlzb', 'ylzb', 'zlzb', 'wjwc', 'xjwc', 'yjwc', 'zjwc', 'wkwc', 'xkwc', 'ykwc', 'zkwc', 'wlwc', 'xlwc', 'ylwc', 'zlwc', 'wjxc', 'xjxc', 'yjxc', 'zjxc', 'wkxc', 'xkxc', 'ykxc', 'zkxc', 'wlxc', 'xlxc', 'ylxc', 'zlxc', 'wjyc', 'xjyc', 'yjyc', 'zjyc', 'wkyc', 'xkyc', 'ykyc', 'zkyc', 'wlyc', 'xlyc', 'ylyc', 'zlyc', 'wjzc', 'xjzc', 'yjzc', 'zjzc', 'wkzc', 'xkzc', 'ykzc', 'zkzc', 'wlzc', 'xlzc', 'ylzc', 'zlzc']),
		("25", ['aj', 'bj', 'cj', 'ak', 'bk', 'ck', 'al', 'bl', 'cl']),
		("55", ['jj', 'kj', 'lj', 'jk', 'kk', 'lk', 'jl', 'kl', 'll']),
		("762", ['pma', 'qma', 'rma', 'sma', 'pna', 'qna', 'rna', 'sna', 'poa', 'qoa', 'roa', 'soa', 'pmb', 'qmb', 'rmb', 'smb', 'pnb', 'qnb', 'rnb', 'snb', 'pob', 'qob', 'rob', 'sob', 'pmc', 'qmc', 'rmc', 'smc', 'pnc', 'qnc', 'rnc', 'snc', 'poc', 'qoc', 'roc', 'soc']),
		("56", ['jm', 'km', 'lm', 'jn', 'kn', 'ln', 'jo', 'ko', 'lo']),
		("427", ['gap', 'hap', 'iap', 'gbp', 'hbp', 'ibp', 'gcp', 'hcp', 'icp', 'gaq', 'haq', 'iaq', 'gbq', 'hbq', 'ibq', 'gcq', 'hcq', 'icq', 'gar', 'har', 'iar', 'gbr', 'hbr', 'ibr', 'gcr', 'hcr', 'icr', 'gas', 'has', 'ias', 'gbs', 'hbs', 'ibs', 'gcs', 'hcs', 'ics']),
		("643", ['mgd', 'ngd', 'ogd', 'mhd', 'nhd', 'ohd', 'mid', 'nid', 'oid', 'mge', 'nge', 'oge', 'mhe', 'nhe', 'ohe', 'mie', 'nie', 'oie', 'mgf', 'ngf', 'ogf', 'mhf', 'nhf', 'ohf', 'mif', 'nif', 'oif']),
		("836", ['tdm', 'udm', 'vdm', 'tem', 'uem', 'vem', 'tfm', 'ufm', 'vfm', 'tdn', 'udn', 'vdn', 'ten', 'uen', 'ven', 'tfn', 'ufn', 'vfn', 'tdo', 'udo', 'vdo', 'teo', 'ueo', 'veo', 'tfo', 'ufo', 'vfo']),
		("484", ['gtg', 'htg', 'itg', 'gug', 'hug', 'iug', 'gvg', 'hvg', 'ivg', 'gth', 'hth', 'ith', 'guh', 'huh', 'iuh', 'gvh', 'hvh', 'ivh', 'gti', 'hti', 'iti', 'gui', 'hui', 'iui', 'gvi', 'hvi', 'ivi']),
	]

	dict = ["","","abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"]
	for case in testCase:
		if test_module.letterCombinations(case[0], dict) != case[1]:
			raise RuntimeError("testLetterCombinations failed!! ")

	print "testLetterCombinations done!"

def testFourSum():
	testCase = [
		([-1,0,1,2,-1,-4], -1, [[-4,0,1,2],[-1,-1,0,1]]),
		([5,5,3,5,1,-5,1,-2], 4, [[-5,1,3,5]]),
		([-3,-2,-1,0,0,1,2,3], 0, [[-3,-2,2,3],[-3,-1,1,3],[-3,0,0,3],[-3,0,1,2],[-2,-1,0,3],[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]),
		([-497,-488,-488,-484,-463,-463,-442,-402,-397,-394,-384,-380,-361,-358,-355,-350,-344,-338,-333,-330,-328,-325,-305,-301,-292,-290,-272,-262,-220,-202,-189,-172,-166,-162,-137,-133,-121,-90,-69,-68,-55,-51,-50,-44,-44,-38,-36,-14,-4,15,22,38,75,91,110,148,155,157,160,166,170,191,205,215,219,223,223,235,255,267,277,280,282,300,314,315,330,361,393,412,419,461,478,497], -2057, []),
	]

	for case in testCase:
		if sorted(test_module.fourSum(case[0], case[1])) != sorted(case[2]):
			raise RuntimeError("testFourSum failed!!")

	print "testFourSum done!"

def testGenerateParenthesis():
	testCase = [
		(0, []),
		(1, ["()"]),
		(2, ["(())","()()"]),
		(3,['((()))', '(()())', '(())()', '()(())', '()()()']),
		(4, ['(((())))', '((()()))', '((())())', '((()))()', '(()(()))', '(()()())', '(()())()', '(())(())', '(())()()', '()((()))', '()(()())', '()(())()', '()()(())', '()()()()']),
		
	]

	for case in testCase:
		if test_module.generateParenthesis(case[0]) != case[1]:
			raise RuntimeError("testGenerateParenthesis failed!! %s" % case[0])

	print "testGenerateParenthesis done!"

def testSwapPairs():
	testCase = [
		([], "None"),
		([0], "0"),
		([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "1,0,3,2,5,4,7,6,9,8,11,10,13,12,15,14,17,16,19,18"),
		([0, 1, 2], "1,0,2"),
		([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "1,0,3,2,5,4,7,6,9,8,11,10,12"),
		([0, 1, 2, 3, 4, 5, 6, 7, 8], "1,0,3,2,5,4,7,6,8"),
		([0, 1, 2, 3, 4, 5], "1,0,3,2,5,4"),
		([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], "1,0,3,2,5,4,7,6,9,8"),
		([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], "1,0,3,2,5,4,7,6,9,8,11,10"),
		([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], "1,0,3,2,5,4,7,6,9,8,11,10,13,12,15,14,17,16"),
		([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], "1,0,3,2,5,4,7,6,9,8,11,10,13,12,15,14,16"),
		([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], "1,0,3,2,5,4,7,6,9,8,11,10,13,12,14"),
		([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "1,0,3,2,5,4,7,6,9,8,11,10,12"),
		([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], "1,0,3,2,5,4,7,6,9,8,10"),
		([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "1,0,3,2,5,4,7,6,9,8,11,10,13,12,15,14"),
		([0, 1, 2], "1,0,2"),
		([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "1,0,3,2,5,4,7,6,9,8,11,10,13,12,15,14"),
		([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], "1,0,3,2,5,4,7,6,9,8,11,10,13,12,15,14,17,16"),
		([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], "1,0,3,2,5,4,7,6,9,8,10"),
		([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], "1,0,3,2,5,4,7,6,9,8,11,10,13,12"),
		([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], "1,0,3,2,5,4,7,6,9,8,11,10,13,12,15,14,17,16"),
		([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], "1,0,3,2,5,4,7,6,9,8,10"),
	]
	for case in testCase:
		ret = test_module.swapPairs( linked_list.createLinkedLst(case[0]) )
		ret2 = test_module.swapPairs2( linked_list.createLinkedLst(case[0]) )
		if str(ret) != case[1] or str(ret) != str(ret2):
			raise RuntimeError("testSwapPairs failed!!")

	print "testSwapPairs done!"

def testDivide():
	testCase = [
		(1,0,0),
		(-2,-1,2),
		(-5,2,-3),
		(5,-2,-3),
		(5,2,2),
		(2**31+1,1, 2**31-1),
		(2**31+2,-1, -2**31),
		(-(2**31+2),1, -2**31),
	]

	for i in xrange(0, 900):
		a = random.randint(0,500)
		b = random.randint(0,500)
		if random.randint(1,5) <= 2:
			a = -a
		if random.randint(1,5) <= 2:
			b = -b
		ret = a/b if b != 0 else 0
		testCase.append((a, b, ret))

	for case in testCase:
		if test_module.divide(case[0], case[1]) != case[2]:
			print test_module.divide(case[0], case[1]), 2 ** 31 - 1
			raise RuntimeError("testDivide failed!! %s" % str(case))

	print "testDivide done!"

def testNextPermutation():
	testCase = [
		([], []),
		([1], [1]),
		([1,3,2], [2,1,3]),
		([1,2], [2,1]),
		([1,2,3], [1,3,2]),
		([3,2,1], [1,2,3]),
		([5,5,5], [5,5,5]),
		([9, 4, 2, 8, 0, 6, 9], [9, 4, 2, 8, 0, 9, 6]),
		([9, 0, 9, 0, 9, 2, 1, 8], [9, 0, 9, 0, 9, 2, 8, 1]),
		([5, 2, 4, 4, 6, 7], [5, 2, 4, 4, 7, 6]),
		([1, 2, 1, 2, 4], [1, 2, 1, 4, 2]),
		([3, 8, 2, 0, 4, 0, 2], [3, 8, 2, 0, 4, 2, 0]),
		([1, 1, 3, 1, 9, 4], [1, 1, 3, 4, 1, 9]),
		([8, 6, 9, 6, 4, 3, 9, 1], [8, 6, 9, 6, 4, 9, 1, 3]),
		([9, 2, 2, 5, 9, 0, 5], [9, 2, 2, 5, 9, 5, 0]),
		([0, 1, 5, 9, 5, 0, 5], [0, 1, 5, 9, 5, 5, 0]),
		([5, 9, 8, 9, 6, 1, 8], [5, 9, 8, 9, 6, 8, 1]),
		([5, 0, 6, 1, 7, 6], [5, 0, 6, 6, 1, 7]),
		([0, 3, 3, 2, 5, 3, 2, 4], [0, 3, 3, 2, 5, 3, 4, 2]),
		([2, 4, 4, 5, 5, 5, 9], [2, 4, 4, 5, 5, 9, 5]),
		([6, 0, 8, 0, 6, 2, 4, 6], [6, 0, 8, 0, 6, 2, 6, 4]),
		([8, 9, 0, 1, 7], [8, 9, 0, 7, 1]),
		([8, 9, 2, 5, 1, 7, 2], [8, 9, 2, 5, 2, 1, 7]),
		([5, 6, 2, 2, 3], [5, 6, 2, 3, 2]),
		([9, 0, 7, 8, 9, 5, 2, 2], [9, 0, 7, 9, 2, 2, 5, 8]),
		([7, 0, 8, 9, 1, 2, 6], [7, 0, 8, 9, 1, 6, 2]),
		([0, 6, 2, 1, 9, 0], [0, 6, 2, 9, 0, 1]),
	]

	for case in testCase:
		temp = case[0]
		test_module.nextPermutation(case[0])
		if case[0] != case[1]:
			raise RuntimeError("testNextPermutation failed! %s" % case[0])

	print "testNextPermutation done!"

def testSearchRange():
	testCase = [
		([],1,[-1,-1]),
		([2,2], 1, [-1, -1]),
		([2,2], 3, [-1, -1]),
		([2,2,2,3], 2, [0, 2]),
		([1,2,2,2], 2, [1, 3]),
		([4, 5, 5, 5, 6, 7, 8, 10, 10], 7, [5, 5]),
		([3, 4, 4, 4, 5, 6, 8, 9, 10, 10], 1, [-1, -1]),
		([4, 4, 5, 7, 8, 8, 8], 12, [-1, -1]),
		([1, 1, 1, 1, 3, 5, 6, 6, 8, 10], 14, [-1, -1]),
		([1, 1, 2, 3, 6, 6, 7, 8, 9, 9], 5, [-1, -1]),
		([1, 2, 2, 3, 7, 7, 9], 9, [6, 6]),
		([1, 1, 2, 5, 8, 8, 10], 2, [2, 2]),
		([1, 1, 2, 2, 3, 7, 7, 7], 11, [-1, -1]),
		([3, 3, 5, 6, 6, 8, 10], 1, [-1, -1]),
		([1, 3, 4, 6, 9, 10, 10], 4, [2, 2]),
		([3, 5, 6, 6, 7, 8, 8, 9, 9, 10], 1, [-1, -1]),
		([1, 2, 2, 4, 6, 7, 9, 9, 10], 13, [-1, -1]),
		([1, 2, 2, 3, 4, 6, 7, 9, 9], 13, [-1, -1]),
		([2, 3, 3, 5, 5, 5, 9, 10, 10], 13, [-1, -1]),
		([1, 2, 2, 4, 5, 6, 7], 7, [6, 6]),
		([1, 2, 2, 3, 3, 4, 6, 9], 15, [-1, -1]),
		([2, 2, 5, 5, 6, 8, 9, 10, 10, 10], 5, [2, 3]),
		([1, 2, 3, 3, 3, 4, 4, 5, 8, 10], 12, [-1, -1]),
		([2, 3, 3, 4, 5, 5, 6, 7, 7, 9], 6, [6, 6]),
		([2, 5, 5, 5, 5, 8, 10], 5, [1, 4]),
	]


	for case in testCase:
		if test_module.searchRange(case[0], case[1]) != case[2]:
			raise RuntimeError("testSearchRange failed! %s" % str(case))

	print "testSearchRange done!"

def testSearchInsert():
	testCase = [
		([], 1, 0),
		([2, 2], 3, 2),
		([2, 2, 2, 3], 2, 0),
		([1, 2, 2, 2], 2, 1),
		([4, 5, 5, 5, 6, 7, 8, 10, 10], 7, 5),
		([3, 4, 4, 4, 5, 6, 8, 9, 10, 10], 1, 0),
		([4, 4, 5, 7, 8, 8, 8], 12, 7),
		([1, 1, 1, 1, 3, 5, 6, 6, 8, 10], 14, 10),
		([1, 1, 2, 3, 6, 6, 7, 8, 9, 9], 5, 4),
		([1, 2, 2, 3, 7, 7, 9], 9, 6),
		([1, 1, 2, 5, 8, 8, 10], 2, 2),
		([1, 1, 2, 2, 3, 7, 7, 7], 11, 8),
		([3, 3, 5, 6, 6, 8, 10], 1, 0),
		([1, 3, 4, 6, 9, 10, 10], 4, 2),
		([3, 5, 6, 6, 7, 8, 8, 9, 9, 10], 1, 0),
		([1, 2, 2, 4, 6, 7, 9, 9, 10], 13, 9),
		([1, 2, 2, 3, 4, 6, 7, 9, 9], 13, 9),
		([2, 3, 3, 5, 5, 5, 9, 10, 10], 13, 9),
		([1, 2, 2, 4, 5, 6, 7], 7, 6),
		([1, 2, 2, 3, 3, 4, 6, 9], 15, 8),
		([2, 2, 5, 5, 6, 8, 9, 10, 10, 10], 5, 2),
		([1, 2, 3, 3, 3, 4, 4, 5, 8, 10], 12, 10),
		([2, 3, 3, 4, 5, 5, 6, 7, 7, 9], 6, 6),
		([2, 5, 5, 5, 5, 8, 10], 5, 1),
	]

	for case in testCase:
		if test_module.searchInsert(case[0], case[1]) != case[2]:
			raise RuntimeError("testSearchInsert failed! %s" % str(case))

	print "testSearchInsert done!"

def testCombinationSum():
	testCase = [
		([92,71,89,74,102,91,70,119,86,116,114,106,80,81,115,99,117,93,76,77,111,110,75,104,95,112,94,73], 310, [[70, 70, 71, 99], [70, 70, 75, 95], [70, 70, 76, 94], [70, 70, 77, 93], [70, 70, 81, 89], [70, 71, 74, 95], [70, 71, 75, 94], [70, 71, 76, 93], [70, 71, 77, 92], [70, 71, 80, 89], [70, 73, 73, 94], [70, 73, 74, 93], [70, 73, 75, 92], [70, 73, 76, 91], [70, 73, 81, 86], [70, 74, 74, 92], [70, 74, 75, 91], [70, 74, 77, 89], [70, 74, 80, 86], [70, 75, 76, 89], [70, 77, 77, 86], [70, 80, 80, 80], [71, 71, 73, 95], [71, 71, 74, 94], [71, 71, 75, 93], [71, 71, 76, 92], [71, 71, 77, 91], [71, 73, 73, 93], [71, 73, 74, 92], [71, 73, 75, 91], [71, 73, 77, 89], [71, 73, 80, 86], [71, 74, 74, 91], [71, 74, 76, 89], [71, 75, 75, 89], [71, 76, 77, 86], [71, 77, 81, 81], [73, 73, 73, 91], [73, 73, 75, 89], [73, 74, 74, 89], [73, 74, 77, 86], [73, 75, 76, 86], [73, 75, 81, 81], [73, 76, 80, 81], [73, 77, 80, 80], [74, 74, 76, 86], [74, 74, 81, 81], [74, 75, 75, 86], [74, 75, 80, 81], [74, 76, 80, 80], [74, 117, 119], [75, 75, 80, 80], [75, 77, 77, 81], [75, 116, 119], [76, 76, 77, 81], [76, 77, 77, 80], [76, 115, 119], [76, 117, 117], [77, 114, 119], [77, 116, 117], [80, 111, 119], [80, 114, 116], [80, 115, 115], [81, 110, 119], [81, 112, 117], [81, 114, 115], [86, 110, 114], [86, 112, 112], [89, 102, 119], [89, 104, 117], [89, 106, 115], [89, 110, 111], [91, 102, 117], [91, 104, 115], [92, 99, 119], [92, 102, 116], [92, 104, 114], [92, 106, 112], [93, 102, 115], [93, 106, 111], [94, 99, 117], [94, 102, 114], [94, 104, 112], [94, 106, 110], [95, 99, 116], [95, 104, 111], [99, 99, 112], [102, 102, 106], [102, 104, 104]]),
		([2,3,6,7], 7, [[2, 2, 3], [7]]),
		([2,2,2,3,6,7], 7, [[2, 2, 3], [7]]),
		([13,15], 10, []),
		([],1, []),
		([8,7,4,3], 11, [[3, 4, 4], [3, 8], [4, 7]]),
		([1], 1, [[1]])
	]

	for case in testCase:
		if test_module.combinationSum(case[0], case[1]) != case[2]:
			raise RuntimeError("testCombinationSum failed! %s", str(case))
	print "testCombinationSum done!"

def testCombinationSum2():
	testCase = [
		([10,1,2,7,6,1,5], 8, [[1, 1, 6], [1, 2, 5], [1, 7], [2, 6]]),
		#([92,71,89,74,102,91,70,119,86,116,114,106,80,81,115,99,117,93,76,77,111,110,75,104,95,112,94,73], 310, [[70, 70, 71, 99], [70, 70, 75, 95], [70, 70, 76, 94], [70, 70, 77, 93], [70, 70, 81, 89], [70, 71, 74, 95], [70, 71, 75, 94], [70, 71, 76, 93], [70, 71, 77, 92], [70, 71, 80, 89], [70, 73, 73, 94], [70, 73, 74, 93], [70, 73, 75, 92], [70, 73, 76, 91], [70, 73, 81, 86], [70, 74, 74, 92], [70, 74, 75, 91], [70, 74, 77, 89], [70, 74, 80, 86], [70, 75, 76, 89], [70, 77, 77, 86], [70, 80, 80, 80], [71, 71, 73, 95], [71, 71, 74, 94], [71, 71, 75, 93], [71, 71, 76, 92], [71, 71, 77, 91], [71, 73, 73, 93], [71, 73, 74, 92], [71, 73, 75, 91], [71, 73, 77, 89], [71, 73, 80, 86], [71, 74, 74, 91], [71, 74, 76, 89], [71, 75, 75, 89], [71, 76, 77, 86], [71, 77, 81, 81], [73, 73, 73, 91], [73, 73, 75, 89], [73, 74, 74, 89], [73, 74, 77, 86], [73, 75, 76, 86], [73, 75, 81, 81], [73, 76, 80, 81], [73, 77, 80, 80], [74, 74, 76, 86], [74, 74, 81, 81], [74, 75, 75, 86], [74, 75, 80, 81], [74, 76, 80, 80], [74, 117, 119], [75, 75, 80, 80], [75, 77, 77, 81], [75, 116, 119], [76, 76, 77, 81], [76, 77, 77, 80], [76, 115, 119], [76, 117, 117], [77, 114, 119], [77, 116, 117], [80, 111, 119], [80, 114, 116], [80, 115, 115], [81, 110, 119], [81, 112, 117], [81, 114, 115], [86, 110, 114], [86, 112, 112], [89, 102, 119], [89, 104, 117], [89, 106, 115], [89, 110, 111], [91, 102, 117], [91, 104, 115], [92, 99, 119], [92, 102, 116], [92, 104, 114], [92, 106, 112], [93, 102, 115], [93, 106, 111], [94, 99, 117], [94, 102, 114], [94, 104, 112], [94, 106, 110], [95, 99, 116], [95, 104, 111], [99, 99, 112], [102, 102, 106], [102, 104, 104]]),
		([2,3,6,7], 7, [[7]]),
		([13,15], 10, []),
		([],1, []),
		([8,7,4,3], 11, [[3, 8], [4, 7]]),
		([1], 1, [[1]])
	]

	for case in testCase:
		if test_module.combinationSum2(case[0], case[1]) != case[2]:
			print test_module.combinationSum2(case[0], case[1])
			raise RuntimeError("testCombinationSum2 failed! %s", str(case))
	print "testCombinationSum2 done!"

def testMultiplyString():
	testCase = [
		(0,12,0),
		(0,0,0),
	]
	for i in xrange(0, 100):
		a = random.randint(0, 10000)
		b = random.randint(0,10000)
		testCase.append((a, b, a*b))

	for case in testCase:
		if test_module.multiplyString(str(case[0]), str(case[1])) != str(case[2]):
			raise RuntimeError("testMultiplyString failed!! %s" % (str(case)))

	print "testMultiplyString done!"

def testPermutations():
	testCase = [
		([1,2,3], [ [1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], [3,2,1] ]),
		([], []),
	]

	for case in testCase:
		if sorted(test_module.permute(case[0])) != case[1]:
			print sorted(test_module.permute(case[0]))
			raise RuntimeError("testPermutations failed!!")

	print "testPermutations done!"

def testRotateMatrix():
	testCase = [
		([], []),
		([[1,2],[3,4]], [[3,1],[4,2]]),
		([[1,2,3],[4,5,6],[7,8,9]], [[7, 4, 1], [8, 5, 2], [9, 6, 3]]),
		([[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]], [[13, 9, 5, 1], [14, 10, 6, 2], [15, 11, 7, 3], [16, 12, 8, 4]])
	]

	for case in testCase:
		test_module.rotateMatrix(case[0])
		if case[0] != case[1]:
			raise RuntimeError("testRotateMatrix failed!! %s" % str(case[0]))

	print "testRotateMatrix done!"

def testAnagrams():
	def generateAnagrams(size):
		s = randomString(size)
		retSize = random.randint(2,7)
		ret = set()
		ret.add(s)
		cnt = 50
		while cnt and len(ret) < retSize:
			randLst = []
			while len(randLst) < size:
				val = random.randint(0, size-1)
				if val not in randLst:
					randLst.append(val)
			s2 = "".join([ s[x] for x in randLst ] )
			ret.add(s2)
			cnt -= 1

		return list(ret)

	testCase = [
		([], []),
		(["tea","and","ate","eat","dan"], ["and","dan","tea","ate","eat"]),
	]
	for i in xrange(0, 20):
		toCheck = set()
		lst1 = generateAnagrams(5)
		lst2 = generateAnagrams(4)
		odd1 = lst1[0]
		odd2 = lst2[0]
		for i in xrange(0, 26):
			c = chr(ord('a') + i)
			if odd1[:-1] + c not in lst1 and random.randint(1,10) == 1:
				toCheck.add(odd1[:-1] + c)
			if odd2[:-1] + c not in lst2 and random.randint(1,10) == 1:
				toCheck.add(odd2[:-1] + c)

		ret = set()
		for item in lst1:
			if len(lst1) > 1:
				ret.add(item)
			toCheck.add(item)
		for item in lst2:
			if len(lst2) > 1:
				ret.add(item)
			toCheck.add(item)
		testCase.append((list(toCheck), list(ret)))

	for case in testCase:
		if sorted(test_module.anagrams(case[0])) != sorted(case[1]):
			raise RuntimeError("testAnagrams failed!!")
	print "testAnagrams done!"

def testPow():
	testCase = [
		(0, 1, 0),
	]
	for i in xrange(0, 200):
		x = random.randint(0, 100)
		if random.randint(1,3) == 2:
			x = x / 10.0000
		if random.randint(1,3) == 2:
			x = -x
		n = random.randint(-10,10)
		ret = 0
		if x == 0.0 and n < 0:
			ret = 0
		else:
			ret = x ** n

		testCase.append((x, n, ret))
	for case in testCase:
		if abs(case[2] - test_module.pow(case[0], case[1])) > 0.001 or\
			abs(case[2] - test_module.pow2(case[0], case[1])) > 0.001:
			raise RuntimeError("testPow failed!! %s" % str(case))

	print "testPow done!"


def testMaxSubArray():
	testCase = [
		([], 0),
		([-64, -20, 81, -69, 3, -91, -31, -85, 46, -69, 20, 9, -98, 93, -79, 75, -41, -41, 23, 29], 93),
		([67, 68, 86, -91, 90, 27, 66, -57, 93, -48, -74, -75, -90, -64, 86, 53, 47, -44, 19, -11], 349),
		([81, -27, 43, 85, 71, -76, -64, 91, -31, 37, -69, -49, -86, -43, 64, 88, -72, 93, -29, -60], 253),
		([-71, 93, -71, 25, -33, -41, -58, -58, 74, 67, 67, -9, 65, 33, 75, 21, -54, 30, 78, -56], 447),
		([-76, -20, 93, 56, 72, 70, 67, 66, 33, 41, 46, 77, -35, 76, 77, -73, -57, 68, 89, -51], 766),
		([93, 57, 84, -62, 16, 19, 17, 27, -50, -60, -94, 41, 94, 41, 96, 64, 70, -12, -86, -22], 453),
		([31, 89, 87, 11, -92, 83, -78, -10, 76, -49, 46, -7, -40, -95, 88, 28, 69, -22, -91, 30], 237),
		([-82, 82, 14, -75, 98, -25, 46, -96, 65, -62, -9, -25, -81, -100, 8, 14, -69, -55, -36, -51], 140),
		([37, -57, -73, -37, -19, 4, 79, 61, -88, 31, -90, -76, 43, 14, -72, 16, 65, -73, -34, 8], 144),
		([-33, 66, 48, 17, -9, -49, -47, 49, 55, -48, -9, -32, -14, -76, -95, -80, 72, 25, -89, 41], 131),
		([-62, -84, -65, 49, 20, -74, 49, -30, -10, -44, -18, 82, -61, 54, -29, -38, -43, 7, -29, -55], 82),
		([-24, -33, -54, -92, -69, -9, -71, -22, 55, -89, -15, -31, 61, 5, -19, -35, -33, -88, 41, -76], 66),
		([-93, 99, -6, 85, -18, 49, -65, -26, 94, -90, -74, 99, 39, 48, 96, 6, -64, -99, 31, -100], 336),
		([-36, -95, 13, -76, -99, -4, 10, -87, -89, -86, -92, -94, 67, 40, 29, 22, -89, 9, -37, -80], 158),
		([-88, 58, 74, -100, -36, -50, -95, 30, 18, -50, -55, 77, 15, 24, -40, -49, -33, 59, -83, -62], 132),
		([-33, 19, 8, 76, 42, 11, 90, 88, -94, 24, 70, -45, -71, -51, 55, -9, 80, -78, -6, 60], 334),
		([-49, 88, -28, 90, 29, 41, -95, 56, -8, -25, -72, -96, -31, 65, 83, -94, -26, -7, -89, -66], 220),
		([67, -90, 48, -33, 61, -29, 75, 35, 31, -59, 8, -22, 60, -15, 18, -71, -56, -59, -10, 90], 188),
		([73, -48, -70, 9, 67, 48, -76, 65, 8, 94, -68, -12, -34, -67, 87, -58, 25, -17, -57, 67], 215),
		([-75, 41, -57, -27, -48, -57, -97, 15, 13, -96, 8, -40, -55, 62, -41, 68, 0, 20, -55, 3], 109),
	]

	for case in testCase:
		if test_module.maxSubArray(case[0]) != case[1]:
			raise RuntimeError("testMaxSubArray failed!!")

	print "testMaxSubArray done!"

def testSpiralOrder():
	testCase = [
		([], []),
		([[ 1, 2, 3 ],[ 4, 5, 6 ],[ 7, 8, 9 ]], [1,2,3,6,9,8,7,4,5]),
		([[7],[9],[6]], [7,9,6]),
		([[7,9,6]], [7,9,6]),
		([[ 1, 2, 3, 10 ],[ 4, 5, 6, 11 ],[ 7, 8, 9, 12 ]], [1, 2, 3, 10, 11, 12, 9, 8, 7, 4, 5, 6]),
	]

	for case in testCase:
		if test_module.spiralOrder(case[0]) != case[1]:
			raise RuntimeError("testSpiralOrder failed! %s" % str(case[0]))

	print "testSpiralOrder done!"

def testJumpGame():
	testCase = [
		([], False),
		([0], True),
		([0,1], False),
		([2,3,1,1,4], True),
		([3,2,1,0,4], False),
		([4, 4, 4, 8, 7, 10, 7, 1, 8, 4, 9, 9, 1, 5, 6, 0, 10, 0, 3, 1], True),
		([1, 1, 0, 6, 6, 0, 7, 10, 6, 4, 6, 5, 2, 1, 0, 7, 4, 6, 9, 0], False),
		([10, 9, 5, 4, 0, 8, 3, 4, 1, 5, 3, 2, 2, 8, 9, 3, 5, 1, 4, 1], True),
		([0, 8, 6, 3, 7, 5, 0, 0, 6, 8, 10, 6, 1, 4, 9, 1, 2, 10, 4, 5], False),
		([9, 4, 8, 4, 3, 4, 5, 8, 9, 0, 6, 6, 4, 7, 7, 1, 4, 2, 9, 8], True),
		([10, 0, 2, 6, 5, 10, 8, 4, 5, 10, 8, 10, 0, 10, 10, 0, 8, 3, 0, 2], True),
		([8, 2, 3, 0, 6, 2, 8, 4, 2, 3, 5, 3, 4, 6, 5, 3, 10, 8, 10, 3], True),
		([0, 6, 10, 4, 6, 4, 4, 7, 2, 1, 2, 1, 6, 2, 2, 1, 4, 0, 2, 3], False),
		([9, 2, 10, 6, 0, 7, 1, 5, 0, 4, 8, 8, 5, 2, 10, 9, 10, 4, 0, 7], True),
	]

	for case in testCase:
		if test_module.canJump(case[0]) != case[1]:
			raise RuntimeError("testJumpGame failed!! %s" % case[0])
	print "testJumpGame done!"

def testGenerateMatrix():
	testCase = [
		(0, []),
		(1, [[1]]),
		(2, [[1, 2], [4, 3]]),
		(3, [[1, 2, 3], [8, 9, 4], [7, 6, 5]]),
		(4, [[1, 2, 3, 4], [12, 13, 14, 5], [11, 16, 15, 6], [10, 9, 8, 7]]),
		(5, [[1, 2, 3, 4, 5], [16, 17, 18, 19, 6], [15, 24, 25, 20, 7], [14, 23, 22, 21, 8], [13, 12, 11, 10, 9]]),
	]
	for case in testCase:
		if test_module.generateMatrix(case[0]) != case[1]:
			raise RuntimeError("testGenerateMatrix failed!! %d" % case[0])

	print "testGenerateMatrix done!"

def testGetPermutation():
	testCase = [
		(3,5, "312"),(2,1, "12"),(7,60,"1254763"),(0,99,""),(2,53,""),
		(1,32,""),(9,38,"123468597"),(4,69,""),(4,12,"2431"),(7,50,"1253476"),
		(9,99,"123495768"),(5,53,"31524"),(6,58,"143562"),(5,81,"42315"),
		(0,43,""),(9,5,"123456978"),(1,39,""),(3,97,""),(2,43,""),
		(6,92,"156243"),(4,11,"2413"),(5,97,"51234"),
	]

	for case in testCase:
		if test_module.getPermutation(case[0], case[1]) != case[2]:
			raise RuntimeError("testGetPermutation failed!! %d %d" % (case[0], case[1]))
	print "testGetPermutation done!"


def testRotateRight():
	testCase = [
		([1, 2, 3], 1, "3,1,2"),
		([1], 0, "1"),
		([1, 2, 3], 2000000000, "2,3,1"),
		([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], 6, "9,10,11,12,13,14,1,2,3,4,5,6,7,8"),
		([1, 2, 3, 4, 5], 20, "1,2,3,4,5"),
		([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], 24, "5,6,7,8,9,10,11,12,13,14,1,2,3,4"),
		([1, 2, 3, 4, 5, 6, 7, 8], 3, "6,7,8,1,2,3,4,5"),
		([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 18, "3,4,5,6,7,8,9,10,1,2"),
		([1, 2, 3, 4], 2, "3,4,1,2"),
		([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], 7, "5,6,7,8,9,10,11,1,2,3,4"),
		([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], 38, "5,6,7,8,9,10,11,12,13,14,1,2,3,4"),
		([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], 7, "5,6,7,8,9,10,11,1,2,3,4"),
		([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], 0, "1,2,3,4,5,6,7,8,9,10,11,12,13"),
		([1, 2, 3, 4], 20, "1,2,3,4"),
		([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], 49, "4,5,6,7,8,9,10,11,12,13,1,2,3"),
		([1, 2, 3, 4], 1, "4,1,2,3"),
		([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], 5, "7,8,9,10,11,1,2,3,4,5,6"),
		([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], 61, "6,7,8,9,10,11,1,2,3,4,5"),
		([1, 2, 3, 4, 5, 6], 4, "3,4,5,6,1,2"),
		([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], 44, "5,6,7,8,9,10,11,12,1,2,3,4"),
		([1, 2, 3, 4, 5, 6], 18, "1,2,3,4,5,6"),
		([1, 2, 3, 4, 5], 20, "1,2,3,4,5"),
		([1, 2, 3, 4, 5, 6, 7, 8, 9], 41, "5,6,7,8,9,1,2,3,4"),	
	]

	for case in testCase:
		lst = linked_list.createLinkedLst(case[0])
		ret = str(test_module.rotateRight(lst, case[1]))
		if ret != case[2]:
			raise RuntimeError("testRotateRight failed!! %s %d" % (str(case[0]), case[1]))

	print "testRotateRight done!"

def testUniquePaths():
	testCase = [
		(2, 5, 5), (1,5,1),
		(93, 67, 2737158422982075697084497097760673619727797850),(74, 94, 1741221082007179243598649702544644964807931346000),(97, 40, 13300649953523781765341005255405500),
		(38, 65, 5397234129638871133346507775),(56, 32, 232059241971866600926656),(58, 99, 12535617790312130209999079686846049796655500),
		(51, 59, 18529000879706807531602016459016),(98, 92, 20727878870248140516019424202137444496555352602984696200),(40, 47, 2509852088803449039224400),
		(83, 59, 12047912578768747580968424546714111495600),(7, 39, 7059052),(51, 61, 62757830663187746413533383430396),
		(83, 58, 4991278068347052569258347312210131905320),(53, 84, 84542582990368368308183766933720166200),(95, 90, 674688620033024331087132967198641654628691999664753000),
		(98, 38, 1505274015358705198643403573005800),(46, 40, 1358272895117160656521440),(84, 35, 340811579728681083704279633490),
		(75, 8, 3477216600),(38, 13, 92263734836),(87, 21, 1944755294749129923060),(100, 32, 842689791195123863257531408000),
		(82, 16, 130815226545884704),(28, 76, 3559022103502725100714704),(26, 45, 4150132566624501912),(3, 32, 528),
		(48, 36, 177879702602584113899040),(48, 37, 410111536555957818156120),(96, 36, 60584438988157669745491463932800),(21, 79, 342163121308290625896),
	]

	for case in testCase:
		ret1 = test_module.uniquePaths2(case[0], case[1])
		ret2 = test_module.uniquePaths(case[0], case[1])
		if ret1 != ret2 or ret1 != case[2]:
			raise RuntimeError("testUniquePaths failed!! %s" % str(case))

	print "testUniquePaths done!"

def testUniquePathsWithObstacles():
	testCase = [
	([[1]], 0),
	([[0,0]], 1),
	([[0]], 1),
	([[1], [0], [0], [0]], 0),
	([[0, 1, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], 462),
	([[1, 0, 1], [0, 1, 0], [0, 0, 1], [0, 0, 0], [0, 0, 0]], 0),
	([[0], [0], [0], [0]], 1),
	([[0, 0, 0, 0]], 1),
	([[0, 0, 0, 0]], 1),
	([[0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 1]], 0),
	([[0], [0]], 1),
	([[0, 1], [1, 0], [0, 0], [0, 0], [0, 0], [0, 1]], 0),
	([[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [1, 0, 0, 0, 0]], 14),
	([[0, 0, 0], [0, 0, 0], [0, 1, 0]], 3),
	([[0, 0, 0, 1, 0], [0, 1, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], 11),
	([[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], 10),
	([[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]], 252),
	([[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0]], 112),
	([[0, 0, 0], [0, 1, 1]], 0),
	([[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 1, 0], [0, 0, 0, 0]], 8),
	([[0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 0], [0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0]], 13),
	([[0], [1]], 0),
	([[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]], 6),
	]
	for case in testCase:
		if test_module.uniquePathsWithObstacles(case[0]) != case[1]:
			raise RuntimeError("testUniquePathsWithObstacles failed!! %s" % str(case[0]))

	print "testUniquePathsWithObstacles done!"

def testMinPathSum():
	testCase = [
		([], 0),
		([[1,2],[1,1]], 3),
		([[1,3,1],[1,5,1],[4,2,1]], 7),
		([[1]], 1),
		([[8, 6, 4, 4, 2, 9, 7], [8, 8, 6, 2, 5, 1, 1], [1, 5, 4, 2, 4, 3, 8], [9, 4, 10, 8, 7, 7, 6], [6, 5, 8, 7, 4, 4, 6]], 50),
		([[4, 7], [4, 2], [10, 7], [7, 6], [1, 1], [1, 7], [1, 9]], 37),
		([[4, 9, 3, 1, 7, 9], [4, 1, 6, 10, 7, 10], [5, 4, 4, 3, 1, 6], [1, 2, 8, 4, 10, 10]], 37),
		([[9, 5, 7, 9, 8], [9, 6, 1, 8, 4], [3, 5, 1, 9, 1], [7, 2, 9, 3, 4], [5, 9, 5, 1, 10], [1, 2, 5, 6, 6]], 47),
		([[3, 6, 7, 5, 9, 3, 2], [6, 1, 10, 8, 10, 8, 8], [2, 3, 7, 5, 9, 10, 4], [2, 10, 7, 6, 4, 7, 3], [1, 2, 5, 1, 9, 8, 8]], 47),
		([[7], [9], [4], [9], [5], [4], [7]], 45),
		([[1, 6, 7, 4, 7, 9], [4, 6, 6, 10, 3, 9], [5, 8, 3, 10, 4, 8], [9, 7, 5, 10, 3, 1], [3, 7, 2, 1, 9, 2], [9, 5, 3, 3, 6, 7], [1, 7, 8, 5, 2, 7]], 45),
		([[7, 6], [3, 5], [6, 1], [1, 1]], 17),
		([[9, 2, 5, 8], [3, 9, 8, 9]], 33),
		([[3, 2, 2, 2], [5, 2, 1, 2], [4, 5, 5, 10], [2, 8, 3, 7], [1, 9, 10, 10], [7, 4, 3, 1]], 30),
	]

	for case in testCase:
		if test_module.minPathSum(case[0]) != case[1]:
			raise RuntimeError("testMinPathSum failed!! %s", str(case[0]))

	print "testMinPathSum done!"

def testMySqrt():
	testCase = [
		(8, 2),(0, 0),(1, 1),(6113, 78),(1842, 42),(2535, 50),
		(1647, 40),(5764, 75),(6866, 82),(7713, 87),(985, 31),(4383, 66),(358, 18),(5592, 74),(8434, 91),(4869, 69),
		(9414, 97),(830, 28),(4369, 66),(2935, 54),(1692, 41),(894, 29),(2681, 51),(8318, 91),(6321, 79),(9942, 99),
		(5923, 76),(1198, 34),(4573, 67),(4208, 64),(552, 23),(7635, 87),(3179, 56),(8699, 93),(4173, 64),(8182, 90),
	]

	for case in testCase:
		ret1 = test_module.mySqrt(case[0])
		ret2 = test_module.mySqrt2(case[0])
		if ret1 != ret2 or ret1 != case[1]:
			raise RuntimeError("testMySqrt failed!! %d" % case[0])

	print "testMySqrt done!"

def testSetZeroes():
	testCase = [
	([[0,0,0,5],[4,3,1,4],[0,1,1,4],[1,2,1,3],[0,0,1,1]], [[0,0,0,0],[0,0,0,4],[0,0,0,0],[0,0,0,3],[0,0,0,0]]),
	([[-4,-2147483648,6,-7,0],[-8,6,-8,-6,0],[2147483647,2,-9,-6,-10]], [[0,0,0,0,0],[0,0,0,0,0],[2147483647,2,-9,-6,0]]),
	([[5], [4], [0], [2], [1]], [[0], [0], [0], [0], [0]]),
	([[5], [4], [3], [0], [1]], [[0], [0], [0], [0], [0]]),
	([[15, 14, 13, 0, 11], [10, 0, 8, 7, 0], [0, 4, 3, 2, 1]], [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]),
	([[20, 19, 18, 17, 16], [15, 14, 0, 12, 11], [10, 9, 8, 7, 6], [5, 4, 3, 2, 1]], [[20, 19, 0, 17, 16], [0, 0, 0, 0, 0], [10, 9, 0, 7, 6], [5, 4, 0, 2, 1]]),
	([[20, 19, 18, 17, 16], [15, 14, 0, 12, 11], [10, 9, 8, 7, 0], [5, 4, 3, 2, 1]], [[20, 19, 0, 17, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [5, 4, 0, 2, 0]]),
	([[2], [1]], [[2], [1]]),
	([[12, 11, 10], [0, 8, 7], [6, 5, 4], [3, 0, 1]], [[0, 0, 10], [0, 0, 0], [0, 0, 4], [0, 0, 0]]),
	([[25, 24, 23, 22, 0], [20, 19, 0, 17, 0], [15, 14, 13, 12, 11], [10, 9, 8, 0, 6], [0, 4, 3, 0, 1]], [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 14, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]),
	([[0, 1]], [[0, 0]]),
	([[12, 11, 0, 9], [0, 0, 6, 5], [4, 0, 2, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]),
	([[5], [4], [0], [0], [1]], [[0], [0], [0], [0], [0]]),
	([[8, 0], [6, 5], [0, 3], [2, 0]], [[0, 0], [0, 0], [0, 0], [0, 0]]),
	([[8, 0], [0, 5], [4, 3], [0, 1]], [[0, 0], [0, 0], [0, 0], [0, 0]]),
	([[9, 8, 0], [6, 5, 4], [0, 2, 1]], [[0, 0, 0], [0, 5, 0], [0, 0, 0]]),
	([[5], [0], [3], [0], [1]], [[0], [0], [0], [0], [0]]),
	([[0, 5, 4], [0, 2, 1]], [[0, 0, 0], [0, 0, 0]]),
	([[10, 0], [8, 0], [0, 5], [0, 3], [2, 1]], [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]),
	([[0, 7, 0, 5], [4, 3, 2, 0]], [[0, 0, 0, 0], [0, 0, 0, 0]]),
	([[10, 9, 8, 7, 6], [5, 4, 3, 2, 0]], [[10, 9, 8, 7, 0], [0, 0, 0, 0, 0]]),
	([[25, 24, 23, 22, 21], [20, 19, 0, 17, 0], [0, 0, 13, 12, 11], [10, 9, 8, 7, 6], [5, 4, 3, 2, 1]], [[0, 0, 0, 22, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 7, 0], [0, 0, 0, 2, 0]]),
	([[4], [3], [2], [1]], [[4], [3], [2], [1]]),
	([[4, 3], [2, 1]], [[4, 3], [2, 1]]),
	([[6, 5, 4], [3, 2, 1]], [[6, 5, 4], [3, 2, 1]]),
	([[12, 0, 10], [9, 8, 0], [6, 5, 0], [3, 2, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]]),
	([[16, 0, 14, 13], [12, 0, 10, 9], [8, 0, 6, 5], [4, 3, 2, 1]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [4, 0, 2, 1]]),
	]

	for case in testCase:
		toCheck = str(case[0])
		test_module.setZeroes(case[0])
		if case[0] != case[1]:
			raise RuntimeError("testSetZeroes failed!! %s" % toCheck)

	print "testSetZeroes done!"

def testSearchMatrix():
	testCase = [
		([], 1, False),
		([[1,3]], 1, True),
		([[1]], 2, False),
		([[1,3]], 3, True),
		([[1],[3]], 3, True),
		([[1,3,5,7],[10,11,16,20],[23,30,34,50]], 3, True),
		([[1,3,5,7],[10,11,16,20],[23,30,34,50]], 10, True),
		([[1,3,5,7],[10,11,16,20],[23,30,34,50]], 20, True),
		([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]], 22, False),
		([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]], 22, False),
		([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]], 7, True),
		([[1]], 1, True),
		([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]], 20, False),
		([[1], [2]], 12, False),
		([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 8, True),
		([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]], 7, True),
		([[1, 2], [3, 4], [5, 6], [7, 8]], 5, True),
		([[1, 2, 3]], 13, False),
		([[1, 2, 3, 4, 5]], 5, True),
	]

	for case in testCase:
		if test_module.searchMatrix(case[0], case[1]) != case[2]:
			raise RuntimeError("testSearchMatrix failed!! %s, %d " % (str(case[0]), case[1]))

	print "testSearchMatrix done!"

def testSortColors():
	testCase = [
		([], []),
	]
	for i in xrange(0, 100):
		lst = [random.randint(0,2) for x in xrange(0,100)]
		testCase.append( (lst, sorted(lst)) )

	for case in testCase:
		lst1 = [x for x in case[0]]
		test_module.sortColors(lst1)
		lst2 = [x for x in case[0]]
		test_module.sortColors2(lst2)
		if lst1 != lst2 or lst1 != case[1]:
			raise RuntimeError("testSortColors failed!!")

	print "testSortColors done!"

def testNumCombine():
	testCase = [
		(2, 1, [[1], [2]]),
		(2, 0, []),
		(0, 1, []),
		(0, 0, []),
		(1, 0, []),
		(1, 1, [[1]]),
		(1, 2, []),
		(4, 3, [[1, 2, 3], [1, 2, 4], [1, 3, 4], [2, 3, 4]]),
		(4, 2, [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]]),
		(4, 1, [[1], [2], [3], [4]]),
		(5, 2, [[1, 2], [1, 3], [1, 4], [1, 5], [2, 3], [2, 4], [2, 5], [3, 4], [3, 5], [4, 5]]),
	]
	for case in testCase:
		ret1 = sorted(test_module.numCombine(case[0], case[1]))
		ret2 = sorted(test_module.numCombine2(case[0], case[1]))
		if ret1 != ret2 or ret1 != case[2]:
			raise RuntimeError("testNumCombine failed!! %d %d" % (case[0], case[1]))

	print "testNumCombine done!"

def testSubsets():
	testCase = [
		([], [[]]),
		([1,2,3], [[], [1], [1, 2], [1, 2, 3], [1, 3], [2], [2, 3], [3]]),
	]
	
	for case in testCase:
		if sorted(test_module.subsets(case[0])) != case[1]:
			print sorted(test_module.subsets(case[0]))
			raise RuntimeError("testSubsets failed!")

	print "testSubsets done!"

def testWordSearch():
	testCase = [
		(["a"], "a", True),
		([['a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a']], "aaaaaaaaaaab", False),
		([['A', 'B', 'C', 'E'], ['S', 'F', 'C', 'S'], ['A', 'D', 'E', 'E']], "ABCCED", True),
		([['A', 'B', 'C', 'E'], ['S', 'F', 'C', 'S'], ['A', 'D', 'E', 'E']], "SEE", True),
		([['A', 'B', 'C', 'E'], ['S', 'F', 'C', 'S'], ['A', 'D', 'E', 'E']], "ABCB", False),
	]

	for case in testCase:
		if test_module.wordSearch(case[0], case[1]) != case[2]:
			raise RuntimeError("testWordSearch failed! %s %s" % (case[0], case[1]) )

	print "testWordSearch done!"

def testRemoveDuplicates2():
	testCase = [
		#([1,2,1], [1,2,1]),
		([1,1,1,2,2,3], [1,1,2,2,3]),
		([], []),
		([1], [1],),
		([1,2],[1,2],),
		([1,1,2], [1,1,2]),
		([1,1,1], [1,1]),
		([0, 0, 1, 1, 1, 1, 1, 2, 3, 3, 4, 5, 6, 6, 6, 7], [0, 0, 1, 1, 2, 3, 3, 4, 5, 6, 6, 7]),
		([0, 0, 1, 1, 1, 1, 2, 2, 3, 4, 5, 5, 5, 6, 6, 7], [0, 0, 1, 1, 2, 2, 3, 4, 5, 5, 6, 6, 7]),
		([0, 0, 1, 2, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 7], [0, 0, 1, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7]),
		([0, 1, 1, 2, 2, 2, 2, 4, 4, 5, 5, 6, 6, 7, 7], [0, 1, 1, 2, 2, 4, 4, 5, 5, 6, 6, 7, 7]),
		([0, 0, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 4, 7, 7], [0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 7, 7]),
		([0, 1, 1, 1, 1, 2, 2, 3, 3, 4, 4, 4, 5, 6, 7], [0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 6, 7]),
		([0, 1, 1, 2, 2, 2, 3, 4, 4, 5, 5, 6, 6, 7, 7], [0, 1, 1, 2, 2, 3, 4, 4, 5, 5, 6, 6, 7, 7]),
		([1, 1, 1, 2, 2, 2, 2, 4, 4, 4, 5, 5, 6, 6, 6, 7], [1, 1, 2, 2, 4, 4, 5, 5, 6, 6, 7]),
		([0, 0, 0, 0, 1, 1, 2, 3, 3, 3, 4, 4, 4, 5, 7], [0, 0, 1, 1, 2, 3, 3, 4, 4, 5, 7]),
		([0, 1, 1, 3, 5, 5, 6, 6, 6, 7, 7, 7, 7, 7, 7], [0, 1, 1, 3, 5, 5, 6, 6, 7, 7]),
		([0, 1, 1, 2, 2, 3, 4, 4, 5, 5, 6, 6, 6, 6, 7], [0, 1, 1, 2, 2, 3, 4, 4, 5, 5, 6, 6, 7]),
		([0, 0, 1, 1, 1, 1, 2, 3, 4, 5, 5, 6, 6, 6, 7], [0, 0, 1, 1, 2, 3, 4, 5, 5, 6, 6, 7]),
		([0, 1, 2, 2, 2, 2, 2, 3, 3, 4, 4, 6, 6, 7, 7, 7], [0, 1, 2, 2, 3, 3, 4, 4, 6, 6, 7, 7]),
		([0, 0, 1, 1, 2, 2, 4, 4, 5, 5, 5, 6, 6, 7, 7], [0, 0, 1, 1, 2, 2, 4, 4, 5, 5, 6, 6, 7, 7]),
		([0, 0, 0, 1, 1, 1, 3, 4, 4, 4, 5, 5, 5, 5, 7], [0, 0, 1, 1, 3, 4, 4, 5, 5, 7]),
		([0, 0, 0, 1, 1, 2, 2, 3, 5, 5, 5, 6, 6, 6, 7, 7], [0, 0, 1, 1, 2, 2, 3, 5, 5, 6, 6, 7, 7]),
		([1, 1, 1, 1, 1, 2, 2, 3, 4, 4, 5, 5, 6, 6, 7, 7], [1, 1, 2, 2, 3, 4, 4, 5, 5, 6, 6, 7, 7]),
		([0, 0, 1, 2, 2, 3, 3, 4, 4, 5, 5, 5, 6, 7, 7], [0, 0, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 7, 7]),
		([0, 0, 1, 1, 2, 3, 4, 5, 6, 6, 6, 6, 6, 6, 7, 7], [0, 0, 1, 1, 2, 3, 4, 5, 6, 6, 7, 7]),
		([0, 1, 1, 2, 4, 4, 5, 5, 6, 6, 6, 6, 6, 7, 7], [0, 1, 1, 2, 4, 4, 5, 5, 6, 6, 7, 7]),
	]

	for case in testCase:
		pos = test_module.removeDuplicates2(case[0])
		if case[0][:pos] != case[1]:
			print case[0][:pos], case[1]
			raise RuntimeError("removeDuplicates2 failed!!")

	print "removeDuplicates2 done!"

def testDeleteDuplicatesSL2():
	testCase = [
		([1,1,1], "None"), ([1,1], "None"), ([1], "1"), ([1,2,2], "1"), ([1,1,2,2], "None"), ([], "None"),
		([3, 5, 2, 5, 4, 6, 10, 5, 6, 6, 6, 2, 6, 1, 6, 4, 5, 6, 8, 4, 4, 3, 5], "3,5,2,5,4,6,10,5,2,6,1,6,4,5,6,8,3,5"),
		([1, 6, 2, 5, 5, 6, 2, 9, 2, 4, 2, 2, 8, 3, 3, 10, 8, 5, 2, 5, 5], "1,6,2,6,2,9,2,4,8,10,8,5,2"),
		([10, 3, 2, 1, 3, 9, 4, 3, 1, 8, 8, 9, 5, 3, 4, 10, 10, 3, 2, 10, 1, 4, 5, 6], "10,3,2,1,3,9,4,3,1,9,5,3,4,3,2,10,1,4,5,6"),
		([10, 7, 2, 1, 9, 5, 2, 3, 5, 9, 4, 8, 1, 2, 2, 6, 10, 1, 6, 1, 9], "10,7,2,1,9,5,2,3,5,9,4,8,1,6,10,1,6,1,9"),
		([5, 5, 10, 5, 10, 7, 4, 1, 7, 6, 6, 7, 1, 3, 5, 2, 6, 5, 4, 9, 4], "10,5,10,7,4,1,7,7,1,3,5,2,6,5,4,9,4"),
		([7, 5, 4, 2, 2, 10, 6, 8, 5, 10, 8, 10, 5, 3, 5, 9, 5, 10, 7, 2, 9, 8, 9, 6], "7,5,4,10,6,8,5,10,8,10,5,3,5,9,5,10,7,2,9,8,9,6"),
		([9, 8, 8, 3, 9, 3, 8, 10, 2, 4, 3, 9, 7, 4, 3, 1, 9, 3, 5, 9, 1], "9,3,9,3,8,10,2,4,3,9,7,4,3,1,9,3,5,9,1"),
		([10, 6, 10, 4, 10, 6, 2, 3, 8, 9, 6, 6, 7, 1, 2, 8, 9, 10, 3, 9, 3], "10,6,10,4,10,6,2,3,8,9,7,1,2,8,9,10,3,9,3"),
		([2, 4, 1, 9, 10, 4, 10, 1, 8, 10, 1, 2, 5, 7, 2, 10, 2, 8, 5, 2, 10], "2,4,1,9,10,4,10,1,8,10,1,2,5,7,2,10,2,8,5,2,10"),
		([4, 8, 10, 1, 7, 6, 2, 9, 6, 2, 7, 10, 10, 6, 2, 2, 7, 6, 7, 2, 1, 5, 6], "4,8,10,1,7,6,2,9,6,2,7,6,7,6,7,2,1,5,6"),
		([7, 6, 3, 3, 7, 1, 1, 10, 9, 6, 9, 7, 3, 5, 4, 10, 3, 5, 8, 5, 1, 8, 1, 4], "7,6,7,10,9,6,9,7,3,5,4,10,3,5,8,5,1,8,1,4"),
		([8, 1, 6, 1, 3, 6, 3, 1, 10, 4, 5, 3, 1, 3, 4, 1, 8, 5, 4, 5], "8,1,6,1,3,6,3,1,10,4,5,3,1,3,4,1,8,5,4,5"),
		([2, 1, 4, 5, 7, 8, 4, 3, 10, 9, 2, 1, 7, 3, 10, 1, 6, 2, 6, 6, 2], "2,1,4,5,7,8,4,3,10,9,2,1,7,3,10,1,6,2,2"),
		([9, 9, 4, 5, 8, 9, 9, 9, 6, 7, 5, 2, 9, 6, 8, 7, 5, 4, 8, 2, 1, 7, 3], "4,5,8,6,7,5,2,9,6,8,7,5,4,8,2,1,7,3"),
		([3, 10, 4, 10, 2, 9, 10, 9, 4, 5, 4, 6, 7, 6, 2, 5, 6, 4, 6, 3, 4], "3,10,4,10,2,9,10,9,4,5,4,6,7,6,2,5,6,4,6,3,4"),
		([1, 6, 1, 3, 8, 1, 6, 7, 2, 9, 9, 2, 3, 7, 2, 1, 7, 2, 2, 2, 3, 8], "1,6,1,3,8,1,6,7,2,2,3,7,2,1,7,3,8"),
		([3, 1, 4, 4, 9, 3, 7, 6, 3, 5, 2, 8, 3, 10, 3, 4, 8, 6, 1, 6, 4, 2, 6], "3,1,9,3,7,6,3,5,2,8,3,10,3,4,8,6,1,6,4,2,6"),
		([5, 10, 10, 4, 8, 3, 5, 5, 9, 8, 8, 2, 7, 2, 10, 2, 9, 4, 3, 6, 2, 7, 2, 6, 9], "5,4,8,3,9,2,7,2,10,2,9,4,3,6,2,7,2,6,9"),
		([6, 3, 10, 5, 4, 8, 9, 8, 9, 2, 2, 2, 2, 9, 4, 8, 9, 7, 2, 5, 5, 6, 3], "6,3,10,5,4,8,9,8,9,9,4,8,9,7,2,6,3"),
		([3, 4, 4, 2, 7, 4, 2, 1, 6, 3, 8, 1, 10, 5, 8, 1, 2, 9, 1, 2], "3,2,7,4,2,1,6,3,8,1,10,5,8,1,2,9,1,2"),
	]

	for case in testCase:
		lst = linked_list.createLinkedLst(case[0])
		lst2 = linked_list.createLinkedLst(case[0])
		ret1 = str(test_module.deleteDuplicates(lst))
		ret2 = str(test_module.deleteDuplicates2(lst2))
		if ret1 != ret2 or ret1 != case[1]:
			raise RuntimeError("testDeleteDuplicatesSL2 failed! %s" % str(case[0]))

	print "testDeleteDuplicatesSL2 done!"

def testSearchInRotatedSortedArray():
	testCase = [
		([3,1], 1, True),
		([1,3,1,1], 3, True), ([1,2,0,1,1,1], 0, True), ([1,3], 1, True), ([1], 0, False), ([3,1], 2, False), ([1], 0, False), ([3,1], 1, True),
		([8, 9, 9, 10, 11, 11, 12, 13, 14, 14, 15, 16, 17, 0, 0, 1, 1, 1, 3, 4, 4, 5, 6, 6, 7, 8], 18, False),
		([0, 1, 1, 2, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 10, 10, 11, 12, 12, 12, 13, 14, 14, 14, 14, 15, 16, 17], 16, True),
		([12, 12, 13, 13, 14, 14, 14, 14, 16, 16, 17, 2, 3, 4, 6, 6, 7, 7, 7, 7, 8, 8, 9, 9, 10, 11, 11, 12, 12], 7, True),
		([13, 14, 14, 15, 15, 16, 17, 17, 17, 1, 2, 4, 5, 6, 6, 6, 6, 8, 9, 10, 10, 11, 12, 12, 12, 12, 13], 18, False),
		([4, 5, 5, 6, 6, 8, 9, 9, 11, 11, 11, 11, 12, 12, 13, 13, 14, 15, 15, 16, 16, 17, 0, 0, 1, 1, 2, 3, 4], -1, False),
		([4, 5, 5, 8, 8, 8, 8, 8, 9, 11, 11, 11, 11, 12, 12, 13, 14, 15, 17, 17, 0, 1, 1, 3, 3, 4, 4, 4], 4, True),
		([3, 4, 5, 7, 8, 9, 10, 10, 11, 12, 12, 13, 14, 14, 15, 15, 15, 16, 17, 0, 1, 1, 1, 1, 1, 1, 2, 3, 3, 3], 0, True),
		([8, 11, 11, 11, 12, 13, 13, 13, 14, 15, 15, 16, 0, 1, 2, 3, 3, 3, 3, 4, 4, 5, 5, 6, 7, 7], 15, True),
		([16, 0, 0, 1, 1, 1, 3, 3, 4, 5, 6, 6, 6, 7, 7, 7, 7, 8, 9, 9, 9, 11, 11, 12, 14, 14, 14, 14], 7, True),
		([2, 2, 3, 3, 3, 4, 4, 5, 5, 5, 6, 9, 9, 9, 9, 10, 10, 11, 13, 13, 13, 14, 14, 15, 15, 16, 0, 0, 1], 3, True),
		([0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 3, 3, 4, 4, 7, 8, 8, 8, 8, 12, 12, 13, 13, 15, 16, 16, 16, 16], 18, False),
		([9, 10, 11, 11, 12, 13, 13, 14, 15, 16, 17, 0, 1, 2, 2, 2, 2, 3, 3, 4, 5, 5, 5, 5, 5, 6, 6, 6, 8], 3, True),
		([3, 4, 5, 5, 7, 9, 9, 9, 10, 10, 11, 11, 11, 11, 11, 14, 14, 15, 16, 16, 17, 0, 1, 2, 2, 2], 18, False),
		([1, 3, 3, 3, 3, 4, 4, 5, 6, 6, 7, 8, 8, 8, 11, 11, 11, 12, 13, 13, 14, 14, 15, 15, 15, 17, 1, 1, 1], 18, False),
		([16, 16, 17, 17, 0, 0, 1, 1, 3, 4, 5, 6, 6, 6, 7, 8, 8, 8, 8, 11, 13, 13, 14, 14, 15, 16], 18, False),
		([1, 3, 3, 4, 4, 5, 6, 8, 9, 9, 11, 11, 12, 12, 12, 13, 13, 15, 17, 17, 17, 0, 0, 0, 0, 1], 18, False),
		([16, 16, 16, 17, 0, 0, 1, 2, 3, 3, 3, 4, 4, 4, 4, 6, 6, 7, 7, 8, 8, 9, 10, 11, 12, 13, 13, 15], 7, True),
		([17, 17, 1, 1, 2, 3, 4, 5, 5, 5, 6, 7, 7, 7, 7, 9, 9, 12, 13, 13, 13, 13, 13, 14, 15, 15, 15, 17], 18, False),
		([2, 2, 3, 4, 4, 7, 7, 7, 8, 9, 9, 9, 9, 10, 11, 13, 13, 14, 14, 16, 16, 17, 17, 0, 1, 1], 2, True),
		([7, 8, 8, 8, 8, 9, 9, 9, 10, 10, 11, 12, 13, 14, 14, 15, 16, 0, 0, 2, 2, 3, 3, 6, 6, 7], 16, True),
		([0, 2, 3, 4, 4, 5, 5, 6, 7, 7, 9, 10, 11, 11, 12, 12, 12, 12, 14, 14, 14, 15, 15, 15, 15, 16, 16, 17, 0], -1, False),
		([12, 12, 13, 13, 13, 14, 16, 16, 17, 17, 0, 1, 3, 3, 4, 4, 5, 6, 6, 7, 9, 9, 10, 11, 11, 11], 17, True),
		([17, 17, 2, 2, 2, 2, 2, 3, 3, 3, 5, 5, 6, 7, 8, 10, 11, 12, 12, 13, 14, 14, 14, 15, 15, 17], 5, True),
		([10, 10, 10, 10, 11, 11, 11, 12, 12, 13, 14, 14, 15, 16, 1, 2, 4, 6, 6, 6, 6, 7, 8, 9, 9, 9, 10], 15, True),
		([15, 15, 17, 0, 1, 2, 2, 2, 3, 5, 5, 5, 5, 6, 7, 7, 10, 10, 10, 10, 10, 10, 11, 12, 12, 13], 18, False),
	]

	for case in testCase:
		if test_module.searchInRotatedSortedArray(case[0], case[1]) != case[2]:
			raise RuntimeError("testSearchInRotatedSortedArray failed!! %s %d" % (str(case[0]), case[1]))

	print "testSearchInRotatedSortedArray done!"


def testPartitionList():
	testCase = [
		([], 3, "None"),
		([3, 2, 10, 2, 6, 8, 3, 1, 0, 4, 3, 9, 4, 6, 9], 3, "2,2,1,0,3,10,6,8,3,4,3,9,4,6,9"),
		([5, 10, 2, 1, 5, 8, 7, 9, 0, 9, 1, 9, 2, 10, 9, 9, 9], 2, "1,0,1,5,10,2,5,8,7,9,9,9,2,10,9,9,9"),
		([6, 5, 0, 2, 5, 3, 2, 3, 3, 7, 10, 1, 9, 0, 4], 3, "0,2,2,1,0,6,5,5,3,3,3,7,10,9,4"),
		([0, 1, 7, 3, 8, 3, 6, 6, 2, 5, 10, 6, 9, 1, 7, 8, 8, 4], 3, "0,1,2,1,7,3,8,3,6,6,5,10,6,9,7,8,8,4"),
		([4, 0, 10, 0, 4, 0, 3, 9, 5, 5, 1, 7, 7, 8, 4, 1], 9, "4,0,0,4,0,3,5,5,1,7,7,8,4,1,10,9"),
		([3, 8, 5, 5, 3, 5, 2, 6, 7, 2, 6, 8, 0, 0, 9], 8, "3,5,5,3,5,2,6,7,2,6,0,0,8,8,9"),
		([10, 1, 8, 10, 1, 0, 1, 10, 1, 10, 5, 2, 1, 4, 1], 1, "0,10,1,8,10,1,1,10,1,10,5,2,1,4,1"),
		([7, 7, 7, 4, 0, 3, 7, 6, 8, 6, 0, 5, 0, 3, 6], 3, "0,0,0,7,7,7,4,3,7,6,8,6,5,3,6"),
		([1, 9, 5, 9, 6, 5, 0, 1, 8, 9, 8, 8, 10, 9, 10], 9, "1,5,6,5,0,1,8,8,8,9,9,9,10,9,10"),
		([10, 0, 0, 1, 4, 9, 2, 5, 6, 8, 1, 4, 0, 8, 7], 7, "0,0,1,4,2,5,6,1,4,0,10,9,8,8,7"),
		([1, 3, 1, 10, 5, 2, 4, 10, 3, 1, 8, 6, 3, 0, 3, 9, 1, 10, 2], 2, "1,1,1,0,1,3,10,5,2,4,10,3,8,6,3,3,9,10,2"),
		([2, 6, 7, 1, 9, 3, 5, 8, 10, 2, 1, 1, 9, 1, 2], 1, "2,6,7,1,9,3,5,8,10,2,1,1,9,1,2"),
		([3, 10, 8, 3, 1, 6, 5, 4, 3, 10, 0, 8, 6, 5, 7, 9, 9], 10, "3,8,3,1,6,5,4,3,0,8,6,5,7,9,9,10,10"),
		([5, 5, 4, 0, 2, 1, 7, 3, 0, 6, 9, 4, 7, 3, 9, 1, 10, 5, 10, 6], 7, "5,5,4,0,2,1,3,0,6,4,3,1,5,6,7,9,7,9,10,10"),
		([3, 5, 2, 10, 5, 10, 9, 8, 5, 5, 6, 10, 7, 1, 10, 6, 0, 7], 5, "3,2,1,0,5,10,5,10,9,8,5,5,6,10,7,10,6,7"),
		([2, 6, 7, 3, 2, 0, 6, 8, 10, 6, 2, 9, 1, 8, 10], 8, "2,6,7,3,2,0,6,6,2,1,8,10,9,8,10"),
		([4, 3, 6, 7, 0, 0, 3, 8, 9, 6, 9, 9, 1, 1, 0, 10, 8, 5, 4], 9, "4,3,6,7,0,0,3,8,6,1,1,0,8,5,4,9,9,9,10"),
		([10, 4, 6, 2, 4, 1, 1, 9, 3, 6, 1, 10, 10, 8, 8], 3, "2,1,1,1,10,4,6,4,9,3,6,10,10,8,8"),
		([3, 0, 5, 1, 4, 3, 5, 6, 5, 8, 8, 6, 2, 10, 2, 0, 3, 5, 2], 2, "0,1,0,3,5,4,3,5,6,5,8,8,6,2,10,2,3,5,2"),
		([3, 7, 1, 6, 0, 7, 9, 1, 1, 4, 10, 7, 5, 3, 1], 7, "3,1,6,0,1,1,4,5,3,1,7,7,9,10,7"),
		([1, 0, 7, 0, 9, 5, 7, 1, 7, 2, 2, 9, 1, 2, 10, 10, 1], 2, "1,0,0,1,1,1,7,9,5,7,7,2,2,9,2,10,10"),
		([0, 10, 0, 2, 0, 9, 3, 2, 9, 9, 1, 9, 3, 0, 4], 9, "0,0,2,0,3,2,1,3,0,4,10,9,9,9,9"),
		([4, 4, 5, 5, 0, 9, 9, 3, 8, 4, 3, 9, 0, 0, 2, 4, 4], 0, "4,4,5,5,0,9,9,3,8,4,3,9,0,0,2,4,4"),
		([4, 3, 10, 7, 4, 1, 2, 10, 0, 6, 4, 10, 8, 0, 5, 3, 8], 8, "4,3,7,4,1,2,0,6,4,0,5,3,10,10,10,8,8"),
		([9, 4, 6, 1, 6, 4, 3, 8, 5, 10, 1, 6, 5, 1, 3, 5, 2, 4, 1, 7], 4, "1,3,1,1,3,2,1,9,4,6,6,4,8,5,10,6,5,5,4,7"),
	]

	for case in testCase:
		lst = linked_list.createLinkedLst(case[0])
		if str(test_module.partitionList(lst, case[1])) != case[2]:
			raise RuntimeError("testPartitionList failed!!")

	print "testPartitionList done!"

def testGrayCode():
	testCase = [
		(0, [0]),
		(1, [0, 1]),
		(2, [0, 1, 3, 2]),
		(3, [0, 1, 3, 2, 6, 7, 5, 4]),
		(4, [0, 1, 3, 2, 6, 7, 5, 4, 12, 13, 15, 14, 10, 11, 9, 8]),
		(5, [0, 1, 3, 2, 6, 7, 5, 4, 12, 13, 15, 14, 10, 11, 9, 8, 24, 25, 27, 26, 30, 31, 29, 28, 20, 21, 23, 22, 18, 19, 17, 16]),
		(6, [0, 1, 3, 2, 6, 7, 5, 4, 12, 13, 15, 14, 10, 11, 9, 8, 24, 25, 27, 26, 30, 31, 29, 28, 20, 21, 23, 22, 18, 19, 17, 16, 48, 49, 51, 50, 54, 55, 53, 52, 60, 61, 63, 62, 58, 59, 57, 56, 40, 41, 43, 42, 46, 47, 45, 44, 36, 37, 39, 38, 34, 35, 33, 32]),
	]
	for case in testCase:
		ret1 = test_module.grayCode(case[0])
		ret2 = test_module.grayCode2(case[0])
		if ret1 != ret2 or ret2 != case[1]:
			raise RuntimeError("testGrayCode failed!! %d" % case[0])
	print "testGrayCode done!"

def testNumDecodings():
	testCase = [
		("10", 1), ("1", 1), ("0", 0), ("", 0),
		("11", 2), ("26", 2),
		("25412155680500", 0),("9434447", 1),("86655665", 1),("800018183062457", 0),("568477346631733010014903131", 0),
		("763476231423468371180060192909", 0),("87190753", 0),("80030", 0),("72", 1),("05949071774", 0),
		("116217889455317979", 18),("201395350111", 0),("12209305870456718824", 0),("0130", 0),
		("1117290583", 0),("3168060864273944219190638", 0),("091895397384050220811", 0),("47867488309564", 0),
		("34388968889595845", 1),("38564998416806642987933295389", 0),("25142519", 16),("415706068780081716965892439072", 0),
		("26467237671453", 8),("7171599641860", 0),("75847", 1),
		("4757562545844617494555774581341211511296816786586787755257741178599337186486723247528324612117156948", 589824),
	]

	for case in testCase:
		if test_module.numDecodings(case[0]) != case[1]:
			raise RuntimeError("testNumDecodings failed!! %s" % str(case[0]))
	print "testNumDecodings done!"

def testSubsetsWithDup():
	testCase = [
		([1, 1], [[], [1], [1, 1]]),
		([4, 4, 4, 1, 4], [[], [1], [1, 4], [1, 4, 4], [1, 4, 4, 4], [1, 4, 4, 4, 4], [4], [4, 4], [4, 4, 4], [4, 4, 4, 4]]),
		([5, 5, 5, 5, 5], [[], [5], [5, 5], [5, 5, 5], [5, 5, 5, 5], [5, 5, 5, 5, 5]]),
		([4, 1, 0], [[], [0], [0, 1], [0, 1, 4], [0, 4], [1], [1, 4], [4]]),
		([1, 2, 2], [[], [1], [1, 2], [1, 2, 2], [2], [2, 2]]),
		([0], [[], [0]]),
		([], [[]]),
		([10, 3, 0], [[], [0], [0, 3], [0, 3, 10], [0, 10], [3], [3, 10], [10]]),
		([1, 2, 4, 1], [[], [1], [1, 1], [1, 1, 2], [1, 1, 2, 4], [1, 1, 4], [1, 2], [1, 2, 4], [1, 4], [2], [2, 4], [4]]),
		([3, 10, 4], [[], [3], [3, 4], [3, 4, 10], [3, 10], [4], [4, 10], [10]]),
		([1, 5, 2], [[], [1], [1, 2], [1, 2, 5], [1, 5], [2], [2, 5], [5]]),
		([4, 9, 4, 7], [[], [4], [4, 4], [4, 4, 7], [4, 4, 7, 9], [4, 4, 9], [4, 7], [4, 7, 9], [4, 9], [7], [7, 9], [9]]),
		([9, 10, 5], [[], [5], [5, 9], [5, 9, 10], [5, 10], [9], [9, 10], [10]]),
		([9, 9, 0, 1], [[], [0], [0, 1], [0, 1, 9], [0, 1, 9, 9], [0, 9], [0, 9, 9], [1], [1, 9], [1, 9, 9], [9], [9, 9]]),
		([3, 1, 5, 9], [[], [1], [1, 3], [1, 3, 5], [1, 3, 5, 9], [1, 3, 9], [1, 5], [1, 5, 9], [1, 9], [3], [3, 5], [3, 5, 9], [3, 9], [5], [5, 9], [9]]),
		([3, 6, 9, 1], [[], [1], [1, 3], [1, 3, 6], [1, 3, 6, 9], [1, 3, 9], [1, 6], [1, 6, 9], [1, 9], [3], [3, 6], [3, 6, 9], [3, 9], [6], [6, 9], [9]]),
		([4, 7, 5, 1], [[], [1], [1, 4], [1, 4, 5], [1, 4, 5, 7], [1, 4, 7], [1, 5], [1, 5, 7], [1, 7], [4], [4, 5], [4, 5, 7], [4, 7], [5], [5, 7], [7]]),
	]

	for case in testCase:
		if sorted(test_module.subsetsWithDup(case[0])) != case[1]:
			raise RuntimeError("testSubsetsWithDup failed!! %s" % str(case[0]))

	print "testSubsetsWithDup done!"

def testReverseBetween():
	testCase = [
		([3,5], 1, 2, "5,3"),
		([5], 1, 1, "5"),
		([1, 2, 5, 7, 8, 9], 6, 0, "1,2,5,7,8,9"),
		([2, 3, 4, 6, 7, 9, 10], 3, 4, "2,3,6,4,7,9,10"),
		([3, 4, 6, 7, 9, 10], 3, 4, "3,4,7,6,9,10"),
		([1, 2, 3, 4, 5, 8, 9, 10], 4, 5, "1,2,3,5,4,8,9,10"),
		([1, 2, 4, 8, 9, 10], 6, 0, "1,2,4,8,9,10"),
		([1, 2, 3, 4, 5, 6, 9, 10], 6, 7, "1,2,3,4,5,9,6,10"),
		([1, 3, 4, 5, 6, 7, 8], 4, 6, "1,3,4,7,6,5,8"),
		([9, 10, 4, 2, 7], 2, 5, "9,7,2,4,10"),
		([3, 4, 5, 6, 7, 8, 9], 5, 7, "3,4,5,6,9,8,7"),
		([1, 2, 3, 4, 5, 7, 9, 10], 8, 0, "1,2,3,4,5,7,9,10"),
		([1, 10, 3, 5, 7], 3, 4, "1,10,5,3,7"),
		([1, 3, 4, 6, 7, 8], 1, 2, "3,1,4,6,7,8"),
		([8, 9, 2, 10, 5], 3, 5, "8,9,5,10,2"),
		([1, 2, 3, 4, 5], 5, 0, "1,2,3,4,5"),
		([1, 2, 4, 5, 6, 9], 2, 4, "1,5,4,2,6,9"),
		([3, 4, 5, 6, 7, 9], 5, 6, "3,4,5,6,9,7"),
		([1, 2, 3, 5, 6, 8, 9], 3, 5, "1,2,6,5,3,8,9"),
		([1, 2, 5, 6, 8, 9, 10], 2, 7, "1,10,9,8,6,5,2"),
		([2, 3, 5, 6, 8, 9, 10], 2, 5, "2,8,6,5,3,9,10"),
		([1, 3, 4, 5, 7, 8, 9, 10], 2, 8, "1,10,9,8,7,5,4,3"),
		([1, 4, 5, 6, 8, 9, 10], 4, 7, "1,4,5,10,9,8,6"),
		([1, 2, 4, 7, 8, 9], 4, 6, "1,2,4,9,8,7"),
		([8, 1, 10, 3, 4], 5, 0, "8,1,10,3,4"),
		([1, 3, 4, 6, 7, 8, 9, 10], 5, 7, "1,3,4,6,9,8,7,10"),
		([8, 10, 4, 5, 6], 3, 5, "8,10,6,5,4"),
	]

	for case in testCase:
		lst = linked_list.createLinkedLst(case[0])
		if str(test_module.reverseBetween(lst, case[1], case[2])) != case[3]:
			raise RuntimeError("testReverseBetween failed!! %s %d %d" % (str(case[0]), case[1], case[2]))
	print "testReverseBetween done!"

def testRestoreIpAddresses():
	testCase = [
		("4525", ['4.5.2.5']),("2503104134205", []),("554055545213", []),("0005", ['0.0.0.5']),("0000", ["0.0.0.0"]),
		("0111411", ['0.1.114.11', '0.11.14.11', '0.11.141.1', '0.111.4.11', '0.111.41.1']),("010010", ["0.10.0.10","0.100.1.0"]),
		("53432", ['5.3.4.32', '5.3.43.2', '5.34.3.2', '53.4.3.2']),
		("125131", ['1.2.5.131', '1.2.51.31', '1.25.1.31', '1.25.13.1', '1.251.3.1', '12.5.1.31', '12.5.13.1', '12.51.3.1', '125.1.3.1']),
		("40513", ['4.0.5.13', '4.0.51.3', '40.5.1.3']),("01234", ['0.1.2.34', '0.1.23.4', '0.12.3.4']),("5155", ['5.1.5.5']),
		("4324141", ['4.3.24.141', '4.3.241.41', '4.32.4.141', '4.32.41.41', '43.2.4.141', '43.2.41.41', '43.24.1.41', '43.24.14.1', '43.241.4.1']),
		("03132302423", []),("0300", ['0.3.0.0']),("300342332", []),("13050521140", []),("1000145431100", []),("1103214400042", []),
		("23152232", ['2.3.152.232', '2.31.52.232', '23.1.52.232', '23.15.2.232', '23.15.22.32', '23.15.223.2', '23.152.2.32', '23.152.23.2', '231.5.2.232', '231.5.22.32', '231.5.223.2', '231.52.2.32', '231.52.23.2']),
		("120132", ['1.2.0.132', '1.20.1.32', '1.20.13.2', '1.201.3.2', '12.0.1.32', '12.0.13.2', '120.1.3.2']),
		("45251554", ['45.25.15.54', '45.25.155.4', '45.251.5.54', '45.251.55.4']),
		("214113552", ['2.141.135.52', '21.41.135.52', '214.1.135.52', '214.11.35.52', '214.113.5.52', '214.113.55.2']),
		("11323", ['1.1.3.23', '1.1.32.3', '1.13.2.3', '11.3.2.3']),("5014011", ['5.0.140.11', '50.1.40.11', '50.14.0.11', '50.140.1.1']),
		("21101555", ['2.110.15.55', '2.110.155.5', '21.10.15.55', '21.10.155.5', '21.101.5.55', '21.101.55.5', '211.0.15.55', '211.0.155.5']),	
		("0343253402", []),("514001302", []),("2155002", ['215.50.0.2']),("21244222315", []),("252015253230", []),	
		("04031", ['0.4.0.31', '0.40.3.1']),("4514", ['4.5.1.4']),("3120150423", []),("3421352240", ['34.213.52.240']),		
	]
	for case in testCase:
		if sorted(test_module.restoreIpAddresses(case[0])) != case[1]:
			raise RuntimeError("testRestoreIpAddresses failed!! %s" % case[0])
	print "testRestoreIpAddresses done!"

def testInorderTraversal():
	testCase = [
		("1", [1]),
		("1,2", [2, 1]),
		("1,2,3,4", [4, 2, 1, 3]),
		("1,#,2", [1, 2]),
		("", []),
		("1,2,3,4,5,6", [4, 2, 5, 1, 6, 3]),
		("1,2,3,4", [4, 2, 1, 3]),
		("1,#,2,3,4", [1, 3, 2, 4]),
		("1,#,2", [1, 2]),
		("1", [1]),
		("1,#,2,#,3,#,4,#,5", [1, 2, 3, 4, 5]),
		("1,2,3,4,#,#,5,6,7,8,9", [6, 4, 7, 2, 1, 3, 8, 5, 9]),
	]

	for case in testCase:
		ret1 = test_module.inorderTraversal(binary_tree.createTreeFromStr(case[0]))
		ret2 = test_module.inorderTraversal2(binary_tree.createTreeFromStr(case[0]))
		if ret1 != ret2 or ret1 != case[1]:
			raise RuntimeError("testInorderTraversal failed!! %s" % case[0])
	print "testInorderTraversal done!"

def testNumTrees():
	testCase = [
	(1, 1),(2, 2),(3, 5),(4, 14),(5, 42),
	(6, 132),(7, 429),(8, 1430),(9, 4862),(10, 16796),
	(11, 58786),(12, 208012),(13, 742900),(14, 2674440),(15, 9694845),
	]
	for case in testCase:
		if test_module.numTrees(case[0]) != case[1]:
			raise RuntimeError("testNumTrees failed!! %d" % case[0])

	print "testNumTrees done!"

def testGenerateTrees():
	def treeToStr(tree):
		if tree == None:
			return ""
		queue = [tree]
		ret = []
		while queue:
			node, queue = queue[0], queue[1:]
			if node:
				ret.append(str(node.val))
				queue.append(node.left)
				queue.append(node.right)
			else:
				ret.append('#')
		pos = len(ret)-1
		while pos > 0 and ret[pos] == '#':
			pos -= 1
		return ",".join(ret[:pos+1])



	testCase = [
		(0, ['']),
		(1, ['1']),
		(2, ['1,#,2', '2,1']),
		(3, ['1,#,2,#,3', '1,#,3,2', '2,1,3', '3,1,#,#,2', '3,2,#,1']),
		(4, ['1,#,2,#,3,#,4', '1,#,2,#,4,3', '1,#,3,2,4', '1,#,4,2,#,#,3', '1,#,4,3,#,2', '2,1,3,#,#,#,4', '2,1,4,#,#,3', '3,1,4,#,2', '3,2,4,1', '4,1,#,#,2,#,3', '4,1,#,#,3,2', '4,2,#,1,3', '4,3,#,1,#,#,2', '4,3,#,2,#,1']),
	]
	for case in testCase:
		ret = test_module.generateTrees(case[0])
		collection = []
		for item in ret:
			collection.append(treeToStr(item))
		if sorted(collection) != case[1]:
			raise RuntimeError("testGenerateTrees failed!! %d" % case[0])

	print "testGenerateTrees done!"

def testIsValidBST():
	testCase = [
		("", True),
		("1", True),
		("1,3", False),
		("1,#,2", True),
		("1,2,3,4,5", False),
		("8,3,6,1,4,5,7", False),
		("8,3,6,1,7,5,4", False),
		("6,3,8,1,4,7,9", True),
		("6,3,8,1,4,7", True),
	]

	for case in testCase:
		tree = binary_tree.createTreeFromStr(case[0])
		if test_module.isValidBST(tree) != case[1]:
			raise RuntimeError("testIsValidBST failed!! %s" % case[0])

	print "testIsValidBST done!"

def testZigzagLevelOrder():
	testCase = [
		("", []),
		("1", [[1]]),
		("1,3", [[1], [3]]),
		("1,#,2", [[1], [2]]),
		("1,2,3,4,5", [[1], [3, 2], [4, 5]]),
		("8,3,6,1,4,5,7", [[8], [6, 3], [1, 4, 5, 7]]),
		("8,3,6,1,7,5,4", [[8], [6, 3], [1, 7, 5, 4]]),
		("6,3,8,1,4,7,9", [[6], [8, 3], [1, 4, 7, 9]]),
		("6,3,8,1,4,7", [[6], [8, 3], [1, 4, 7]]),
		("1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,8,19,20,21,22", [[1], [3, 2], [4, 5, 6, 7], [15, 14, 13, 12, 11, 10, 9, 8], [16, 17, 8, 19, 20, 21, 22]]),
	]

	for case in testCase:
		tree = binary_tree.createTreeFromStr(case[0])
		if test_module.zigzagLevelOrder(tree) != case[1]:
			raise RuntimeError("testZigzagLevelOrder failed!! %s" % case[0])

	print "testZigzagLevelOrder done!"

def testBuildTreeFromPreIn():
	testCase = [
		([1, 2, 3, 6, 4, 5], [3, 2, 1, 4, 6, 5], "1,2,6,3,#,4,5"),
		([1, 3, 2, 6, 5, 4], [6, 2, 3, 5, 1, 4], "1,3,4,2,5,#,#,6"),
		([3, 2, 7, 6, 5, 1, 4], [6, 7, 5, 2, 4, 1, 3], "3,2,#,7,1,6,5,4"),
		([6, 2, 4, 7, 1, 3, 5], [4, 2, 1, 7, 6, 5, 3], "6,2,3,4,7,5,#,#,#,1"),
		([4, 5, 3, 2, 1], [3, 2, 5, 4, 1], "4,5,1,3,#,#,#,#,2"),
		([5, 2, 1, 4, 6, 3], [2, 4, 1, 5, 3, 6], "5,2,6,#,1,3,#,4"),
		([4, 3, 2, 7, 1, 6, 5], [3, 4, 1, 6, 7, 2, 5], "4,3,2,#,#,7,5,1,#,#,#,#,6"),
		([1, 6, 4, 2, 3, 5], [4, 6, 5, 3, 2, 1], "1,6,#,4,2,#,#,3,#,5"),
		([2, 1, 7, 3, 5, 6, 4], [1, 2, 3, 7, 5, 6, 4], "2,1,7,#,#,3,5,#,#,#,6,#,4"),
		([7, 3, 4, 2, 5, 6, 1], [7, 4, 3, 6, 5, 2, 1], "7,#,3,4,2,#,#,5,1,6"),
		([3, 1, 2, 4, 6, 5, 7], [1, 3, 2, 6, 4, 5, 7], "3,1,2,#,#,#,4,6,5,#,#,#,7"),
		([4, 2, 1, 3, 5], [4, 2, 5, 3, 1], "4,#,2,#,1,3,#,5"),
		([5, 3, 4, 2, 1], [3, 2, 4, 5, 1], "5,3,1,#,4,#,#,2"),
		([5, 2, 4, 3, 1, 6], [2, 5, 3, 1, 4, 6], "5,2,4,#,#,3,6,#,1"),
		([5, 6, 3, 2, 1, 7, 4], [6, 5, 2, 1, 7, 3, 4], "5,6,3,#,#,2,4,#,1,#,#,#,7"),
		([1, 2, 5, 4, 3], [5, 2, 4, 1, 3], "1,2,3,5,4"),
		([5, 2, 3, 1, 4], [2, 3, 5, 4, 1], "5,2,1,#,3,4"),
		([1, 3, 6, 4, 5, 2], [4, 6, 5, 3, 2, 1], "1,3,#,6,2,4,5"),
		([1, 3, 2, 4, 5], [3, 1, 5, 4, 2], "1,3,2,#,#,4,#,5"),
		([1, 3, 2, 4, 5], [3, 2, 1, 5, 4], "1,3,4,#,2,5"),
		([5, 2, 3, 1, 4], [5, 4, 1, 3, 2], "5,#,2,3,#,1,#,4"),
		([3, 5, 4, 1, 2], [1, 4, 5, 3, 2], "3,5,2,4,#,#,#,1"),
		([7, 3, 5, 6, 2, 1, 4], [3, 6, 2, 5, 7, 4, 1], "7,3,1,#,5,4,#,6,#,#,#,#,2"),
		([1, 6, 5, 4, 2, 3], [6, 2, 4, 5, 1, 3], "1,6,3,#,5,#,#,4,#,2"),
		([5, 4, 3, 1, 2], [1, 3, 4, 5, 2], "5,4,2,3,#,#,#,1"),
	]

	for case in testCase:
		s1 = str(case[0])
		s2 = str(case[1])
		tree = test_module.buildTreeFromPreIn(case[0], case[1])
		if binary_tree.serialize(tree) != case[2]:
			raise RuntimeError("testBuildTreeFromPreIn failed!! %s %s" % (s1, s2))

	print "testBuildTreeFromPreIn done!"

def testBuildTreeFromPostIn():
	testCase = [
		([3, 4, 2, 5, 6, 1], [3, 2, 4, 1, 5, 6], "1,2,6,3,4,5"),
		([2, 5, 3, 6, 4, 1], [2, 3, 5, 1, 4, 6], "1,3,4,2,5,#,6"),
		([1, 6, 2, 5, 4, 7, 3], [1, 2, 6, 3, 5, 7, 4], "3,2,7,1,6,5,4"),
		([1, 4, 7, 2, 5, 3, 6], [1, 4, 2, 7, 6, 5, 3], "6,2,3,4,7,5,#,1"),
		([3, 5, 2, 1, 4], [3, 5, 4, 1, 2], "4,5,1,3,#,#,2"),
		([1, 2, 3, 4, 6, 5], [2, 1, 5, 3, 6, 4], "5,2,6,#,1,3,4"),
		([7, 3, 6, 5, 1, 2, 4], [3, 7, 4, 6, 5, 2, 1], "4,3,2,#,7,5,1,#,#,6"),
		([2, 6, 3, 5, 4, 1], [2, 6, 1, 3, 4, 5], "1,6,4,2,#,3,5"),
		([6, 3, 1, 4, 5, 7, 2], [1, 3, 6, 2, 5, 4, 7], "2,1,7,#,3,5,#,#,6,#,4"),
		([5, 4, 1, 6, 2, 3, 7], [7, 4, 5, 3, 1, 2, 6], "7,#,3,4,2,#,5,1,6"),
		([1, 5, 4, 7, 6, 2, 3], [1, 3, 5, 4, 2, 6, 7], "3,1,2,#,#,4,6,5,#,#,7"),
		([3, 5, 1, 2, 4], [4, 2, 3, 1, 5], "4,#,2,#,1,3,5"),
		([4, 3, 2, 1, 5], [3, 4, 5, 1, 2], "5,3,1,#,4,#,2"),
		([1, 3, 2, 6, 4, 5], [2, 1, 3, 5, 6, 4], "5,2,4,#,3,6,#,1"),
		([1, 2, 6, 7, 4, 3, 5], [6, 1, 2, 5, 4, 7, 3], "5,6,3,#,2,4,#,1,#,#,7"),
		([5, 4, 2, 3, 1], [5, 2, 4, 1, 3], "1,2,3,5,4"),
		([3, 2, 4, 1, 5], [2, 3, 5, 4, 1], "5,2,1,#,3,4"),
		([2, 4, 3, 5, 6, 1], [2, 3, 4, 1, 5, 6], "1,3,6,2,4,5"),
		([4, 3, 5, 2, 1], [3, 4, 1, 5, 2], "1,3,2,#,4,5"),
		([2, 3, 5, 4, 1], [3, 2, 1, 5, 4], "1,3,4,#,2,5"),
		([4, 3, 1, 2, 5], [5, 4, 3, 2, 1], "5,#,2,3,1,4"),
		([4, 5, 1, 2, 3], [4, 5, 3, 1, 2], "3,5,2,4,#,1"),
		([5, 3, 2, 4, 6, 1, 7], [3, 5, 7, 2, 4, 1, 6], "7,3,1,#,5,4,6,#,#,2"),
		([2, 5, 6, 4, 3, 1], [6, 2, 5, 1, 3, 4], "1,6,3,#,5,#,4,2"),
		([3, 4, 1, 2, 5], [3, 4, 5, 1, 2], "5,4,2,3,#,1"),
	]


	for case in testCase:
		s1 = str(case[0])
		s2 = str(case[1])
		tree = test_module.buildTreeFromPostIn(case[0], case[1])
		if binary_tree.serialize(tree) != case[2]:
			print binary_tree.serialize(tree), "hehe"
			raise RuntimeError("testBuildTreeFromPostIn failed!! %s %s" % (s1, s2))

	print "testBuildTreeFromPostIn done!"

def testSortedArrayToBST():
	testCase = [
		([], ""),
		([1], "1"),
		([1, 2], "1,#,2"),
		([1, 2, 3], "2,1,3"),
		([1, 2, 3, 4], "2,1,3,#,#,#,4"),
		([1, 2, 3, 4, 5], "3,1,4,#,2,#,5"),
		([1, 2, 3, 4, 5, 6], "3,1,5,#,2,4,6"),
		([1, 2, 3, 4, 5, 6, 7, 8], "4,2,6,1,3,5,7,#,#,#,#,#,#,#,8"),
		([1, 2, 3, 4, 5, 6, 7, 8, 9], "5,2,7,1,3,6,8,#,#,#,4,#,#,#,9"),
		([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], "5,2,8,1,3,6,9,#,#,#,4,#,7,#,10"),
		([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], "6,3,9,1,4,7,10,#,2,#,5,#,8,#,11"),
		([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "6,3,9,1,4,7,11,#,2,#,5,#,8,10,12"),
		([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], "7,3,10,1,5,8,12,#,2,4,6,#,9,11,13"),
		([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], "7,3,11,1,5,9,13,#,2,4,6,8,10,12,14"),
		([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "8,4,12,2,6,10,14,1,3,5,7,9,11,13,15"),
		([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], "8,4,12,2,6,10,14,1,3,5,7,9,11,13,15,#,#,#,#,#,#,#,#,#,#,#,#,#,#,#,16"),
	]

	for case in testCase:
		tree = test_module.sortedArrayToBST(case[0])
		if binary_tree.serialize(tree) != case[1]:
			raise RuntimeError("testSortedArrayToBST failed!! %s" % case[0])
	print "testSortedArrayToBST done!"

def testSortedListToBST():
	testCase = [
		([], ""),
		([1], "1"),
		([1, 2], "1,#,2"),
		([1, 2, 3], "2,1,3"),
		([1, 2, 3, 4], "2,1,3,#,#,#,4"),
		([1, 2, 3, 4, 5], "3,1,4,#,2,#,5"),
		([1, 2, 3, 4, 5, 6], "3,1,5,#,2,4,6"),
		([1, 2, 3, 4, 5, 6, 7, 8], "4,2,6,1,3,5,7,#,#,#,#,#,#,#,8"),
		([1, 2, 3, 4, 5, 6, 7, 8, 9], "5,2,7,1,3,6,8,#,#,#,4,#,#,#,9"),
		([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], "5,2,8,1,3,6,9,#,#,#,4,#,7,#,10"),
		([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], "6,3,9,1,4,7,10,#,2,#,5,#,8,#,11"),
		([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "6,3,9,1,4,7,11,#,2,#,5,#,8,10,12"),
		([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], "7,3,10,1,5,8,12,#,2,4,6,#,9,11,13"),
		([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], "7,3,11,1,5,9,13,#,2,4,6,8,10,12,14"),
		([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "8,4,12,2,6,10,14,1,3,5,7,9,11,13,15"),
		([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], "8,4,12,2,6,10,14,1,3,5,7,9,11,13,15,#,#,#,#,#,#,#,#,#,#,#,#,#,#,#,16"),
	]

	for case in testCase:
		lst = linked_list.createLinkedLst(case[0])
		tree = test_module.sortedListToBST(lst)
		if binary_tree.serialize(tree) != case[1]:
			raise RuntimeError("testSortedListToBST failed! %s" % case[0])

	print "testSortedListToBST done!"

def testFlatten():
	testCase = [
		("1", "1"), ("", ""),
		("1,2,6,3,4,5", "1,#,2,#,3,#,4,#,6,#,5"),
		("1,3,4,2,5,#,6", "1,#,3,#,2,#,5,#,4,#,6"),
		("3,2,7,1,6,5,4", "3,#,2,#,1,#,6,#,7,#,5,#,4"),
		("6,2,3,4,7,5,#,1", "6,#,2,#,4,#,1,#,7,#,3,#,5"),
		("4,5,1,3,#,#,2", "4,#,5,#,3,#,1,#,2"),
		("5,2,6,#,1,3,4", "5,#,2,#,1,#,6,#,3,#,4"),
		("4,3,2,#,7,5,1,#,#,6", "4,#,3,#,7,#,2,#,5,#,6,#,1"),
		("1,6,4,2,#,3,5", "1,#,6,#,2,#,4,#,3,#,5"),
		("2,1,7,#,3,5,#,#,6,#,4", "2,#,1,#,3,#,6,#,7,#,5,#,4"),
		("7,#,3,4,2,#,5,1,6", "7,#,3,#,4,#,5,#,2,#,1,#,6"),
		("3,1,2,#,#,4,6,5,#,#,7", "3,#,1,#,2,#,4,#,5,#,6,#,7"),
		("4,#,2,#,1,3,5", "4,#,2,#,1,#,3,#,5"),
		("5,3,1,#,4,#,2", "5,#,3,#,4,#,1,#,2"),
		("5,2,4,#,3,6,#,1", "5,#,2,#,3,#,1,#,4,#,6"),
		("5,6,3,#,2,4,#,1,#,#,7", "5,#,6,#,2,#,1,#,3,#,4,#,7"),
		("1,2,3,5,4", "1,#,2,#,5,#,4,#,3"),
		("5,2,1,#,3,4", "5,#,2,#,3,#,1,#,4"),
		("1,3,6,2,4,5", "1,#,3,#,2,#,4,#,6,#,5"),
		("1,3,2,#,4,5", "1,#,3,#,4,#,2,#,5"),
		("1,3,4,#,2,5", "1,#,3,#,2,#,4,#,5"),
		("5,#,2,3,1,4", "5,#,2,#,3,#,4,#,1"),
		("3,5,2,4,#,1", "3,#,5,#,4,#,2,#,1"),
		("7,3,1,#,5,4,6,#,#,2", "7,#,3,#,5,#,1,#,4,#,2,#,6"),
		("1,6,3,#,5,#,4,2", "1,#,6,#,5,#,2,#,3,#,4"),
		("5,4,2,3,#,1", "5,#,4,#,3,#,2,#,1"),
	]

	for case in testCase:
		tree1 = binary_tree.createTreeFromStr( case[0] )
		tree2 = binary_tree.createTreeFromStr( case[0] )
		test_module.flatten(tree1)
		test_module.flatten2(tree2)
		ret1, ret2 = binary_tree.serialize(tree1), binary_tree.serialize(tree2)
		if ret1 != ret2 or ret1 != case[1]:
			raise RuntimeError("testFlatten failed!! %s" % case[0])
			
	print "testFlatten done!"

def testPathSum():
	testCase = [
		("", 0, []),
		("1", 0, []),
		("1", 1, [[1]]),
		("1,2,6,3,4,5", 0, []),
		("1,2,6,3,4,5", 6, [[1, 2, 3]]),
		("1,2,6,3,4,5", 12, [[1, 6, 5]]),
		("1,3,4,2,5,#,6", 0, []),
		("1,3,4,2,5,#,6", 6, [[1, 3, 2]]),
		("3,2,7,1,6,5,4", 6, [[3, 2, 1]]),
		("6,2,3,4,7,5,#,1", 7, []),
		("6,2,3,4,7,5,#,1", 13, [[6, 2, 4, 1]]),
		("6,2,3,4,7,5,#,1", 15, [[6, 2, 7]]),
		("4,5,1,3,#,#,2", 7, [[4, 1, 2]]),
		("5,2,6,#,1,3,4", 15, [[5, 6, 4]]),
		("4,3,2,#,7,5,1,#,#,6", 17, [[4, 2, 5, 6]]),
		("1,6,4,2,#,3,5", 8, [[1, 4, 3]]),
		("2,1,7,#,3,5,#,#,6,#,4", 18, [[2, 7, 5, 4]]),
		("7,#,3,4,2,#,5,1,6", 19, [[7, 3, 4, 5]]),
		("3,1,2,#,#,4,6,5,#,#,7", 14, [[3, 2, 4, 5]]),
		("3,1,2,#,#,4,6,5,#,#,7", 18, [[3, 2, 6, 7]]),
		("4,#,2,#,1,3,5", 12, [[4, 2, 1, 5]]),
		("5,2,4,#,3,6,#,1", 0, []),
		("5,2,1,#,3,4", 0, []),
		("5,2,1,#,3,4", 10, [[5, 2, 3], [5, 1, 4]]),
		("1,3,6,2,4,5", 12, [[1, 6, 5]]),
		("1,3,2,#,4,5", 0, []),
		("1,3,2,#,4,5", 8, [[1, 3, 4], [1, 2, 5]]),
		("1,3,4,#,2,5", 0, []),
		("1,3,4,#,2,5", 6, [[1, 3, 2]]),
		("3,5,2,4,#,1", 12, [[3, 5, 4]]),
		("7,3,1,#,5,4,6,#,#,2", 0, []),
		("7,3,1,#,5,4,6,#,#,2", 14, [[7, 1, 4, 2], [7, 1, 6]]),
		("1,6,3,#,5,#,4,2", 8, [[1, 3, 4]]),
		("1,6,3,#,5,#,4,2", 14, [[1, 6, 5, 2]]),
		("5,4,2,3,#,1", 12, [[5, 4, 3]]),
	]

	for case in testCase:
		tree = binary_tree.createTreeFromStr(case[0])
		if test_module.pathSum(tree, case[1]) != case[2]:
			raise RuntimeError("testPathSum failed!!")

	print "testPathSum done!"

def testConnectTree():
	testCase = [
		"","1","1","1,2,6,3,4,5","1,2,6,3,4,5","1,2,6,3,4,5",
		"1,3,4,2,5,#,6","1,3,4,2,5,#,6","3,2,7,1,6,5,4","6,2,3,4,7,5,#,1","6,2,3,4,7,5,#,1","6,2,3,4,7,5,#,1",
		"4,5,1,3,#,#,2","5,2,6,#,1,3,4","4,3,2,#,7,5,1,#,#,6","1,6,4,2,#,3,5","2,1,7,#,3,5,#,#,6,#,4",
		"7,#,3,4,2,#,5,1,6","3,1,2,#,#,4,6,5,#,#,7","3,1,2,#,#,4,6,5,#,#,7","4,#,2,#,1,3,5","5,2,4,#,3,6,#,1",
		"5,2,1,#,3,4","5,2,1,#,3,4","1,3,6,2,4,5","1,3,2,#,4,5","1,3,2,#,4,5","1,3,4,#,2,5","1,3,4,#,2,5",
		"3,5,2,4,#,1","7,3,1,#,5,4,6,#,#,2","7,3,1,#,5,4,6,#,#,2","1,6,3,#,5,#,4,2","1,6,3,#,5,#,4,2","5,4,2,3,#,1",
	]

	def checkLinkedTree(root):
		if not root:
			return True
		queue = [root]
		while queue:
			size = len(queue)
			row = [None] * size
			for i in xrange(size):
				node = queue.pop(0)
				if node.left:
					queue.append(node.left)
				if node.right:
					queue.append(node.right)
				row[i] = node

			while row:
				node = row.pop(0)
				if len(row) and node.next != row[0]:
					return False
		return True

	for case in testCase:
		tree = binary_tree.createTreeFromStr(case)
		tree = binary_tree.treeToLinkedTree(tree)
		if test_module.connectTree(tree) and not checkLinkedTree(tree):
			raise RuntimeError("testConnectTree failed!!")

	print "testConnectTree done!"


def testMinimumTotal():
	testCase = [
		([[2],[3,4],[6,5,7],[4,1,8,3]], 11),
		([], 0),
		([[-10]], -10),
	]

	for case in testCase:
		if test_module.minimumTotal(case[0]) != case[1]:
			raise RuntimeError("testMinimumTotal failed!! %s" % case[0])

	print "testMinimumTotal done!"

def testMaxProfit():
	testCase = [
		([], 0),([1], 0),([2,1,2,0,1], 1),([1,2,3,4,5], 4),
		([1,2,-3,4,5], 8),([36, -33, 90, 92, 20], 125),([-19, -51, -44, 28, -100, -73, 0, 9], 109),
		([-31, -7, 56, -86, 67], 153),([-17, 52, 11, -61, -23, -39], 69),	([50, 19, -55, 60, -40, 32, 25], 115),
		([-99, 86, -37, 3, -7], 185),([-11, -100, 49, -74, -13, -73, 66, -34], 166),
		([3, 26, 23, 92, 99, -98, -37], 96),([95, 8, -64, 1, -63, -87], 65),([82, -82, 39, -61, 98, -96, -4, 97], 193),
		([-87, -54, 62, 92, -60], 179),	([26, 93, -85, -54, -72, 36], 121),	([77, 81, -30, -64, -4, -86, -13, 83], 169),
		([-48, 38, -90, -12, -15, 83], 173),([-14, -13, 66, -99, 80, -87, -74, 51, 71], 179),([6, -68, -78, -71, 8, 64], 142),
		([-73, 8, -24, -58, -76, -23, 30, -84, -76, 27], 111),([-61, -36, 66, -2, -5, 9, 69, -27, 96], 157),([55, -31, 39, 61, -37], 92),
		([-63, 44, 92, 16, 53, -66], 155),([27, -48, 81, 100, 6, 21], 148),	([89, 90, 71, -42, -29, 23], 65),
		([-57, 25, 50, -22, -39, -31, 46], 107),([-24, 91, -39, -93, -78, -3, 34, -30], 127),([87, -46, -51, 61, 65, 90, 90, 72], 141),
	]

	for case in testCase:
		if test_module.maxProfit(case[0]) != case[1]:
			raise RuntimeError("testMaxProfit failed!! %s" % case[0])

	print "testMaxProfit done!"

def testMaxProfit2():
	testCase = [
		([], 0),([1], 0),([2, 1, 2, 0, 1], 2),
		([1, 2, 3, 4, 5], 4),([1, 2, -3, 4, 5], 9),([36, -33, 90, 92, 20], 125),
		([-19, -51, -44, 28, -100, -73, 0, 9], 188),([-31, -7, 56, -86, 67], 240),([-17, 52, 11, -61, -23, -39], 107),
		([50, 19, -55, 60, -40, 32, 25], 187),([-99, 86, -37, 3, -7], 225),([-11, -100, 49, -74, -13, -73, 66, -34], 349),
		([3, 26, 23, 92, 99, -98, -37], 160),([95, 8, -64, 1, -63, -87], 65),([82, -82, 39, -61, 98, -96, -4, 97], 473),
		([-87, -54, 62, 92, -60], 179),([26, 93, -85, -54, -72, 36], 206),([77, 81, -30, -64, -4, -86, -13, 83], 233),
		([-48, 38, -90, -12, -15, 83], 262),([-14, -13, 66, -99, 80, -87, -74, 51, 71], 417),([6, -68, -78, -71, 8, 64], 142),
		([-73, 8, -24, -58, -76, -23, 30, -84, -76, 27], 298),([-61, -36, 66, -2, -5, 9, 69, -27, 96], 324),([55, -31, 39, 61, -37], 92),
		([-63, 44, 92, 16, 53, -66], 192),([27, -48, 81, 100, 6, 21], 163),([89, 90, 71, -42, -29, 23], 66),
		([-57, 25, 50, -22, -39, -31, 46], 192),([-24, 91, -39, -93, -78, -3, 34, -30], 242),([87, -46, -51, 61, 65, 90, 90, 72], 141),
	]

	for case in testCase:
		if test_module.maxProfit2(case[0]) != case[1]:
			raise RuntimeError("testMaxProfit2 failed!! %s" % case[0])

	print "testMaxProfit2 done!"

def testSumNumbers():
	testCase = [
		("1", 1),("", 0),
		("1,2,6,3,4,5", 412),("1,3,4,2,5,#,6", 413),("3,2,7,1,6,5,4", 1396),("6,2,3,4,7,5,#,1", 7503),("4,5,1,3,#,#,2", 865),
		("5,2,6,#,1,3,4", 1648),("4,3,2,#,7,5,1,#,#,6", 5114),("1,6,4,2,#,3,5", 450),("2,1,7,#,3,5,#,#,6,#,4", 4890),("7,#,3,4,2,#,5,1,6", 21992),
		("3,1,2,#,#,4,6,5,#,#,7", 6543),("4,#,2,#,1,3,5", 8428),("5,3,1,#,4,#,2", 1046),("5,2,4,#,3,6,#,1", 5777),("5,6,3,#,2,4,#,1,#,#,7", 10968),
		("1,2,3,5,4", 262),("5,2,1,#,3,4", 1037),("1,3,6,2,4,5", 431),("1,3,2,#,4,5", 259),("1,3,4,#,2,5", 277),
		("5,#,2,3,1,4", 5755),("3,5,2,4,#,1", 675),("7,3,1,#,5,4,6,#,#,2", 8593),("1,6,3,#,5,#,4,2", 1786),("5,4,2,3,#,1", 1064),
	]

	for case in testCase:
		tree = binary_tree.createTreeFromStr(case[0])
		if test_module.sumNumbers(tree) != case[1]:
			raise RuntimeError("testSumNumbers failed!!")
	print "testSumNumbers done!"

def testWordLadder():
	testCase = [
		("hot","dog",["hot","dog"], 0),
		("sand", "acne", ["slit","bunk","wars","ping","viva","wynn","wows","irks","gang","pool","mock","fort","heel","send","ship","cols","alec","foal","nabs","gaze","giza","mays","dogs","karo","cums","jedi","webb","lend","mire","jose","catt","grow","toss","magi","leis","bead","kara","hoof","than","ires","baas","vein","kari","riga","oars","gags","thug","yawn","wive","view","germ","flab","july","tuck","rory","bean","feed","rhee","jeez","gobs","lath","desk","yoko","cute","zeus","thus","dims","link","dirt","mara","disc","limy","lewd","maud","duly","elsa","hart","rays","rues","camp","lack","okra","tome","math","plug","monk","orly","friz","hogs","yoda","poop","tick","plod","cloy","pees","imps","lead","pope","mall","frey","been","plea","poll","male","teak","soho","glob","bell","mary","hail","scan","yips","like","mull","kory","odor","byte","kaye","word","honk","asks","slid","hopi","toke","gore","flew","tins","mown","oise","hall","vega","sing","fool","boat","bobs","lain","soft","hard","rots","sees","apex","chan","told","woos","unit","scow","gilt","beef","jars","tyre","imus","neon","soap","dabs","rein","ovid","hose","husk","loll","asia","cope","tail","hazy","clad","lash","sags","moll","eddy","fuel","lift","flog","land","sigh","saks","sail","hook","visa","tier","maws","roeg","gila","eyes","noah","hypo","tore","eggs","rove","chap","room","wait","lurk","race","host","dada","lola","gabs","sobs","joel","keck","axed","mead","gust","laid","ends","oort","nose","peer","kept","abet","iran","mick","dead","hags","tens","gown","sick","odis","miro","bill","fawn","sumo","kilt","huge","ores","oran","flag","tost","seth","sift","poet","reds","pips","cape","togo","wale","limn","toll","ploy","inns","snag","hoes","jerk","flux","fido","zane","arab","gamy","raze","lank","hurt","rail","hind","hoot","dogy","away","pest","hoed","pose","lose","pole","alva","dino","kind","clan","dips","soup","veto","edna","damp","gush","amen","wits","pubs","fuzz","cash","pine","trod","gunk","nude","lost","rite","cory","walt","mica","cart","avow","wind","book","leon","life","bang","draw","leek","skis","dram","ripe","mine","urea","tiff","over","gale","weir","defy","norm","tull","whiz","gill","ward","crag","when","mill","firs","sans","flue","reid","ekes","jain","mutt","hems","laps","piss","pall","rowe","prey","cull","knew","size","wets","hurl","wont","suva","girt","prys","prow","warn","naps","gong","thru","livy","boar","sade","amok","vice","slat","emir","jade","karl","loyd","cerf","bess","loss","rums","lats","bode","subs","muss","maim","kits","thin","york","punt","gays","alpo","aids","drag","eras","mats","pyre","clot","step","oath","lout","wary","carp","hums","tang","pout","whip","fled","omar","such","kano","jake","stan","loop","fuss","mini","byrd","exit","fizz","lire","emil","prop","noes","awed","gift","soli","sale","gage","orin","slur","limp","saar","arks","mast","gnat","port","into","geed","pave","awls","cent","cunt","full","dint","hank","mate","coin","tars","scud","veer","coax","bops","uris","loom","shod","crib","lids","drys","fish","edit","dick","erna","else","hahs","alga","moho","wire","fora","tums","ruth","bets","duns","mold","mush","swop","ruby","bolt","nave","kite","ahem","brad","tern","nips","whew","bait","ooze","gino","yuck","drum","shoe","lobe","dusk","cult","paws","anew","dado","nook","half","lams","rich","cato","java","kemp","vain","fees","sham","auks","gish","fire","elam","salt","sour","loth","whit","yogi","shes","scam","yous","lucy","inez","geld","whig","thee","kelp","loaf","harm","tomb","ever","airs","page","laud","stun","paid","goop","cobs","judy","grab","doha","crew","item","fogs","tong","blip","vest","bran","wend","bawl","feel","jets","mixt","tell","dire","devi","milo","deng","yews","weak","mark","doug","fare","rigs","poke","hies","sian","suez","quip","kens","lass","zips","elva","brat","cosy","teri","hull","spun","russ","pupa","weed","pulp","main","grim","hone","cord","barf","olav","gaps","rote","wilt","lars","roll","balm","jana","give","eire","faun","suck","kegs","nita","weer","tush","spry","loge","nays","heir","dope","roar","peep","nags","ates","bane","seas","sign","fred","they","lien","kiev","fops","said","lawn","lind","miff","mass","trig","sins","furl","ruin","sent","cray","maya","clog","puns","silk","axis","grog","jots","dyer","mope","rand","vend","keen","chou","dose","rain","eats","sped","maui","evan","time","todd","skit","lief","sops","outs","moot","faze","biro","gook","fill","oval","skew","veil","born","slob","hyde","twin","eloy","beat","ergs","sure","kobe","eggo","hens","jive","flax","mons","dunk","yest","begs","dial","lodz","burp","pile","much","dock","rene","sago","racy","have","yalu","glow","move","peps","hods","kins","salk","hand","cons","dare","myra","sega","type","mari","pelt","hula","gulf","jugs","flay","fest","spat","toms","zeno","taps","deny","swag","afro","baud","jabs","smut","egos","lara","toes","song","fray","luis","brut","olen","mere","ruff","slum","glad","buds","silt","rued","gelt","hive","teem","ides","sink","ands","wisp","omen","lyre","yuks","curb","loam","darn","liar","pugs","pane","carl","sang","scar","zeds","claw","berg","hits","mile","lite","khan","erik","slug","loon","dena","ruse","talk","tusk","gaol","tads","beds","sock","howe","gave","snob","ahab","part","meir","jell","stir","tels","spit","hash","omit","jinx","lyra","puck","laue","beep","eros","owed","cede","brew","slue","mitt","jest","lynx","wads","gena","dank","volt","gray","pony","veld","bask","fens","argo","work","taxi","afar","boon","lube","pass","lazy","mist","blot","mach","poky","rams","sits","rend","dome","pray","duck","hers","lure","keep","gory","chat","runt","jams","lays","posy","bats","hoff","rock","keri","raul","yves","lama","ramp","vote","jody","pock","gist","sass","iago","coos","rank","lowe","vows","koch","taco","jinn","juno","rape","band","aces","goal","huck","lila","tuft","swan","blab","leda","gems","hide","tack","porn","scum","frat","plum","duds","shad","arms","pare","chin","gain","knee","foot","line","dove","vera","jays","fund","reno","skid","boys","corn","gwyn","sash","weld","ruiz","dior","jess","leaf","pars","cote","zing","scat","nice","dart","only","owls","hike","trey","whys","ding","klan","ross","barb","ants","lean","dopy","hock","tour","grip","aldo","whim","prom","rear","dins","duff","dell","loch","lava","sung","yank","thar","curl","venn","blow","pomp","heat","trap","dali","nets","seen","gash","twig","dads","emmy","rhea","navy","haws","mite","bows","alas","ives","play","soon","doll","chum","ajar","foam","call","puke","kris","wily","came","ales","reef","raid","diet","prod","prut","loot","soar","coed","celt","seam","dray","lump","jags","nods","sole","kink","peso","howl","cost","tsar","uric","sore","woes","sewn","sake","cask","caps","burl","tame","bulk","neva","from","meet","webs","spar","fuck","buoy","wept","west","dual","pica","sold","seed","gads","riff","neck","deed","rudy","drop","vale","flit","romp","peak","jape","jews","fain","dens","hugo","elba","mink","town","clam","feud","fern","dung","newt","mime","deem","inti","gigs","sosa","lope","lard","cara","smug","lego","flex","doth","paar","moon","wren","tale","kant","eels","muck","toga","zens","lops","duet","coil","gall","teal","glib","muir","ails","boer","them","rake","conn","neat","frog","trip","coma","must","mono","lira","craw","sled","wear","toby","reel","hips","nate","pump","mont","died","moss","lair","jibe","oils","pied","hobs","cads","haze","muse","cogs","figs","cues","roes","whet","boru","cozy","amos","tans","news","hake","cots","boas","tutu","wavy","pipe","typo","albs","boom","dyke","wail","woke","ware","rita","fail","slab","owes","jane","rack","hell","lags","mend","mask","hume","wane","acne","team","holy","runs","exes","dole","trim","zola","trek","puma","wacs","veep","yaps","sums","lush","tubs","most","witt","bong","rule","hear","awry","sots","nils","bash","gasp","inch","pens","fies","juts","pate","vine","zulu","this","bare","veal","josh","reek","ours","cowl","club","farm","teat","coat","dish","fore","weft","exam","vlad","floe","beak","lane","ella","warp","goth","ming","pits","rent","tito","wish","amps","says","hawk","ways","punk","nark","cagy","east","paul","bose","solo","teed","text","hews","snip","lips","emit","orgy","icon","tuna","soul","kurd","clod","calk","aunt","bake","copy","acid","duse","kiln","spec","fans","bani","irma","pads","batu","logo","pack","oder","atop","funk","gide","bede","bibs","taut","guns","dana","puff","lyme","flat","lake","june","sets","gull","hops","earn","clip","fell","kama","seal","diaz","cite","chew","cuba","bury","yard","bank","byes","apia","cree","nosh","judo","walk","tape","taro","boot","cods","lade","cong","deft","slim","jeri","rile","park","aeon","fact","slow","goff","cane","earp","tart","does","acts","hope","cant","buts","shin","dude","ergo","mode","gene","lept","chen","beta","eden","pang","saab","fang","whir","cove","perk","fads","rugs","herb","putt","nous","vane","corm","stay","bids","vela","roof","isms","sics","gone","swum","wiry","cram","rink","pert","heap","sikh","dais","cell","peel","nuke","buss","rasp","none","slut","bent","dams","serb","dork","bays","kale","cora","wake","welt","rind","trot","sloe","pity","rout","eves","fats","furs","pogo","beth","hued","edam","iamb","glee","lute","keel","airy","easy","tire","rube","bogy","sine","chop","rood","elbe","mike","garb","jill","gaul","chit","dons","bars","ride","beck","toad","make","head","suds","pike","snot","swat","peed","same","gaza","lent","gait","gael","elks","hang","nerf","rosy","shut","glop","pain","dion","deaf","hero","doer","wost","wage","wash","pats","narc","ions","dice","quay","vied","eons","case","pour","urns","reva","rags","aden","bone","rang","aura","iraq","toot","rome","hals","megs","pond","john","yeps","pawl","warm","bird","tint","jowl","gibe","come","hold","pail","wipe","bike","rips","eery","kent","hims","inks","fink","mott","ices","macy","serf","keys","tarp","cops","sods","feet","tear","benz","buys","colo","boil","sews","enos","watt","pull","brag","cork","save","mint","feat","jamb","rubs","roxy","toys","nosy","yowl","tamp","lobs","foul","doom","sown","pigs","hemp","fame","boor","cube","tops","loco","lads","eyre","alta","aged","flop","pram","lesa","sawn","plow","aral","load","lied","pled","boob","bert","rows","zits","rick","hint","dido","fist","marc","wuss","node","smog","nora","shim","glut","bale","perl","what","tort","meek","brie","bind","cake","psst","dour","jove","tree","chip","stud","thou","mobs","sows","opts","diva","perm","wise","cuds","sols","alan","mild","pure","gail","wins","offs","nile","yelp","minn","tors","tran","homy","sadr","erse","nero","scab","finn","mich","turd","then","poem","noun","oxus","brow","door","saws","eben","wart","wand","rosa","left","lina","cabs","rapt","olin","suet","kalb","mans","dawn","riel","temp","chug","peal","drew","null","hath","many","took","fond","gate","sate","leak","zany","vans","mart","hess","home","long","dirk","bile","lace","moog","axes","zone","fork","duct","rico","rife","deep","tiny","hugh","bilk","waft","swig","pans","with","kern","busy","film","lulu","king","lord","veda","tray","legs","soot","ells","wasp","hunt","earl","ouch","diem","yell","pegs","blvd","polk","soda","zorn","liza","slop","week","kill","rusk","eric","sump","haul","rims","crop","blob","face","bins","read","care","pele","ritz","beau","golf","drip","dike","stab","jibs","hove","junk","hoax","tats","fief","quad","peat","ream","hats","root","flak","grit","clap","pugh","bosh","lock","mute","crow","iced","lisa","bela","fems","oxes","vies","gybe","huff","bull","cuss","sunk","pups","fobs","turf","sect","atom","debt","sane","writ","anon","mayo","aria","seer","thor","brim","gawk","jack","jazz","menu","yolk","surf","libs","lets","bans","toil","open","aced","poor","mess","wham","fran","gina","dote","love","mood","pale","reps","ines","shot","alar","twit","site","dill","yoga","sear","vamp","abel","lieu","cuff","orbs","rose","tank","gape","guam","adar","vole","your","dean","dear","hebe","crab","hump","mole","vase","rode","dash","sera","balk","lela","inca","gaea","bush","loud","pies","aide","blew","mien","side","kerr","ring","tess","prep","rant","lugs","hobo","joke","odds","yule","aida","true","pone","lode","nona","weep","coda","elmo","skim","wink","bras","pier","bung","pets","tabs","ryan","jock","body","sofa","joey","zion","mace","kick","vile","leno","bali","fart","that","redo","ills","jogs","pent","drub","slaw","tide","lena","seep","gyps","wave","amid","fear","ties","flan","wimp","kali","shun","crap","sage","rune","logs","cain","digs","abut","obit","paps","rids","fair","hack","huns","road","caws","curt","jute","fisk","fowl","duty","holt","miss","rude","vito","baal","ural","mann","mind","belt","clem","last","musk","roam","abed","days","bore","fuze","fall","pict","dump","dies","fiat","vent","pork","eyed","docs","rive","spas","rope","ariz","tout","game","jump","blur","anti","lisp","turn","sand","food","moos","hoop","saul","arch","fury","rise","diss","hubs","burs","grid","ilks","suns","flea","soil","lung","want","nola","fins","thud","kidd","juan","heps","nape","rash","burt","bump","tots","brit","mums","bole","shah","tees","skip","limb","umps","ache","arcs","raft","halo","luce","bahs","leta","conk","duos","siva","went","peek","sulk","reap","free","dubs","lang","toto","hasp","ball","rats","nair","myst","wang","snug","nash","laos","ante","opal","tina","pore","bite","haas","myth","yugo","foci","dent","bade","pear","mods","auto","shop","etch","lyly","curs","aron","slew","tyro","sack","wade","clio","gyro","butt","icky","char","itch","halt","gals","yang","tend","pact","bees","suit","puny","hows","nina","brno","oops","lick","sons","kilo","bust","nome","mona","dull","join","hour","papa","stag","bern","wove","lull","slip","laze","roil","alto","bath","buck","alma","anus","evil","dumb","oreo","rare","near","cure","isis","hill","kyle","pace","comb","nits","flip","clop","mort","thea","wall","kiel","judd","coop","dave","very","amie","blah","flub","talc","bold","fogy","idea","prof","horn","shoo","aped","pins","helm","wees","beer","womb","clue","alba","aloe","fine","bard","limo","shaw","pint","swim","dust","indy","hale","cats","troy","wens","luke","vern","deli","both","brig","daub","sara","sued","bier","noel","olga","dupe","look","pisa","knox","murk","dame","matt","gold","jame","toge","luck","peck","tass","calf","pill","wore","wadi","thur","parr","maul","tzar","ones","lees","dark","fake","bast","zoom","here","moro","wine","bums","cows","jean","palm","fume","plop","help","tuba","leap","cans","back","avid","lice","lust","polo","dory","stew","kate","rama","coke","bled","mugs","ajax","arts","drug","pena","cody","hole","sean","deck","guts","kong","bate","pitt","como","lyle","siam","rook","baby","jigs","bret","bark","lori","reba","sups","made","buzz","gnaw","alps","clay","post","viol","dina","card","lana","doff","yups","tons","live","kids","pair","yawl","name","oven","sirs","gyms","prig","down","leos","noon","nibs","cook","safe","cobb","raja","awes","sari","nerd","fold","lots","pete","deal","bias","zeal","girl","rage","cool","gout","whey","soak","thaw","bear","wing","nagy","well","oink","sven","kurt","etna","held","wood","high","feta","twee","ford","cave","knot","tory","ibis","yaks","vets","foxy","sank","cone","pius","tall","seem","wool","flap","gird","lore","coot","mewl","sere","real","puts","sell","nuts","foil","lilt","saga","heft","dyed","goat","spew","daze","frye","adds","glen","tojo","pixy","gobi","stop","tile","hiss","shed","hahn","baku","ahas","sill","swap","also","carr","manx","lime","debs","moat","eked","bola","pods","coon","lacy","tube","minx","buff","pres","clew","gaff","flee","burn","whom","cola","fret","purl","wick","wigs","donn","guys","toni","oxen","wite","vial","spam","huts","vats","lima","core","eula","thad","peon","erie","oats","boyd","cued","olaf","tams","secs","urey","wile","penn","bred","rill","vary","sues","mail","feds","aves","code","beam","reed","neil","hark","pols","gris","gods","mesa","test","coup","heed","dora","hied","tune","doze","pews","oaks","bloc","tips","maid","goof","four","woof","silo","bray","zest","kiss","yong","file","hilt","iris","tuns","lily","ears","pant","jury","taft","data","gild","pick","kook","colt","bohr","anal","asps","babe","bach","mash","biko","bowl","huey","jilt","goes","guff","bend","nike","tami","gosh","tike","gees","urge","path","bony","jude","lynn","lois","teas","dunn","elul","bonn","moms","bugs","slay","yeah","loan","hulk","lows","damn","nell","jung","avis","mane","waco","loin","knob","tyke","anna","hire","luau","tidy","nuns","pots","quid","exec","hans","hera","hush","shag","scot","moan","wald","ursa","lorn","hunk","loft","yore","alum","mows","slog","emma","spud","rice","worn","erma","need","bags","lark","kirk","pooh","dyes","area","dime","luvs","foch","refs","cast","alit","tugs","even","role","toed","caph","nigh","sony","bide","robs","folk","daft","past","blue","flaw","sana","fits","barr","riot","dots","lamp","cock","fibs","harp","tent","hate","mali","togs","gear","tues","bass","pros","numb","emus","hare","fate","wife","mean","pink","dune","ares","dine","oily","tony","czar","spay","push","glum","till","moth","glue","dive","scad","pops","woks","andy","leah","cusp","hair","alex","vibe","bulb","boll","firm","joys","tara","cole","levy","owen","chow","rump","jail","lapp","beet","slap","kith","more","maps","bond","hick","opus","rust","wist","shat","phil","snow","lott","lora","cary","mote","rift","oust","klee","goad","pith","heep","lupe","ivan","mimi","bald","fuse","cuts","lens","leer","eyry","know","razz","tare","pals","geek","greg","teen","clef","wags","weal","each","haft","nova","waif","rate","katy","yale","dale","leas","axum","quiz","pawn","fend","capt","laws","city","chad","coal","nail","zaps","sort","loci","less","spur","note","foes","fags","gulp","snap","bogs","wrap","dane","melt","ease","felt","shea","calm","star","swam","aery","year","plan","odin","curd","mira","mops","shit","davy","apes","inky","hues","lome","bits","vila","show","best","mice","gins","next","roan","ymir","mars","oman","wild","heal","plus","erin","rave","robe","fast","hutu","aver","jodi","alms","yams","zero","revs","wean","chic","self","jeep","jobs","waxy","duel","seek","spot","raps","pimp","adan","slam","tool","morn","futz","ewes","errs","knit","rung","kans","muff","huhs","tows","lest","meal","azov","gnus","agar","sips","sway","otis","tone","tate","epic","trio","tics","fade","lear","owns","robt","weds","five","lyon","terr","arno","mama","grey","disk","sept","sire","bart","saps","whoa","turk","stow","pyle","joni","zinc","negs","task","leif","ribs","malt","nine","bunt","grin","dona","nope","hams","some","molt","smit","sacs","joan","slav","lady","base","heck","list","take","herd","will","nubs","burg","hugs","peru","coif","zoos","nick","idol","levi","grub","roth","adam","elma","tags","tote","yaws","cali","mete","lula","cubs","prim","luna","jolt","span","pita","dodo","puss","deer","term","dolt","goon","gary","yarn","aims","just","rena","tine","cyst","meld","loki","wong","were","hung","maze","arid","cars","wolf","marx","faye","eave","raga","flow","neal","lone","anne","cage","tied","tilt","soto","opel","date","buns","dorm","kane","akin","ewer","drab","thai","jeer","grad","berm","rods","saki","grus","vast","late","lint","mule","risk","labs","snit","gala","find","spin","ired","slot","oafs","lies","mews","wino","milk","bout","onus","tram","jaws","peas","cleo","seat","gums","cold","vang","dewy","hood","rush","mack","yuan","odes","boos","jami","mare","plot","swab","borg","hays","form","mesh","mani","fife","good","gram","lion","myna","moor","skin","posh","burr","rime","done","ruts","pays","stem","ting","arty","slag","iron","ayes","stub","oral","gets","chid","yens","snub","ages","wide","bail","verb","lamb","bomb","army","yoke","gels","tits","bork","mils","nary","barn","hype","odom","avon","hewn","rios","cams","tact","boss","oleo","duke","eris","gwen","elms","deon","sims","quit","nest","font","dues","yeas","zeta","bevy","gent","torn","cups","worm","baum","axon","purr","vise","grew","govs","meat","chef","rest","lame"], 11),
		("zings","brown",["chump","sours","mcgee","piers","match","folds","rinse","films","small","umbel","assad","morin","plied","basin","moots","blurb","suits","solve","sooty","fluky","bombs","nurse","ceres","lopes","yucky","ricks","goads","loses","coyly","marcy","bonds","niece","cures","sonic","crows","dicey","gaped","buggy","riles","homer","fakir","hello","riper","makes","laked","sinus","fangs","acton","spiky","salts","boots","skiff","maker","pence","fells","cedar","kited","raved","flake","jiffy","tanks","barns","sized","gluts","amman","jumps","cavil","quaff","rents","looms","toner","gibes","aside","drawn","karin","torte","haded","psych","hacks","jesus","fumed","lisle","spays","sumps","beats","tunas","naked","bathe","gulfs","karma","snuff","boast","grins","turds","plant","spicy","risen","tints","tomas","stand","noses","toxin","sheep","paddy","abase","jeeps","dated","tough","timid","forty","kusch","pones","smack","token","havel","vanes","repay","chums","paved","chimp","spinx","smirk","pupas","bares","mites","egged","palsy","gyros","wolfe","chips","pouts","johns","barbs","slunk","hires","seals","rally","tromp","roads","writs","aches","corny","fiats","hench","gilts","blake","phony","drams","skimp","suing","horus","hewer","barfs","hewed","needs","epsom","knots","tided","befit","eager","melva","coves","plush","pawed","zebra","gales","blots","foggy","rooks","comas","laxly","cries","kirks","monks","magic","fugue","apter","limos","congo","rosin","seder","bones","holes","fated","gamay","snags","wimpy","rites","gilds","slink","staph","sioux","bends","wilma","warts","reeds","yolks","lover","demon","salve","hulas","shard","worst","leach","omits","flint","tines","julio","trots","silly","cocks","gleam","react","camps","nicks","bored","coded","swine","scope","aloes","south","hands","rainy","david","newer","ferns","jelly","index","gibbs","truly","tubes","opera","raven","noyce","whims","titus","hared","vined","dealt","slats","erick","rolls","breed","udder","oozed","prays","tsars","harry","shelf","norms","larks","hazes","brice","gifts","units","veeps","dumas","mommy","spock","dotty","molls","slobs","diane","buddy","boost","ginny","rends","marks","timur","bands","genes","slews","leeds","karyn","mobil","mixes","ronny","sadly","rinks","smash","baled","pulpy","toils","yards","piing","dried","veils","spook","snaky","sizer","spout","percy","sheol","blank","waxes","herod","attar","doped","polls","banes","penny","knelt","laded","manic","acids","squat","jerry","stony","woofs","idles","bruin","carla","sheik","hodge","goody","merge","nicer","scums","evens","lames","wends","midge","jives","tuner","reins","boars","fryer","realm","dyson","narks","torts","yawed","waked","cress","curvy","bongs","fared","jilts","liens","ducat","shaft","pesos","dulls","donna","potty","winks","marsh","giddy","tiffs","scoot","nifty","daisy","slots","stacy","colby","skims","malls","sifts","jinns","flank","molar","hatch","wiped","taped","clink","brims","credo","fezes","molds","finds","quids","terra","damns","dusky","wanes","musty","barer","snare","honey","piked","wiser","elvin","dolly","fetal","ships","reign","cause","caved","mecca","blink","close","birth","pints","reefs","amado","comae","waite","willy","lorry","nixed","quire","napes","voted","eldon","nappy","myles","laser","pesky","leant","septa","mucks","agree","sworn","lofty","slush","holst","tevet","wases","cheer","torah","treks","purge","class","popes","roans","curve","quads","magma","drier","hales","chess","prigs","sivan","romes","finch","peels","mousy","atria","offer","coals","crash","tauts","oinks","dazed","flaps","truck","treed","colas","petty","marty","cadet","clips","zones","wooed","haves","grays","gongs","minis","macaw","horde","witch","flows","heady","fuels","conks","lifts","tumid","husks","irony","pines","glops","fonds","covey","chino","riggs","tonya","slavs","caddy","poled","blent","mired","whose","scows","forte","hikes","riped","knobs","wroth","bagel","basks","nines","scams","males","holed","solid","farms","glaxo","poise","drays","ryder","slash","rajas","goons","bowed","shirt","blurs","fussy","rills","loren","helps","feels","fiefs","hines","balms","blobs","fiord","light","dinky","maids","sagas","joked","pyxed","lilly","leers","galls","malts","minos","ionic","lower","peale","ratty","tuber","newed","whirl","eases","wests","herds","clods","floes","skate","weeds","tones","rangy","kings","adder","pitts","smith","coats","lenny","sorta","floss","looks","angie","peppy","upper","darin","white","lofts","clint","jared","heros","ruler","tonia","sexed","grail","villa","topic","kenny","dopes","hoots","boobs","gerry","eries","lyres","lunch","glove","cumin","harms","races","today","crust","track","mends","snout","shark","iliad","shrew","dorky","monty","dodge","toted","worse","dream","weird","gaunt","damon","rimes","layer","salem","bards","dills","hobby","gives","shall","crazy","brace","faxed","pools","foamy","viral","strop","liver","ceded","jolts","jonah","tight","lilia","hussy","mutts","crate","girls","marge","hypos","mewls","bulls","gazes","wands","avior","sonya","slick","clump","cater","aural","agave","grief","shana","fices","moans","grape","fetid","jenna","humus","poesy","cooks","still","lease","wanda","oddly","areas","frats","imply","files","ramon","seuss","hubby","wakes","rural","nodal","doric","carry","chefs","fails","klaus","shine","filly","yawls","brows","cabby","favor","styli","filed","jinni","ferry","balls","lakes","voled","drone","lusty","tansy","among","trail","liven","slake","madge","steps","donne","sties","picks","lacks","jumpy","meade","bogie","bauer","scene","lubes","brigs","label","fines","grebe","limns","mouse","ensue","swags","bunch","kayla","micky","sneak","bulbs","camus","yours","aisha","dunne","volta","cores","dweeb","libby","flees","shops","bided","satan","socks","draws","golfs","taunt","genus","belts","orbit","taxis","hinds","fakes","chart","wings","words","digit","copse","deena","perry","sanes","huffy","chung","lucks","fills","selma","wafts","pecks","trite","combs","sooth","weary","salty","brews","kooky","robby","loans","props","huang","marry","swabs","tinny","mince","japed","ellis","lowed","newly","loath","drown","loved","joker","lints","kinky","skits","feats","hiker","doles","every","dolby","stirs","lobed","fusty","cozen","vader","byron","dozes","slows","bethe","ploys","misty","binds","bumpy","spurs","wolfs","ernie","nails","prows","seeds","visas","dowse","pores","jocks","cower","hoofs","mined","marat","gorge","souse","clack","liter","jewel","hates","boats","stark","blabs","murks","woken","stomp","peeks","perky","pasta","goats","hocks","kinks","gushy","outdo","gelds","foxes","fives","sybil","upton","taine","helga","mauls","gills","grows","bauds","aloft","cline","payer","pinch","thorn","slits","thumb","biked","cowls","grams","disks","belly","randy","hunts","prize","minty","river","chevy","gages","cysts","years","scoff","becky","inert","abler","bevel","dyers","tonne","glows","ocean","spits","bowen","tings","baths","goals","whiny","merry","fares","leila","cairo","honor","verge","teary","pimps","sarah","meets","tamed","bumps","alias","pings","wears","dante","snore","ruled","savor","gapes","loony","chaps","froth","fancy","herbs","cutes","crowd","ghana","teddy","abate","scalp","mules","patsy","minks","shuck","billy","helen","stain","moles","jodie","homed","stack","niger","denny","kinds","elves","waled","rover","medan","churn","whizz","green","reach","lajos","mates","ditch","grads","start","press","rimed","hells","vised","slums","notes","canes","taper","camry","weans","sinks","arise","crown","prier","ramps","wotan","chars","mussy","rodes","sonar","cheri","sired","snell","basel","eider","sades","times","ovule","gusto","myrna","gabby","dully","spake","beast","towns","allay","gaged","smell","skids","clone","slack","pooch","vulva","arson","blown","kongo","maize","thick","brags","spore","soles","trial","snort","price","bowel","stoke","pents","hutch","flack","arced","cubic","hiram","tongs","lades","coons","finer","games","unpin","vests","slabs","santa","tamer","asian","tease","miked","lodes","vents","leafy","stats","shuts","bully","edith","bloch","corps","bloom","doses","coins","skips","gains","hided","coops","ninja","pills","raves","hanks","seres","ewing","bests","wrath","burgs","thrum","cabin","daren","imams","junks","brood","bacon","creel","gazed","teats","halos","gypsy","ether","train","tiles","bulks","bolls","added","roger","sites","balmy","tilts","swoop","jules","bawdy","mango","stoop","girts","costs","lemur","yucks","swazi","okays","piped","ticks","tomes","filch","depth","meals","coots","bites","pansy","spelt","leeks","hills","drops","verde","japes","holds","bangs","maxed","plume","frets","lymph","modes","twits","devon","cawed","putty","sowed","likes","quips","board","loxed","slags","dilly","refit","saved","takes","meter","prove","spacy","poach","cilia","pears","lists","gated","verdi","shave","notch","culls","shams","weedy","gaols","hoops","kraft","burro","roles","rummy","click","plots","mitty","yanks","drool","papal","rearm","prose","fucks","berra","salas","tents","flues","loves","poker","parry","polyp","agent","flown","walls","studs","troll","baron","earle","panda","wiley","raged","sexes","berne","vista","rojas","cones","byway","vases","wines","forth","freya","gully","fires","sails","dusts","terse","booed","stung","basic","saver","basis","hmong","brawn","pured","locks","downs","punts","rhine","metes","title","shims","bents","blows","harte","boyle","peach","posts","olson","might","flier","rubes","lingo","tarts","nexus","woman","mains","finis","mikes","pleas","trams","shawl","gunny","sleds","ruder","aries","usher","refed","toady","caper","tries","gimpy","doors","thieu","deere","mucky","rests","mares","cards","bouts","dines","rants","giles","flunk","enact","derek","dover","conan","mooed","fiver","kaput","enrol","payed","feint","miner","shyer","whelk","perch","furor","hayes","tammy","caves","maims","cairn","tract","legal","adler","veldt","basal","spiny","surer","bolds","grove","heaps","noway","pokes","tubed","beaks","loots","drawl","jones","typed","funny","cells","beaus","bayed","rears","seats","hazed","flubs","maura","goths","rumba","morse","fumes","slide","snoot","music","sully","perth","pocks","mills","lopez","sacks","stine","gawks","gavel","rains","wound","hares","guild","leger","foxed","craws","rinds","faced","groom","lully","boded","lends","serge","sword","faked","envoy","stick","tumor","riser","bolts","trued","gasps","thoth","veers","verbs","boles","lunar","taxes","vexes","pucks","welsh","pelts","shift","booth","smote","spied","gnawn","crete","dough","tasha","timed","wired","state","hears","lauds","wills","dummy","basil","belie","calls","crams","matts","gybes","limed","snots","moder","faces","sibyl","spare","crops","drips","frown","doggy","pearl","reese","curls","earns","poles","tiara","risks","lethe","titan","tucks","trace","vises","prick","sears","ogled","preps","livid","kicky","candy","weeps","tapes","cokes","foods","wards","coifs","shirk","elsie","ketch","trunk","goofs","kodak","toyed","lance","whale","soups","roars","poxed","tombs","noons","hindi","basie","hoffa","bayou","tests","roots","shove","hoses","doled","tempt","kilos","velma","avers","dorks","comic","fanny","poops","sicks","leary","merer","finks","garbo","cains","mimed","sates","celli","flats","grown","broth","augur","chaos","sangs","chide","barks","guide","mewed","synch","rings","scrap","zings","howls","duded","noemi","geeks","nexis","comte","helot","whams","brand","hogan","moira","trips","loges","baits","winds","marla","never","louis","anted","helix","morns","heeds","crags","rowdy","becks","venue","diary","stoat","feeds","kiths","riled","drags","lucia","deeps","sends","fonts","swing","fence","stout","trice","taker","drugs","babel","plows","pends","sloes","gents","brawl","arabs","leaps","flied","fulls","meats","megan","burch","oscar","evict","betsy","lasts","ethos","mavis","petal","fever","alone","snips","assay","rocks","talon","grass","clive","discs","wrapt","calfs","razed","learn","bruce","midst","swear","merck","meyer","funks","lobby","fears","decay","sedge","alien","reaps","koran","range","enter","lepke","honed","gallo","staid","joist","lines","paler","fined","sorts","piper","highs","busch","dario","north","ashed","sands","songs","rakes","garza","pinks","rival","leann","allow","golds","hilts","berry","hicks","idler","weiss","cider","desks","skies","hulls","warns","datum","brown","leapt","dregs","dozed","stump","reply","finny","clues","diode","dicks","rabid","moors","limbs","gulls","scary","dungs","liege","vicky","nigel","peeps","dolls","blame","sings","wants","fuzes","proud","bungs","seams","bingo","buffs","shire","decks","hosed","scots","pumas","jazzy","books","ellie","hayed","snowy","twill","links","coped","spats","reyes","piles","hovel","reads","wryer","patty","sling","oneal","waves","gorse","ofter","teams","strep","mores","daily","spoil","limes","foots","dells","hakes","danny","furls","flaws","tarot","dusty","potts","tells","pager","claps","serra","josie","award","pewee","snack","lobes","damps","tanya","lures","mushy","hertz","caret","marco","parks","pithy","synge","spoon","troth","drama","bleak","lidia","banns","forms","iambs","crick","patel","mercy","waded"], 12),
		("a","c",["a","b","c"], 2),
		("hot","dog",["hot","dog","dot"], 3),

	]

	for case in testCase:
		if test_module.wordLadder(case[0], case[1], case[2]) != case[3]:
			raise RuntimeError("testWordLadder failed!! %s, %s, %s" % (case[0], case[1], case[2]))

	print "testWordLadder done!"

def testSurroundedRegons():
	testCase = [
		([], []),
		(["XOXX","OXOX","XOXO","OXOX","XOXO","OXOX"], ['XOXX', 'OXXX', 'XXXO', 'OXXX', 'XXXO', 'OXOX']),
		(['XOXOOOO', 'XOXXOXO', 'XXOOOOX', 'XOOOXOX', 'OXXXXOX', 'XOOOXOX', 'XXOOXOX'], ['XOXOOOO', 'XOXXOXO', 'XXOOOOX', 'XOOOXOX', 'OXXXXOX', 'XOOOXOX', 'XXOOXOX']),
		(['OOOXOXX', 'XXXXXXO', 'XOOOOXX', 'XXOOXXX', 'OOXOXOO', 'OOOXOXO', 'OOXOOXX'], ['OOOXOXX', 'XXXXXXO', 'XXXXXXX', 'XXXXXXX', 'OOXXXOO', 'OOOXOXO', 'OOXOOXX']),
		(['OXOXXOX', 'OOOXOXO', 'XOXOXOX', 'OXXXOXO', 'OXOOOXO', 'XXXOXXO', 'XXOOXOX'], ['OXOXXOX', 'OOOXXXO', 'XOXXXXX', 'OXXXOXO', 'OXOOOXO', 'XXXOXXO', 'XXOOXOX']),
		(['OOOXO', 'OXOXX', 'OOXOX', 'XXXOO', 'OXXOO'], ['OOOXO', 'OXOXX', 'OOXOX', 'XXXOO', 'OXXOO']),
		(['OOOXOXX', 'OXOXXXO', 'XXXXOXX', 'OXOOXOO', 'XXOXXXX', 'OXOOXOO', 'XOOOOXX'], ['OOOXOXX', 'OXOXXXO', 'XXXXXXX', 'OXOOXOO', 'XXOXXXX', 'OXOOXOO', 'XOOOOXX']),
		(['OXOXOOX', 'XXXOOOX', 'OXOOOOO', 'OOOOXOO', 'XOXOOOO', 'XOXOOOO', 'XXXOOOO'], ['OXOXOOX', 'XXXOOOX', 'OXOOOOO', 'OOOOXOO', 'XOXOOOO', 'XOXOOOO', 'XXXOOOO']),
		(['XOOOO', 'XXXXX', 'XXXOX', 'OXXXO', 'XXXOX'], ['XOOOO', 'XXXXX', 'XXXXX', 'OXXXO', 'XXXOX']),
		(['OOOOXXX', 'OXXXXOO', 'XXXXXOO', 'OOXOOXO', 'XXXOOXO', 'OXOXOOO', 'OOOXXXO'], ['OOOOXXX', 'OXXXXOO', 'XXXXXOO', 'OOXOOXO', 'XXXOOXO', 'OXOXOOO', 'OOOXXXO']),
		(['OOXXX', 'OXXXX', 'OXXOX', 'OOOOO', 'OXOXO'], ['OOXXX', 'OXXXX', 'OXXOX', 'OOOOO', 'OXOXO']),
		(['XXOXXX', 'XOXOXX', 'OXOXOO', 'OOXXXO', 'XOXOXX', 'XOOXXX'], ['XXOXXX', 'XXXXXX', 'OXXXOO', 'OOXXXO', 'XOXXXX', 'XOOXXX']),
		(['OOXOOOX', 'OOXXXXX', 'XOXXOOX', 'XOXXOOO', 'OXXXXXX', 'XOOOXOX', 'XXXOOOO'], ['OOXOOOX', 'OOXXXXX', 'XOXXOOX', 'XOXXOOO', 'OXXXXXX', 'XOOOXOX', 'XXXOOOO']),
		(['OXOXX', 'OXOOO', 'XXOXO', 'XOXXO', 'OOOOX'], ['OXOXX', 'OXOOO', 'XXOXO', 'XOXXO', 'OOOOX']),
		(['XOXXX', 'OOOOX', 'OOXXX', 'XXOXX', 'OXOOX'], ['XOXXX', 'OOOOX', 'OOXXX', 'XXOXX', 'OXOOX']),
		(['XOXOOXX', 'OXOXXOX', 'XXXXXXX', 'OOOXXOX', 'OOXOXXX', 'OOXOOOO', 'XOXOXXO'], ['XOXOOXX', 'OXXXXXX', 'XXXXXXX', 'OOOXXXX', 'OOXOXXX', 'OOXOOOO', 'XOXOXXO']),
		(['XOXOX', 'XOOOO', 'OXXOO', 'OOOXX', 'OXOOO'], ['XOXOX', 'XOOOO', 'OXXOO', 'OOOXX', 'OXOOO']),
		(['OOOXO', 'XXXOO', 'XOOXX', 'XOOOO', 'OOOXX'], ['OOOXO', 'XXXOO', 'XOOXX', 'XOOOO', 'OOOXX']),
		(['OOXXOX', 'XOXOXO', 'OXOXXX', 'OOXXOX', 'XOXOOO', 'XXOXOO'], ['OOXXOX', 'XOXXXO', 'OXXXXX', 'OOXXOX', 'XOXOOO', 'XXOXOO']),
		(['XOXOXX', 'OOXXXX', 'XXOOXX', 'OOOXXX', 'OXOOXO', 'OOOOOX'], ['XOXOXX', 'OOXXXX', 'XXOOXX', 'OOOXXX', 'OXOOXO', 'OOOOOX']),
		(['XXOXOXO', 'OOOXOXO', 'OOOXOXX', 'XXXXXOO', 'OXXOXXO', 'OOOOOOX', 'XXOXXOO'], ['XXOXOXO', 'OOOXOXO', 'OOOXOXX', 'XXXXXOO', 'OXXOXXO', 'OOOOOOX', 'XXOXXOO']),
		(['OOXOOXO', 'XXOOOXX', 'XXOXXOX', 'OXXOOOO', 'XOOXOXX', 'OXXXOOX', 'XOOXOOO'], ['OOXOOXO', 'XXOOOXX', 'XXOXXOX', 'OXXOOOO', 'XXXXOXX', 'OXXXOOX', 'XOOXOOO']),
		(['XXXOOXO', 'OXOXXXX', 'OOXOOXO', 'XOOXOXO', 'XOOXOOX', 'XOOXOOX', 'OXXOXOX'], ['XXXOOXO', 'OXXXXXX', 'OOXOOXO', 'XOOXOXO', 'XOOXOOX', 'XOOXOOX', 'OXXOXOX']),
		(['OXXOXO', 'OOXOOX', 'OOOXXO', 'XXXOXX', 'OXXOXO', 'OXOOOO'], ['OXXOXO', 'OOXOOX', 'OOOXXO', 'XXXOXX', 'OXXOXO', 'OXOOOO']),
		(['XXXXOO', 'OXXXXO', 'XXXXOX', 'XOXXOO', 'OOXOXX', 'XOOOXX'], ['XXXXOO', 'OXXXXO', 'XXXXOX', 'XOXXOO', 'OOXOXX', 'XOOOXX']),
		(['OXOXO', 'XOOOX', 'XXOXX', 'XXOOO', 'XOXXX'], ['OXOXO', 'XOOOX', 'XXOXX', 'XXOOO', 'XOXXX']),
		(['XOXOOOX', 'XXOXOXX', 'OXXOXOX', 'OXOOOXX', 'XXXXOOO', 'XXOOXOO', 'OOXXXXX'], ['XOXOOOX', 'XXXXOXX', 'OXXOXXX', 'OXOOOXX', 'XXXXOOO', 'XXXXXOO', 'OOXXXXX']),
	]

	for case in testCase:
		matrix = [[x for x in row] for row in case[0]]
		test_module.surroundedRegons(matrix)
		ret = ["".join(row) for row in matrix]
		if ret != case[1]:
			#print ret
			raise RuntimeError("testSurroundedRegons failed!! %s" % case[0])

	print "testSurroundedRegons done!"

def testPalindromePartition():
	testCase = [
		("", [[]]),
		("a", [['a']]),
		("ltsqjodzeriqdtyewsrpfscozbyrpidadvsmlylqrviuqiynbscgmhulkvdzdicgdwvquigoepiwxjlydogpxdahyfhdnljshgjeprsvgctgnfgqtnfsqizonirdtcvblehcwbzedsmrxtjsipkyxk", [['l', 't', 's', 'q', 'j', 'o', 'd', 'z', 'e', 'r', 'i', 'q', 'd', 't', 'y', 'e', 'w', 's', 'r', 'p', 'f', 's', 'c', 'o', 'z', 'b', 'y', 'r', 'p', 'i', 'd', 'a', 'd', 'v', 's', 'm', 'l', 'y', 'l', 'q', 'r', 'v', 'i', 'u', 'q', 'i', 'y', 'n', 'b', 's', 'c', 'g', 'm', 'h', 'u', 'l', 'k', 'v', 'd', 'z', 'd', 'i', 'c', 'g', 'd', 'w', 'v', 'q', 'u', 'i', 'g', 'o', 'e', 'p', 'i', 'w', 'x', 'j', 'l', 'y', 'd', 'o', 'g', 'p', 'x', 'd', 'a', 'h', 'y', 'f', 'h', 'd', 'n', 'l', 'j', 's', 'h', 'g', 'j', 'e', 'p', 'r', 's', 'v', 'g', 'c', 't', 'g', 'n', 'f', 'g', 'q', 't', 'n', 'f', 's', 'q', 'i', 'z', 'o', 'n', 'i', 'r', 'd', 't', 'c', 'v', 'b', 'l', 'e', 'h', 'c', 'w', 'b', 'z', 'e', 'd', 's', 'm', 'r', 'x', 't', 'j', 's', 'i', 'p', 'k', 'y', 'x', 'k'], ['l', 't', 's', 'q', 'j', 'o', 'd', 'z', 'e', 'r', 'i', 'q', 'd', 't', 'y', 'e', 'w', 's', 'r', 'p', 'f', 's', 'c', 'o', 'z', 'b', 'y', 'r', 'p', 'i', 'd', 'a', 'd', 'v', 's', 'm', 'l', 'y', 'l', 'q', 'r', 'v', 'i', 'u', 'q', 'i', 'y', 'n', 'b', 's', 'c', 'g', 'm', 'h', 'u', 'l', 'k', 'v', 'dzd', 'i', 'c', 'g', 'd', 'w', 'v', 'q', 'u', 'i', 'g', 'o', 'e', 'p', 'i', 'w', 'x', 'j', 'l', 'y', 'd', 'o', 'g', 'p', 'x', 'd', 'a', 'h', 'y', 'f', 'h', 'd', 'n', 'l', 'j', 's', 'h', 'g', 'j', 'e', 'p', 'r', 's', 'v', 'g', 'c', 't', 'g', 'n', 'f', 'g', 'q', 't', 'n', 'f', 's', 'q', 'i', 'z', 'o', 'n', 'i', 'r', 'd', 't', 'c', 'v', 'b', 'l', 'e', 'h', 'c', 'w', 'b', 'z', 'e', 'd', 's', 'm', 'r', 'x', 't', 'j', 's', 'i', 'p', 'k', 'y', 'x', 'k'], ['l', 't', 's', 'q', 'j', 'o', 'd', 'z', 'e', 'r', 'i', 'q', 'd', 't', 'y', 'e', 'w', 's', 'r', 'p', 'f', 's', 'c', 'o', 'z', 'b', 'y', 'r', 'p', 'i', 'd', 'a', 'd', 'v', 's', 'm', 'lyl', 'q', 'r', 'v', 'i', 'u', 'q', 'i', 'y', 'n', 'b', 's', 'c', 'g', 'm', 'h', 'u', 'l', 'k', 'v', 'd', 'z', 'd', 'i', 'c', 'g', 'd', 'w', 'v', 'q', 'u', 'i', 'g', 'o', 'e', 'p', 'i', 'w', 'x', 'j', 'l', 'y', 'd', 'o', 'g', 'p', 'x', 'd', 'a', 'h', 'y', 'f', 'h', 'd', 'n', 'l', 'j', 's', 'h', 'g', 'j', 'e', 'p', 'r', 's', 'v', 'g', 'c', 't', 'g', 'n', 'f', 'g', 'q', 't', 'n', 'f', 's', 'q', 'i', 'z', 'o', 'n', 'i', 'r', 'd', 't', 'c', 'v', 'b', 'l', 'e', 'h', 'c', 'w', 'b', 'z', 'e', 'd', 's', 'm', 'r', 'x', 't', 'j', 's', 'i', 'p', 'k', 'y', 'x', 'k'], ['l', 't', 's', 'q', 'j', 'o', 'd', 'z', 'e', 'r', 'i', 'q', 'd', 't', 'y', 'e', 'w', 's', 'r', 'p', 'f', 's', 'c', 'o', 'z', 'b', 'y', 'r', 'p', 'i', 'd', 'a', 'd', 'v', 's', 'm', 'lyl', 'q', 'r', 'v', 'i', 'u', 'q', 'i', 'y', 'n', 'b', 's', 'c', 'g', 'm', 'h', 'u', 'l', 'k', 'v', 'dzd', 'i', 'c', 'g', 'd', 'w', 'v', 'q', 'u', 'i', 'g', 'o', 'e', 'p', 'i', 'w', 'x', 'j', 'l', 'y', 'd', 'o', 'g', 'p', 'x', 'd', 'a', 'h', 'y', 'f', 'h', 'd', 'n', 'l', 'j', 's', 'h', 'g', 'j', 'e', 'p', 'r', 's', 'v', 'g', 'c', 't', 'g', 'n', 'f', 'g', 'q', 't', 'n', 'f', 's', 'q', 'i', 'z', 'o', 'n', 'i', 'r', 'd', 't', 'c', 'v', 'b', 'l', 'e', 'h', 'c', 'w', 'b', 'z', 'e', 'd', 's', 'm', 'r', 'x', 't', 'j', 's', 'i', 'p', 'k', 'y', 'x', 'k'], ['l', 't', 's', 'q', 'j', 'o', 'd', 'z', 'e', 'r', 'i', 'q', 'd', 't', 'y', 'e', 'w', 's', 'r', 'p', 'f', 's', 'c', 'o', 'z', 'b', 'y', 'r', 'p', 'i', 'dad', 'v', 's', 'm', 'l', 'y', 'l', 'q', 'r', 'v', 'i', 'u', 'q', 'i', 'y', 'n', 'b', 's', 'c', 'g', 'm', 'h', 'u', 'l', 'k', 'v', 'd', 'z', 'd', 'i', 'c', 'g', 'd', 'w', 'v', 'q', 'u', 'i', 'g', 'o', 'e', 'p', 'i', 'w', 'x', 'j', 'l', 'y', 'd', 'o', 'g', 'p', 'x', 'd', 'a', 'h', 'y', 'f', 'h', 'd', 'n', 'l', 'j', 's', 'h', 'g', 'j', 'e', 'p', 'r', 's', 'v', 'g', 'c', 't', 'g', 'n', 'f', 'g', 'q', 't', 'n', 'f', 's', 'q', 'i', 'z', 'o', 'n', 'i', 'r', 'd', 't', 'c', 'v', 'b', 'l', 'e', 'h', 'c', 'w', 'b', 'z', 'e', 'd', 's', 'm', 'r', 'x', 't', 'j', 's', 'i', 'p', 'k', 'y', 'x', 'k'], ['l', 't', 's', 'q', 'j', 'o', 'd', 'z', 'e', 'r', 'i', 'q', 'd', 't', 'y', 'e', 'w', 's', 'r', 'p', 'f', 's', 'c', 'o', 'z', 'b', 'y', 'r', 'p', 'i', 'dad', 'v', 's', 'm', 'l', 'y', 'l', 'q', 'r', 'v', 'i', 'u', 'q', 'i', 'y', 'n', 'b', 's', 'c', 'g', 'm', 'h', 'u', 'l', 'k', 'v', 'dzd', 'i', 'c', 'g', 'd', 'w', 'v', 'q', 'u', 'i', 'g', 'o', 'e', 'p', 'i', 'w', 'x', 'j', 'l', 'y', 'd', 'o', 'g', 'p', 'x', 'd', 'a', 'h', 'y', 'f', 'h', 'd', 'n', 'l', 'j', 's', 'h', 'g', 'j', 'e', 'p', 'r', 's', 'v', 'g', 'c', 't', 'g', 'n', 'f', 'g', 'q', 't', 'n', 'f', 's', 'q', 'i', 'z', 'o', 'n', 'i', 'r', 'd', 't', 'c', 'v', 'b', 'l', 'e', 'h', 'c', 'w', 'b', 'z', 'e', 'd', 's', 'm', 'r', 'x', 't', 'j', 's', 'i', 'p', 'k', 'y', 'x', 'k'], ['l', 't', 's', 'q', 'j', 'o', 'd', 'z', 'e', 'r', 'i', 'q', 'd', 't', 'y', 'e', 'w', 's', 'r', 'p', 'f', 's', 'c', 'o', 'z', 'b', 'y', 'r', 'p', 'i', 'dad', 'v', 's', 'm', 'lyl', 'q', 'r', 'v', 'i', 'u', 'q', 'i', 'y', 'n', 'b', 's', 'c', 'g', 'm', 'h', 'u', 'l', 'k', 'v', 'd', 'z', 'd', 'i', 'c', 'g', 'd', 'w', 'v', 'q', 'u', 'i', 'g', 'o', 'e', 'p', 'i', 'w', 'x', 'j', 'l', 'y', 'd', 'o', 'g', 'p', 'x', 'd', 'a', 'h', 'y', 'f', 'h', 'd', 'n', 'l', 'j', 's', 'h', 'g', 'j', 'e', 'p', 'r', 's', 'v', 'g', 'c', 't', 'g', 'n', 'f', 'g', 'q', 't', 'n', 'f', 's', 'q', 'i', 'z', 'o', 'n', 'i', 'r', 'd', 't', 'c', 'v', 'b', 'l', 'e', 'h', 'c', 'w', 'b', 'z', 'e', 'd', 's', 'm', 'r', 'x', 't', 'j', 's', 'i', 'p', 'k', 'y', 'x', 'k'], ['l', 't', 's', 'q', 'j', 'o', 'd', 'z', 'e', 'r', 'i', 'q', 'd', 't', 'y', 'e', 'w', 's', 'r', 'p', 'f', 's', 'c', 'o', 'z', 'b', 'y', 'r', 'p', 'i', 'dad', 'v', 's', 'm', 'lyl', 'q', 'r', 'v', 'i', 'u', 'q', 'i', 'y', 'n', 'b', 's', 'c', 'g', 'm', 'h', 'u', 'l', 'k', 'v', 'dzd', 'i', 'c', 'g', 'd', 'w', 'v', 'q', 'u', 'i', 'g', 'o', 'e', 'p', 'i', 'w', 'x', 'j', 'l', 'y', 'd', 'o', 'g', 'p', 'x', 'd', 'a', 'h', 'y', 'f', 'h', 'd', 'n', 'l', 'j', 's', 'h', 'g', 'j', 'e', 'p', 'r', 's', 'v', 'g', 'c', 't', 'g', 'n', 'f', 'g', 'q', 't', 'n', 'f', 's', 'q', 'i', 'z', 'o', 'n', 'i', 'r', 'd', 't', 'c', 'v', 'b', 'l', 'e', 'h', 'c', 'w', 'b', 'z', 'e', 'd', 's', 'm', 'r', 'x', 't', 'j', 's', 'i', 'p', 'k', 'y', 'x', 'k']]),
		("abbab", [['a', 'b', 'b', 'a', 'b'], ['a', 'b', 'bab'], ['a', 'bb', 'a', 'b'], ['abba', 'b']]),
		("efe", [['e', 'f', 'e'], ['efe']]),
	]
	for case in testCase:
		if test_module.palindromePartition(case[0]) != case[1]:
			raise RuntimeError("testPalindromePartition failed!")
	print "testPalindromePartition done!"

def testCloneGraph():
	for i in xrange(25):
		g = graphic.generateRandomGraph(50 + random.randint(-15, 15))
		node = g.getNode(0)
		cloned = test_module.cloneGraph(node)
		if not graphic.equal(cloned, node):
			raise RuntimeError("testCloneGraph failed!!")

	if test_module.cloneGraph(None) != None:
		raise RuntimeError("testCloneGraph failed!!")

	print "testCloneGraph done!"


def testCanCompleteCircuit():
	testCase = [
		([2], [2], 0),
		([11, 6, 7, 3, 13, 7, 5, 9, 2, 7, 15, 10, 11, 2, 11, 5, 8, 15], [3, 9, 10, 13, 8, 1, 11, 12, 12, 5, 5, 10, 6, 10, 4, 4, 6, 14], 9),
		([4, 11, 9, 3, 10, 12, 9, 3, 14, 4, 11, 12, 12, 1, 15, 4, 8, 9], [6, 7, 11, 1, 4, 9, 6, 5, 11, 5, 15, 6, 7, 11, 13, 6, 4, 15], 1),
		([1, 9, 2, 1, 6, 8, 5, 3, 5, 5, 13, 5, 6, 5, 11, 2, 15, 10], [4, 12, 3, 1, 13, 2, 11, 5, 8, 14, 12, 7, 1, 8, 6, 8, 15, 4], -1),
		([13, 13, 1, 5, 5, 15, 4, 6, 10, 1, 15, 15, 8, 14, 2, 5, 11, 14], [15, 2, 14, 15, 6, 9, 8, 4, 7, 3, 11, 1, 15, 1, 6, 5, 8, 14], 5),
		([7, 10, 2, 14, 9, 5, 6, 5, 10, 3, 13, 11, 6, 5, 2, 4, 15, 15], [13, 13, 3, 5, 8, 4, 13, 5, 2, 15, 7, 6, 7, 8, 8, 7, 15, 14], -1),
		([14, 13, 4, 11, 9, 15, 11, 10, 3, 12, 13, 11, 4, 13, 9, 6, 15, 3], [15, 10, 4, 4, 6, 2, 7, 14, 8, 8, 8, 15, 10, 4, 7, 4, 13, 7], 1),
		([4, 2, 11, 5, 1, 8, 10, 7, 15, 13, 3, 10, 12, 12, 5, 12, 11, 14], [6, 7, 6, 4, 1, 14, 10, 8, 12, 15, 5, 11, 5, 1, 6, 12, 12, 8], 12),
		([14, 8, 6, 14, 15, 1, 5, 11, 14, 15, 12, 10, 9, 7, 10, 1, 6, 8], [14, 4, 5, 13, 15, 4, 15, 9, 5, 9, 14, 12, 11, 7, 10, 11, 13, 5], -1),
		([13, 7, 10, 4, 15, 4, 5, 15, 2, 7, 1, 9, 11, 11, 1, 13, 8, 8], [4, 2, 7, 11, 11, 5, 6, 4, 8, 15, 3, 14, 6, 2, 8, 7, 3, 4], 0),
		([15, 5, 3, 9, 1, 11, 1, 12, 9, 15, 15, 6, 9, 13, 4, 12, 9, 14], [4, 13, 7, 2, 15, 11, 3, 15, 1, 3, 3, 2, 14, 4, 10, 1, 12, 7], 8),
		([8, 6, 2, 13, 15, 6, 15, 15, 5, 9, 14, 10, 2, 6, 2, 2, 13, 5], [12, 10, 5, 1, 6, 13, 11, 12, 7, 15, 5, 4, 14, 8, 15, 7, 1, 15], -1),
		([6, 9, 5, 1, 13, 14, 11, 1, 3, 10, 3, 8, 5, 14, 14, 7, 14, 5], [10, 2, 1, 14, 9, 11, 12, 4, 7, 1, 4, 7, 9, 7, 1, 12, 14, 13], 9),
		([17, 17, 2, 25, 3, 4, 10, 2, 8, 10, 2, 24, 1, 3, 2, 25, 18, 24], [13, 4, 10, 4, 13, 8, 5, 9, 14, 5, 13, 3, 9, 14, 7, 2, 12, 11], 15),
		([25, 7, 1, 11, 21, 17, 8, 12, 1, 18, 16, 24, 10, 6, 1, 4, 24, 11], [4, 8, 10, 1, 14, 5, 11, 14, 14, 14, 10, 13, 10, 2, 1, 3, 3, 13], 0),
		([1, 6, 23, 7, 21, 2, 19, 2, 10, 20, 20, 19, 22, 6, 22, 14, 25, 19], [4, 5, 11, 12, 12, 15, 2, 6, 15, 11, 11, 3, 12, 9, 11, 3, 12, 3], 1),
		([13, 1, 24, 13, 20, 1, 10, 2, 9, 2, 2, 19, 13, 2, 10, 6, 2, 25], [13, 11, 4, 12, 6, 12, 13, 4, 8, 9, 14, 8, 11, 1, 14, 14, 11, 8], 17),
	]

	for case in testCase:
		if test_module.canCompleteCircuit(case[0], case[1]) != case[2]:
			raise RuntimeError("testCanCompleteCircuit failed!!")

	print "testCanCompleteCircuit done!"

def testSingleNumber():
	testCase = [
		([], 0),
		([4, -15, 1, 3, 13, -7, 19, 14, 12, -9, -12, -1, 4, -15, 1, 3, 13, -7, 19, 14, 12, -12, -1], -9),
		([-1, -11, -2, -12, 4, 5, 3, 16, 19, 9, -13, -1, -11, -2, -12, 4, 5, 3, 19, 9, -13], 16),
		([3, 9, -8, 4, -1, 2, 11, 20, 17, 1, -9, -6, 14, -4, -11, 3, 9, -8, 4, 2, 11, 20, 17, 1, -9, -6, 14, -4, -11], -1),
		([11, -14, -6, -10, 20, -4, -2, 13, -7, 19, -15, 11, -14, -6, -10, 20, -4, -2, -7, 19, -15], 13),
		([-9, 2, -1, -12, 1, 12, -2, -5, 10, 8, -14, 4, -7, -3, -6, -9, 2, -1, -12, 1, 12, -5, 10, 8, -14, 4, -7, -3, -6], -2),
		([17, 20, 18, 14, 6, 7, -4, 2, 8, 15, -7, 5, 17, 20, 18, 14, 6, 7, -4, 2, 8, -7, 5], 15),
		([19, -2, -10, -11, -9, 5, -13, 4, 0, 13, 9, 3, 11, 8, 17, 19, -2, -10, -11, -9, 5, -13, 4, 0, 13, 3, 11, 8, 17], 9),
		([10, 18, 9, -13, 15, 8, -8, 0, 16, 1, -11, 10, 18, 9, -13, 15, 8, 0, 16, 1, -11], -8),
		([8, 15, -8, 2, -7, -2, -12, 18, -1, -6, -10, 16, 1, 8, 15, -8, 2, -7, -12, 18, -1, -6, -10, 16, 1], -2),
		([0, -9, 5, -3, 15, 4, 14, -6, 19, 10, 12, 3, 7, 11, 0, -9, 5, -3, 15, 4, -6, 19, 10, 12, 3, 7, 11], 14),
		([19, 14, 16, -1, -10, 0, -7, 20, -8, -12, -5, 12, 14, 16, -1, -10, 0, -7, 20, -8, -12, -5, 12], 19),
		([5, -13, 10, 15, 8, 20, 13, 2, 19, 6, -14, 18, -3, -4, -1, 5, -13, 10, 8, 20, 13, 2, 19, 6, -14, 18, -3, -4, -1], 15),
		([19, -11, 8, -2, 6, -3, -15, -4, 10, 3, -13, 9, -5, -1, 7, 19, -11, 8, 6, -3, -15, -4, 10, 3, -13, 9, -5, -1, 7], -2),
		([11, 16, 10, -13, -7, 7, 0, -4, 8, 13, 17, -8, 12, 14, 18, 11, 16, 10, -13, -7, 7, 0, -4, 8, 13, 17, -8, 14, 18], 12),
		([-10, 15, 13, 7, 0, -4, -1, 1, -14, 2, -11, -9, -10, 15, 13, 7, 0, -4, -1, -14, 2, -11, -9], 1),
		([-14, -9, 5, -7, -11, 14, -15, -4, 19, -12, 20, 9, 0, -14, -9, 5, -11, 14, -15, -4, 19, -12, 20, 9, 0], -7),
		([17, 10, -10, -12, 20, -5, -11, -1, -8, 9, 13, -13, 17, 10, -10, -12, 20, -5, -11, -1, -8, 9, -13], 13),
		([13, -8, 20, -12, 15, -13, 0, -2, 6, 5, 9, 16, 13, 20, -12, 15, -13, 0, -2, 6, 5, 9, 16], -8),
		([10, 8, 12, -15, 4, 5, -5, 14, 2, -14, 1, 15, -13, 10, 8, 12, -15, 4, -5, 14, 2, -14, 1, 15, -13], 5),
		([-10, -7, 3, 19, -4, 15, 13, 0, 16, -9, 7, -1, 1, -10, -7, 3, 19, 15, 13, 0, 16, -9, 7, -1, 1], -4),
		([6, 3, 0, 16, 13, 17, 20, 1, 19, 9, 6, 3, 0, 16, 13, 17, 1, 19, 9], 20),
		([-12, 0, 9, 10, 20, -1, 7, 2, -4, -13, -12, 0, 9, 10, 20, -1, 7, -4, -13], 2),
		([-2, 3, 5, -11, 2, 4, 19, -8, -14, -3, 3, 5, -11, 2, 4, 19, -8, -14, -3], -2),
		([3, -11, -8, 0, 8, 18, 16, -5, 14, -10, -15, -4, -12, 3, -11, -8, 0, 8, 18, 16, -5, 14, -10, -15, -12], -4),
		([8, 19, 17, -15, 18, 20, 3, -9, -10, -4, 12, 8, 19, -15, 18, 20, 3, -9, -10, -4, 12], 17),
	]

	for case in testCase:
		if test_module.singleNumber(case[0]) != case[1]:
			raise RuntimeError("testSingleNumber failed!!")

	print "testSingleNumber done!"

def testSingleNumber2():
	testCase = [
		([1,2,2,2], 1),
		([1,2,2,2,3,3,3], 1),
		([1,2,2,2,3,3,3,1], 1),
		([2,2,2,3,3,3,1], 1),
		([-2, -1, 10, -7, 3, -13, -15, 5, -2, -1, -7, 3, -13, -15, 5, -2, -1, -7, 3, -13, -15, 5], 10),
		([-15, -13, -9, 7, 9, -14, 1, 3, -15, -13, -9, 7, -14, 1, 3, -15, -13, -9, 7, -14, 1, 3], 9),
		([-12, -2, 10, -10, -8, 12, 13, 8, 6, -12, -2, 10, -10, 12, 13, 8, 6, -12, -2, 10, -10, 12, 13, 8, 6], -8),
		([11, 4, -2, -8, -7, -10, -1, -4, 11, 4, -2, -8, -7, -10, -4, 11, 4, -2, -8, -7, -10, -4], -1),
		([-8, 1, 7, 15, -10, -15, -11, 4, 5, -8, 1, 15, -10, -15, -11, 4, 5, -8, 1, 15, -10, -15, -11, 4, 5], 7),
		([-1, -11, -12, -7, 13, 14, 1, -14, 5, 2, -1, -11, -12, -7, 13, 14, 1, 5, 2, -1, -11, -12, -7, 13, 14, 1, 5, 2], -14),
		([-15, 2, -9, -11, 5, -5, 12, -14, 15, -15, 2, -11, 5, -5, 12, -14, 15, -15, 2, -11, 5, -5, 12, -14, 15], -9),
		([13, -5, -1, -11, -13, -7, 15, 2, 13, -5, -1, -11, -13, 15, 2, 13, -5, -1, -11, -13, 15, 2], -7),
		([7, 1, 11, -1, -12, 6, 13, 14, -2, 4, 7, 1, 11, -1, -12, 6, 13, 14, -2, 7, 1, 11, -1, -12, 6, 13, 14, -2], 4),
		([3, 10, -11, 13, 2, 14, -15, 11, 15, 1, 10, -11, 13, 2, 14, -15, 11, 15, 1, 10, -11, 13, 2, 14, -15, 11, 15, 1], 3),
		([-5, -14, 7, -10, 15, 10, 2, -7, 0, -5, -14, 7, -10, 15, 10, 2, -7, -5, -14, 7, -10, 15, 10, 2, -7], 0),
		([6, 4, 11, -12, -2, -11, 13, -7, -14, 6, 4, 11, -12, -2, -11, 13, -14, 6, 4, 11, -12, -2, -11, 13, -14], -7),
		([0, -5, 13, -13, 1, 14, 2, 4, 8, 0, -5, 13, -13, 1, 14, 2, 8, 0, -5, 13, -13, 1, 14, 2, 8], 4),
		([3, -7, 1, -14, -1, -10, 2, 14, -6, 3, 1, -14, -1, -10, 2, 14, -6, 3, 1, -14, -1, -10, 2, 14, -6], -7),
		([6, 12, 11, -8, 4, 14, 9, -5, -13, 6, 12, 11, -8, 14, 9, -5, -13, 6, 12, 11, -8, 14, 9, -5, -13], 4),
		([-7, 7, -6, 0, 2, 15, -13, -9, -7, 7, -6, 0, 2, 15, -9, -7, 7, -6, 0, 2, 15, -9], -13),
		([-2, 1, -11, 0, -13, -15, 12, -9, -2, 1, -11, -13, -15, 12, -9, -2, 1, -11, -13, -15, 12, -9], 0),
		([-7, 1, 11, 15, -4, 5, -13, -9, -5, 1, 11, 15, -4, 5, -13, -9, -5, 1, 11, 15, -4, 5, -13, -9, -5], -7),
		([-6, 4, -7, -4, -9, 10, 7, -14, 2, -6, 4, -7, -4, 10, 7, -14, 2, -6, 4, -7, -4, 10, 7, -14, 2], -9),
		([-1, -5, -11, -10, 2, 14, -8, 8, 0, 11, -1, -5, -10, 2, 14, -8, 8, 0, 11, -1, -5, -10, 2, 14, -8, 8, 0, 11], -11),
		([-6, -10, -15, -13, 14, 11, -11, -4, -6, -10, -15, -13, 14, -11, -4, -6, -10, -15, -13, 14, -11, -4], 11),
		([7, -5, 2, -8, -15, -10, -14, -4, -7, 4, -5, 2, -8, -15, -10, -14, -4, -7, 4, -5, 2, -8, -15, -10, -14, -4, -7, 4], 7),
		([0, 5, 3, 14, -7, 1, -9, -5, -10, 0, 5, 3, -7, 1, -9, -5, -10, 0, 5, 3, -7, 1, -9, -5, -10], 14),
		([-8, 2, 12, 8, 4, -14, 7, -4, 1, -1, -8, 2, 12, 8, 4, -14, 7, 1, -1, -8, 2, 12, 8, 4, -14, 7, 1, -1], -4),
		([-12, -3, 1, 9, 3, 10, -13, 0, 8, -12, -3, 1, 9, 3, 10, -13, 0, -12, -3, 1, 9, 3, 10, -13, 0], 8),
	]

	for case in testCase:
		if test_module.singleNumber2(case[0]) != case[1]:
			raise RuntimeError("testSingleNumber2 failed!!")

	print "testSingleNumber2 done!"


def testWordBreak():
	testCase = [
		("leetcode", ["leet", "code"], True),
		("a", ["a"], True), ("", ["a"], False), ("", [], True),
		("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab", ["a","aa","aaa","aaaa","aaaaa","aaaaaa","aaaaaaa","aaaaaaaa","aaaaaaaaa","aaaaaaaaaa"], False),
		("xnlxnlfvzztztgdkowgdkowgagqwnxugzwxugzwxnlgdkowgdkowgagqwnfvzztzt", ['fvz', 'aru', 'xnl', 'ztzt', 'gagqwn', 'xugzw', 'gdkow', 'xugzwxnl', 'gdkowgagqwn', 'xnlaru', 'xugzwxnlxnlaru', 'gdkowgdkowgagqwn'], True),
		("ixgxejmcrdqjkfmcalrxejmcrjxnfyqcwwtcalrxejmcrcalrjxnfyqcwwtxejmcrdqjkfmdqjkfmcalrxejmcrjxnflwccpcalrxejmr", ['dqjkfm', 'lwccp', 'yqcwwt', 'calr', 'jxnf', 'xejmcr', 'ixg', 'xejmcrdqjkfm', 'jxnfyqcwwt', 'calrxejmcr', 'dqjkfmcalr', 'dqjkfmcalrxejmcr'], False),
		("vncwjlaojlaovncwynwhazjlaojlaovncwmtqggjlaoeurhjmjlaovncweurhjmjlaovncwvncwjlajlaovncwvncw", ['mtqgg', 'iucnk', 'jlao', 'ynwhaz', 'eurhjm', 'vncw', 'suae', 'iucnkmtqgg', 'jlaovncw', 'jlaojlaovncw', 'jlaovncwvncw', 'eurhjmjlaovncwvncw'], False),
		("pphfwymlyymlysxufoopphfwpphfwymlyjykfejykfepphfwzpupphfwymlyymlybgoqvpphfwymlypphfwbgoqvpphfwymly", ['zpu', 'uodqp', 'pphfw', 'jykfe', 'bgoqv', 'sxufoo', 'ymly', 'pphfwjykfe', 'ymlysxufoo', 'jykfepphfw', 'pphfwymly', 'bgoqvpphfwymly'], True),
		("tluxafiebjglillshpbdztluxatluxapbdzjglillshfieblshzgcwfieblshzcwfiebpbdzndvnlsh", ['jglil', 'lsh', 'fieb', 'zgcw', 'pbdz', 'tluxa', 'ndvn', 'zgcwfieb', 'pbdzndvn', 'lshzgcwfieb', 'tluxapbdz', 'jglillsh'], False),
		("ijvgqsblbxyyifwmijvgqsjffijvgqsblbxyqlpxrlndqlpxryifwmijvgqsjffijvgqsblbxyijvgqsblbxylnd", ['ijvgqs', 'yifwm', 'qlpxr', 'lnd', 'blbxy', 'bsy', 'jff', 'ijvgqsjff', 'blbxyijvgqs', 'blbxylnd', 'ijvgqsblbxy', 'yifwmijvgqs'], True),
		("ivawzsiuivawzsiuivawivawvtiivawvtinkxivawzsiuzmildukallivawvtizmildnuegwzmildukallzmildukallivawvti", ['zsiu', 'ukall', 'zmild', 'vti', 'nuegw', 'ivaw', 'nkx', 'ivawzsiu', 'zmildukall', 'nkxivawzsiu', 'ivawvti', 'ivawzsiuivaw'], True),
		("vbqbesqgsqgpsqsfpcencenqrgvbqbepsqsfpsqgepoxsqgpsqsfpsqgpsqsfppsqsfpcen", ['qrg', 'psqsfp', 'cen', 'epox', 'vbqbe', 'rdop', 'sqg', 'sqgrdop', 'psqsfpsqg', 'sqgpsqsfp', 'epoxsqgpsqsfp', 'sqgsqgrdop'], True),
		("jbpubdzluelhrzijbprbsdrbsdjbpjbpjobjbpjbpjobjbpjobrbsdjbpzptmpmelhrzizptmpm", ['ubdzlu', 'job', 'efiucg', 'elhrzi', 'jbp', 'rbsd', 'zptmpm', 'ubdzluelhrzi', 'jbpjob', 'ubdzlurbsd', 'rbsdjbp', 'jbpubdzluelhrzi'], True),
		("zsiibrtxhthtkxdxmcxqnggjmivazxmcxqzsiibrtxhaieyumivazzsiibrtxhnggjnggjzsiibrtxhaieyuzsiibrtxhaieyuthtkxd", ['thtkxd', 'ibrtxh', 'aieyu', 'mivaz', 'xmcxq', 'nggj', 'zsi', 'zsiaieyu', 'mivazxmcxq', 'zsiibrtxh', 'zsiibrtxhaieyu', 'zsiibrtxhnggj'], True),
		("mjchmzwdffzmmcdkzmjchmzwdqxpobycdkzcdkzffzmmcdkzopzjlyqtgmjchmzwdqxpobyzwdzwdlyqtg", ['opzj', 'lyqtg', 'cdkz', 'mjchm', 'qxpoby', 'ffzmm', 'zwd', 'cdkzopzj', 'ffzmmcdkz', 'mjchmzwd', 'ffzmmcdkzopzj', 'lyqtgmjchmzwd'], True),
		("hatuopvhedoqhatuopvhedoqzzlqeczzlqecvrbxzzlqecvrbxtvhauavrbxzzlqeczzlqecbms", ['hatuop', 'vhedoq', 'bms', 'akvo', 'zzlqec', 'vrbx', 'tvhaua', 'zzlqectvhaua', 'vrbxzzlqec', 'akvohatuop', 'zzlqectvhauaakvohatuop', 'tvhauaakvo'], True),
		("jcrfdoejcrfjcrfdoejcrfrzaiwncflbljcrfdoedoedoenwrttgjcrfdoejcrfdoejcrfwncfjcrfdoejcrfjcrfdoe", ['lbl', 'doe', 'antdqp', 'rzai', 'nwrttg', 'wncf', 'jcrf', 'jcrfdoe', 'jcrfdoejcrf', 'rzaiwncf', 'lbljcrfdoe', 'jcrfdoejcrfrzaiwncf'], True),
		("zgafginppylrysbzgafgirysbqkwsacjlosrysbzgafgidkcmmlptearysbzgafgimlpteazgafginppylrysbzgafgidkcmzgafgi", ['zgafgi', 'nppyl', 'jlos', 'dkcm', 'qkwsac', 'rysb', 'mlptea', 'rysbzgafgi', 'nppylrysbzgafgi', 'mlptearysbzgafgi', 'zgafginppylrysbzgafgi', 'jlosrysb'], True),
		("uhqjqeuteutuhqjqqysmfeuhqjqubgquhqjqubguhqjqeuteuticyaubgqeuteoqtlnwcqysmfeuhqjqeut", ['lnwc', 'eoqt', 'uhqjq', 'eut', 'icya', 'ubgq', 'qysmfe', 'euteoqt', 'uhqjqubgq', 'qysmfeeoqt', 'uhqjqeut', 'uhqjqeuteut'], False),
		("otlotmzcscbfysbfysotloapaqncschslmcschslmotlotmztmzhslmotlotmz", ['utue', 'csc', 'hslm', 'apaqn', 'tmz', 'otlo', 'bfys', 'tmzhslm', 'otlotmz', 'cscbfys', 'hslmcsc', 'tmzcscbfys'], True),
		("sexjjhltsebdsexjjhgdjqshhtwrilzjsuhoshhtwrilzjsuhoshhtwrilzjsuhoshhtwrilzshhtwrilzjsuhowrilzsexjjhltsebdsexjjhshhtwrilzjsuhoshhtwrilz", ['sexjjh', 'jsuho', 'rqzm', 'gdjq', 'shht', 'wrilz', 'ltsebd', 'ltsebdsexjjh', 'shhtwrilz', 'shhtwrilzjsuho', 'shhtwrilzjsuhoshht', 'shhtwrilzjsuhoshhtwrilz'], True),
		("uklfwhvpfuklfwhedulkcrdwkrapqapqvpfyddpcuklfwhyddpcsruuimuklfwhyddpcsruuim", ['sruuim', 'edulkc', 'rdwkr', 'yddpc', 'apq', 'vpf', 'uklfwh', 'yddpcvpf', 'uklfwhapq', 'yddpcsruuim', 'vpfyddpc', 'uklfwhyddpcsruuim'], True),
		("oyllqclljzjjkcitpoyllqclljzjtxxwqyymlljzjkixboyllqcwqyymoyllqclljzjjszuwkixbwqyymkixb", ['jkcitp', 'jszuw', 'txx', 'oyllqc', 'lljzj', 'wqyym', 'kixb', 'wqyymlljzj', 'wqyymlljzjkixb', 'jkcitpkixb', 'oyllqclljzj', 'txxjkcitp'], True),
		("bvwrmilbvwrmilnlzifgasvkjasvkjrmilifgrmilasvkjrmilifgbvwrmilnlzbvwrmilifgasvkjrmil", ['nlz', 'rmil', 'bvw', 'ifg', 'uahv', 'asvkj', 'xcynol', 'asvkjrmil', 'bvwrmil', 'ifgasvkjrmil', 'bvwrmil', 'asvkjrmilifg'], True),
		("djmdjmmgopmgopjwqqwbmgopdjmdjmmgopmgopdjmmgopfiykvbhwfdjmbhwfdjmmgopdjmmgopmgop", ['hbxjdl', 'jwqqwb', 'fiykv', 'mgop', 'djm', 'bhwf', 'usrt', 'fiykvbhwf', 'djmmgop', 'djmmgopmgop', 'fiykvbhwfbhwf', 'djmmgopmgopjwqqwb'], True),
		("zanpijvtazanpijkpgeykkpgeyktsnpfkpgeyktsnpfekopznqkayvfkpgeyktsnpfekopznkpgeyktsnpfekopznkpgeyktsnpfkpgeyktsnpfekopznqkayvf", ['qkayvf', 'zanpij', 'ekopzn', 'tsnpf', 'kpgeyk', 'coyd', 'vta', 'ekopznqkayvf', 'qkayvfcoyd', 'qkayvfcoyd', 'kpgeyktsnpf', 'kpgeyktsnpfekopzn'], True),
		("bessrjplsfrjplsfrjplsfvxvbtrjplsfspjdpsrspjddanspjdpsrspjddanspjdpsrspjdspjdpsrspjddanspjdpsrspjdpsrpsrspjddan", ['bess', 'rjplsf', 'spjd', 'vxvbt', 'dan', 'nlawzd', 'psr', 'psrspjd', 'bessrjplsf', 'spjdpsrspjd', 'danspjdpsrspjd', 'psrpsrspjd'], True),
		("ajjxfdhikugjpvrlvbekybfdhikugjpvrngjpvrnajjxajjxpwsmfdhikugjpvrngjpvrnajjxajjxgjpvrnajjxajjxgjpvrnajjxajjx", ['pwsm', 'gjpvrn', 'afvxrf', 'fdhiku', 'kyb', 'ajjx', 'lvbe', 'gjpvrnajjx', 'fdhikugjpvrn', 'fdhikugjpvrnlvbe', 'gjpvrnajjxajjx', 'gjpvrnfdhikugjpvrnlvbe'], False),
		("vtvywjxhbmcsheefnbqkonwvtvefnnldplfbqkonwqvlgyqvlgyqvlgyefnvtvqvlgy", ['vtv', 'efn', 'ywjxh', 'nldplf', 'bqkonw', 'qvlgy', 'bmcshe', 'nldplfbqkonw', 'efnnldplfbqkonw', 'bmcsheefn', 'nldplfbqkonwbmcsheefn', 'bmcsheefnywjxh'], True),
	]

	for case in testCase:
		if test_module.wordBreak(case[0], case[1]) != case[2]:
			raise RuntimeError("testWordBreak failed!!")

	print "testWordBreak done!"

def testHasCycle():
	testCase = [
		([], False),
		([1], False),
	]

	for case in testCase:
		linkedLst = linked_list.createLinkedLst(case[0])
		if test_module.hasCycle(linkedLst) != case[1]:
			raise RuntimeError("testHasCycle failed!!")

	for i in xrange(100):
		size = 15 + random.randint(0,5)
		lst = []
		while len(lst) < size:
			val = random.randint(0,33)
			if val not in lst:
				lst.append(val)

		linkedLst = linked_list.createLinkedLst(lst)
		cycle = False
		if random.randint(1,2) == 1:
			idx = random.randint(1,size)
			th = linkedLst
			node = th
			while th and th.next:
				if idx == 1:
					node = th
				idx -= 1
				th = th.next
			th.next = node
			cycle = True

		if test_module.hasCycle(linkedLst) != cycle:
			raise RuntimeError("testHasCycle failed!!")

	print "testHasCycle done!"

def testDetectCycle():
	testCase = [
		([], None),
		([1], None),
	]

	for case in testCase:
		linkedLst = linked_list.createLinkedLst(case[0])
		if test_module.detectCycle(linkedLst) != case[1]:
			raise RuntimeError("testDetectCycle failed!!")

	for i in xrange(100):
		size = 15 + random.randint(0,5)
		lst = []
		while len(lst) < size:
			val = random.randint(0,33)
			if val not in lst:
				lst.append(val)

		linkedLst = linked_list.createLinkedLst(lst)
		cycle = None
		if random.randint(1,2) == 1:
			idx = random.randint(1,size)
			th = linkedLst
			node = th
			while th and th.next:
				if idx == 1:
					node = th
				idx -= 1
				th = th.next
			th.next = node
			cycle = node

		if test_module.detectCycle(linkedLst) != cycle:
			raise RuntimeError("testDetectCycle failed!!")

	print "testDetectCycle done!"

def testReorderList():
	testCase = [
		([1,2], "1,2"),	([1,2,3,4], "1,4,2,3"), ([], "None"),
		([3, 4, 6, 18, 7, 23, 10, 12, 28, 29, 1, 22, 11, 8, 13, 15, 30, 20, 26, 31], "3,31,4,26,6,20,18,30,7,15,23,13,10,8,12,11,28,22,29,1",),
		([13, 32, 9, 24, 14, 20, 3, 16, 23, 8, 0, 7, 26, 4, 30, 29, 10], "13,10,32,29,9,30,24,4,14,26,20,7,3,0,16,8,23",),
		([21, 25, 10, 9, 14, 20, 26, 17, 12, 7, 16, 15, 11, 31, 3, 1], "21,1,25,3,10,31,9,11,14,15,20,16,26,7,17,12",),
		([28, 10, 5, 1, 11, 27, 23, 33, 19, 16, 18, 8, 31, 6, 9, 15, 7, 0], "28,0,10,7,5,15,1,9,11,6,27,31,23,8,33,18,19,16",),
		([16, 8, 28, 25, 6, 33, 4, 32, 9, 29, 10, 26, 0, 24, 23, 20, 14, 11, 1, 13], "16,13,8,1,28,11,25,14,6,20,33,23,4,24,32,0,9,26,29,10",),
		([25, 10, 18, 16, 19, 23, 26, 32, 22, 20, 27, 15, 13, 6, 30, 21, 28, 29], "25,29,10,28,18,21,16,30,19,6,23,13,26,15,32,27,22,20",),
		([20, 10, 1, 0, 33, 3, 31, 16, 32, 12, 26, 28, 15, 4, 27, 14, 6, 11, 22, 29], "20,29,10,22,1,11,0,6,33,14,3,27,31,4,16,15,32,28,12,26",),
		([11, 23, 15, 6, 19, 32, 14, 25, 16, 2, 17, 21, 31, 30, 1, 27, 13, 22, 3], "11,3,23,22,15,13,6,27,19,1,32,30,14,31,25,21,16,17,2",),
		([7, 15, 22, 20, 3, 31, 5, 0, 11, 24, 30, 23, 16, 28, 2, 27], "7,27,15,2,22,28,20,16,3,23,31,30,5,24,0,11",),
		([13, 21, 33, 14, 8, 32, 7, 27, 1, 19, 24, 3, 18, 26, 30, 17, 4, 6, 22, 31], "13,31,21,22,33,6,14,4,8,17,32,30,7,26,27,18,1,3,19,24",),
		([1, 23, 15, 28, 4, 33, 9, 2, 25, 13, 16, 22, 5, 26, 12, 24, 31, 18], "1,18,23,31,15,24,28,12,4,26,33,5,9,22,2,16,25,13",),
		([24, 19, 14, 16, 30, 12, 4, 20, 32, 10, 21, 7, 23, 2, 33, 26, 27, 8, 17, 11], "24,11,19,17,14,8,16,27,30,26,12,33,4,2,20,23,32,7,10,21",),
		([7, 3, 23, 1, 22, 26, 25, 0, 18, 13, 8, 24, 5, 2, 11], "7,11,3,2,23,5,1,24,22,8,26,13,25,18,0",),
		([30, 33, 19, 7, 14, 11, 32, 26, 8, 27, 22, 15, 20, 29, 31], "30,31,33,29,19,20,7,15,14,22,11,27,32,8,26",),
		([12, 1, 23, 17, 6, 21, 7, 15, 4, 33, 0, 8, 2, 9, 20, 10, 30, 19], "12,19,1,30,23,10,17,20,6,9,21,2,7,8,15,0,4,33",),
		([20, 0, 15, 22, 13, 7, 26, 27, 30, 1, 10, 5, 2, 18, 17, 8], "20,8,0,17,15,18,22,2,13,5,7,10,26,1,27,30",),
		([27, 2, 28, 21, 0, 1, 25, 22, 26, 6, 14, 31, 10, 18, 11, 29, 16, 7], "27,7,2,16,28,29,21,11,0,18,1,10,25,31,22,14,26,6",),
		([4, 5, 3, 26, 15, 29, 23, 21, 18, 10, 11, 16, 22, 24, 0], "4,0,5,24,3,22,26,16,15,11,29,10,23,18,21",),
		([16, 13, 20, 17, 18, 27, 5, 22, 32, 2, 24, 6, 30, 12, 23, 33, 25, 0, 21], "16,21,13,0,20,25,17,33,18,23,27,12,5,30,22,6,32,24,2",),
		([23, 17, 20, 22, 13, 9, 25, 8, 27, 26, 4, 33, 0, 12, 32], "23,32,17,12,20,0,22,33,13,4,9,26,25,27,8",),
		([10, 31, 7, 0, 23, 2, 8, 3, 28, 21, 13, 24, 18, 9, 12, 30, 19], "10,19,31,30,7,12,0,9,23,18,2,24,8,13,3,21,28",),
		([3, 17, 2, 26, 23, 15, 20, 32, 30, 1, 16, 19, 5, 21, 25, 18], "3,18,17,25,2,21,26,5,23,19,15,16,20,1,32,30",),
		([6, 11, 30, 8, 22, 16, 5, 20, 21, 32, 4, 33, 14, 24, 7, 9, 12, 19, 23], "6,23,11,19,30,12,8,9,22,7,16,24,5,14,20,33,21,4,32",),
		([10, 7, 22, 3, 12, 21, 23, 5, 13, 24, 18, 14, 20, 31, 0, 26, 27], "10,27,7,26,22,0,3,31,12,20,21,14,23,18,5,24,13",),
		([1, 18, 22, 16, 25, 2, 10, 21, 26, 33, 19, 11, 20, 23, 27], "1,27,18,23,22,20,16,11,25,19,2,33,10,26,21",),
		([29, 33, 0, 9, 2, 14, 22, 21, 7, 26, 20, 3, 19, 15, 31, 16, 11], "29,11,33,16,0,31,9,15,2,19,14,3,22,20,21,26,7",),
		([21, 19, 10, 0, 13, 18, 14, 20, 26, 15, 33, 25, 23, 30, 1, 27, 24, 31, 8, 4], "21,4,19,8,10,31,0,24,13,27,18,1,14,30,20,23,26,25,15,33",),
		([33, 23, 5, 3, 18, 6, 31, 13, 8, 20, 4, 17, 27, 26, 10, 28, 9], "33,9,23,28,5,10,3,26,18,27,6,17,31,4,13,20,8",),
		([28, 13, 25, 29, 33, 15, 16, 19, 24, 26, 12, 7, 9, 14, 17, 3], "28,3,13,17,25,14,29,9,33,7,15,12,16,26,19,24",),
		([24, 9, 4, 17, 14, 16, 12, 26, 31, 10, 1, 29, 3, 13, 7, 25, 27, 33, 11, 15], "24,15,9,11,4,33,17,27,14,25,16,7,12,13,26,3,31,29,10,1",),
		([13, 11, 28, 15, 33, 19, 32, 12, 1, 24, 17, 14, 21, 30, 26, 22, 0, 7, 16, 25], "13,25,11,16,28,7,15,0,33,22,19,26,32,30,12,21,1,14,24,17",),
		([5, 17, 7, 12, 14, 20, 29, 33, 1, 9, 13, 18, 28, 3, 6], "5,6,17,3,7,28,12,18,14,13,20,9,29,1,33",),
		([31, 21, 25, 0, 27, 22, 33, 15, 14, 30, 3, 12, 1, 18, 16, 32], "31,32,21,16,25,18,0,1,27,12,22,3,33,30,15,14",),
	]

	for case in testCase:
		lst = linked_list.createLinkedLst(case[0])
		test_module.reorderList(lst)
		if str(lst) != case[1]:
			raise RuntimeError("testReorderList failed!! %s" % case[0])

	print "testReorderList done!"

def testPreorderTraversal():
	testCase = [
		[],
		[1],
	]

	for case in testCase:
		tree = binary_tree.createTree(case)
		preorder = binary_tree.preorder(tree)
		ret = test_module.preorderTraversal(tree)
		ret2 = test_module.preorderTraversal2(tree)
		if ret != preorder or ret != ret2:
			raise RuntimeError("testPreorderTraversal failed!!")


	for i in xrange(25):
		tree = binary_tree.createRandomTree(random.randint(15,18))
		preorder = binary_tree.preorder(tree)
		ret = test_module.preorderTraversal(tree)
		ret2 = test_module.preorderTraversal2(tree)
		if ret != preorder or ret != ret2:
			raise RuntimeError("testPreorderTraversal failed!!")

	print "testPreorderTraversal done!"


def testPostorderTraversal():
	testCase = [
		[],
		[1],
	]

	for case in testCase:
		tree = binary_tree.createTree(case)
		postorder = binary_tree.postorder(tree)
		ret = test_module.postorderTraversal(tree)
		ret2 = test_module.postorderTraversal2(tree)
		if ret != postorder or ret != ret2:
			raise RuntimeError("testPostorderTraversal failed!!")


	for i in xrange(25):
		tree = binary_tree.createRandomTree(random.randint(15,18))
		postorder = binary_tree.postorder(tree)
		ret = test_module.postorderTraversal(tree)
		ret2 = test_module.postorderTraversal2(tree)
		if ret != postorder or ret != ret2:
			raise RuntimeError("testPostorderTraversal failed!!")

	print "testPostorderTraversal done!"


def testSingleNumber3():
	testCase = [
		([1,2,1,3,5,2], [3,5]),
		([2,1,2,3,4,1], [3,4]),
		([0,0,1,2], [1,2]),
		([-1139700704,-1653765433], [-1139700704,-1653765433]),
		([12, 5, -6, -8, 0, 3, 0, 4, -9, -8, 12, 9, 5, 3, 6, -2, -12, 9, -11, -6, 7, -10, 7, 6, 15, -10, -11, 15, -9, 4], [-12, -2]),
		([9, 15, 1, 10, -13, 0, -5, 11, -4, -3, 15, 8, -13, -4, -7, 11, 1, 9, 4, 3, -7, 3, 12, 0, -5, 4, -3, 12, 13, 8], [10, 13]),
		([-14, 13, -2, 8, 8, -4, -10, 13, -5, -1, 6, -14, 14, -1, -6, -8, -8, -13, 6, 14, -13, -6, -4, -5, 9, 9, 0, 7, 0, -10], [-2, 7]),
		([-13, 12, 2, -11, -15, 5, -8, -15, -14, -6, -8, -7, 1, 6, -11, -1, 9, 4, -1, 6, 9, -14, 2, -10, -13, 5, -10, 4, 0, 12, -7, 1], [0, -6]),
		([-9, -15, 1, 12, 0, -14, -7, 5, -1, 6, 13, -9, 6, -1, -12, 1, -8, -7, -8, 5, -11, -11, 12, 8, 0, 13, -6, -14, -6, 2, 8, -10, 2, -15], [-12, -10]),
		([1, -6, -2, 8, 5, 9, 14, 8, -7, -15, 15, -9, -5, -1, -13, -9, 11, 3, 11, -5, 5, 9, 0, 0, -15, -2, 14, 15, 1, -6, -13, 3], [-7, -1]),
		([-5, -5, 1, -15, 15, -2, 10, -3, -1, -11, 10, -2, 15, 1, 13, -1, -9, -11, -9, 8, -15, -3, 2, 2, 7, 13, 8, 7, -14, 12], [12, -14]),
		([-11, 6, 5, -6, -6, -3, -3, 0, 2, 8, 15, -2, 3, -12, 14, 3, -2, 6, 14, 8, -5, 0, 5, 2, 15, 9, -10, 9, -5, -11], [-12, -10]),
		([9, 1, -8, 0, 5, -4, 4, -11, -13, -14, -9, 5, -4, 14, 1, 4, 9, -5, -8, -13, -5, 0, 13, -9, -2, 14, -2, -11], [-14, 13]),
		([-2, 6, 5, -13, -15, 7, -2, -5, -8, 7, 15, -4, 2, 3, -14, -4, -1, 2, -5, -14, -8, -10, -1, 14, -10, 3, 5, 13, -15, -13, 10, 13, 6, 10], [14, 15]),
		([-8, 4, -5, -12, 14, -6, 8, 2, 15, -3, 2, 0, 4, 3, 15, -15, -6, -8, -12, 5, 8, -3, -15, -9, -9, 11, 12, 0, 14, -5, 11, 12, -11, -11], [5, 3]),
		([-15, 9, -7, 8, 3, -4, -6, -8, -2, 15, -8, -2, -14, 10, -4, 12, 10, -5, -10, -7, -10, 8, -15, -6, 3, 9, 15, -14], [12, -5]),
		([-9, -1, -3, 11, 11, 15, -3, 12, -4, 7, -8, -4, 7, 15, -2, -12, -5, -5, 0, 0, 6, -12, -8, -6, 12, -9, -6, 1, 2, 1, 6, -2], [2, -1]),
		([-13, -6, 8, -10, -15, 2, -13, -15, -5, 4, 10, 12, 14, -8, 9, -3, 10, 8, 14, -3, 9, -7, -6, 4, -10, -5, 2, -8, -7, 15], [12, 15]),
		([0, 6, 0, 4, -14, 1, 2, -12, -7, -15, -14, -1, -15, 1, 6, -12, -1, 4, -10, -6, 9, 2, -10, 13, 13, 5, -6, -7, 5, 10], [10, 9]),
		([1, 8, -12, 14, -2, 3, -1, -13, 3, -5, -7, 8, -12, 1, -13, -14, -4, -9, -8, -2, 10, -4, -9, 12, -5, 10, -14, 12, 14, 9, -8, -7], [9, -1]),
		([0, -15, 0, -12, -4, 13, -4, 1, -5, -8, -7, -5, -13, -7, -11, -15, -13, -10, 11, 2, -12, -8, 13, 4, -11, 2, 10, 1, 10, -10], [4, 11]),
		([7, 0, -9, -6, 12, 13, 7, 14, -13, -15, 8, -13, 12, 14, -9, 15, 1, -12, 11, -10, 3, -10, -6, 8, 11, 13, -1, 9, -12, 9, 0, 15, 1, 3], [-15, -1]),
		([11, -4, 2, -2, -7, -6, -7, 11, 4, 12, -9, 5, 3, -6, 3, 2, -4, -15, -15, -1, 4, -14, -14, -9, -2, 12, 5, 14], [14, -1]),
		([6, 3, 9, -9, 9, 14, 13, 8, 1, 12, 3, 4, -3, -9, -12, 14, -11, -11, -8, 11, 8, 6, -12, 15, -3, 5, 12, 1, -8, 4, 11, 13, -10, 5], [-10, 15]),
		([-6, 0, -3, -14, 10, 1, -9, -1, 3, 9, 7, 9, -10, -3, -13, -7, -9, 12, -1, 7, 1, 13, -13, -6, -7, 3, 10, -14, 13, 0, 8, -10], [8, 12]),
		([-13, 9, 1, 15, 11, -10, 10, -14, 5, -9, 9, -14, 11, -6, 13, 13, -4, 4, 4, 8, -4, -8, 5, -11, 15, -9, -8, -11, -10, -6, -13, 10], [8, 1]),
		([-3, 6, 1, -3, -4, -8, -11, -4, -11, -5, -9, -1, -9, 10, 12, 12, -6, -13, 10, 3, 1, 15, -6, -13, -1, 15, -5, -8, 7, 3], [6, 7]),
		([-10, -11, -11, 6, -2, 0, -14, 1, 9, -3, -2, 0, 15, 14, 10, 15, 5, -6, 12, -14, 10, -6, 12, 5, -5, 4, 4, -10, 9, 1, 14, -7, -3, -7], [6, -5]),
		([13, 2, -10, 10, 11, 15, 6, 15, -3, -1, 8, -13, -1, 8, -5, -3, 11, 12, 5, -5, -6, 6, -6, -10, 2, -13, 10, -4, 12, -4], [5, 13]),
	]
	
	for case in testCase:
		if sorted(test_module.singleNumber3(case[0])) != sorted(case[1]):
			raise RuntimeError("testSingleNumber3 failed!! %s" % case[0])
	print "testSingleNumber3 done!"


def testInsertionSortList():
	testCase = [
		([1], "1"), ([], "None"), ([1,2], "1,2"), ([2,1], "1,2"),
		([25, 84, 49, 3, 48, 69, 75, 33, 93, 28, 85, 26, 80, 43, 41, 36], "3,25,26,28,33,36,41,43,48,49,69,75,80,84,85,93"),
		([8, 46, 76, 78, 11, 70, 66, 22, 59, 47, 23, 25, 41, 32, 27], "8,11,22,23,25,27,32,41,46,47,59,66,70,76,78"),
		([1, 38, 13, 66, 34, 52, 94, 53, 17, 63, 81, 80, 77, 23, 88, 10, 96, 25], "1,10,13,17,23,25,34,38,52,53,63,66,77,80,81,88,94,96"),
		([65, 77, 9, 5, 80, 3, 62, 36, 68, 22, 51, 86, 92, 17, 7, 14, 56], "3,5,7,9,14,17,22,36,51,56,62,65,68,77,80,86,92"),
		([93, 52, 14, 32, 84, 61, 3, 76, 29, 58, 16, 30, 65, 55, 4, 60, 62, 74], "3,4,14,16,29,30,32,52,55,58,60,61,62,65,74,76,84,93"),
		([81, 83, 67, 10, 17, 21, 52, 60, 64, 82, 0, 47, 9, 24, 20, 42, 34, 87], "0,9,10,17,20,21,24,34,42,47,52,60,64,67,81,82,83,87"),
		([15, 89, 17, 97, 51, 69, 23, 82, 37, 71, 67, 5, 8, 60, 33, 20, 93], "5,8,15,17,20,23,33,37,51,60,67,69,71,82,89,93,97"),
		([79, 98, 26, 90, 59, 83, 88, 46, 60, 39, 14, 65, 51, 38, 72, 8, 33], "8,14,26,33,38,39,46,51,59,60,65,72,79,83,88,90,98"),
		([39, 20, 50, 79, 77, 3, 99, 18, 25, 66, 69, 44, 23, 26, 2, 97, 6, 86], "2,3,6,18,20,23,25,26,39,44,50,66,69,77,79,86,97,99"),
		([53, 14, 17, 52, 46, 16, 70, 18, 37, 36, 90, 91, 5, 67, 60, 98, 81], "5,14,16,17,18,36,37,46,52,53,60,67,70,81,90,91,98"),
		([16, 10, 70, 21, 43, 29, 97, 51, 65, 54, 99, 69, 89, 46, 44], "10,16,21,29,43,44,46,51,54,65,69,70,89,97,99"),
		([14, 71, 10, 8, 87, 90, 97, 40, 38, 73, 28, 13, 2, 36, 59, 46, 1, 98], "1,2,8,10,13,14,28,36,38,40,46,59,71,73,87,90,97,98"),
		([32, 40, 38, 68, 21, 72, 24, 3, 60, 9, 11, 27, 64, 19, 23, 57], "3,9,11,19,21,23,24,27,32,38,40,57,60,64,68,72"),
		([69, 23, 8, 64, 54, 3, 84, 0, 99, 83, 62, 60, 96, 67, 12, 93, 19, 1], "0,1,3,8,12,19,23,54,60,62,64,67,69,83,84,93,96,99"),
		([96, 8, 11, 32, 95, 45, 2, 37, 7, 53, 16, 89, 87, 0, 1], "0,1,2,7,8,11,16,32,37,45,53,87,89,95,96"),
		([98, 58, 9, 46, 90, 38, 64, 43, 27, 74, 94, 68, 16, 87, 25, 32, 91, 18], "9,16,18,25,27,32,38,43,46,58,64,68,74,87,90,91,94,98"),
		([39, 4, 87, 42, 34, 13, 67, 72, 63, 45, 75, 11, 2, 32, 6], "2,4,6,11,13,32,34,39,42,45,63,67,72,75,87"),
		([51, 95, 79, 3, 69, 53, 74, 84, 77, 6, 64, 38, 48, 81, 54], "3,6,38,48,51,53,54,64,69,74,77,79,81,84,95"),
		([34, 36, 10, 11, 81, 13, 26, 92, 15, 21, 49, 51, 31, 80, 60, 44, 69], "10,11,13,15,21,26,31,34,36,44,49,51,60,69,80,81,92"),
		([48, 52, 40, 75, 11, 72, 13, 91, 53, 39, 88, 31, 50, 44, 83, 100, 21, 28], "11,13,21,28,31,39,40,44,48,50,52,53,72,75,83,88,91,100"),
		([31, 46, 25, 28, 61, 29, 94, 63, 22, 16, 4, 7, 87, 84, 39, 3, 53, 77], "3,4,7,16,22,25,28,29,31,39,46,53,61,63,77,84,87,94"),
		([4, 46, 30, 18, 94, 62, 45, 35, 82, 93, 32, 40, 42, 87, 97], "4,18,30,32,35,40,42,45,46,62,82,87,93,94,97"),
		([50, 27, 28, 12, 87, 64, 65, 4, 22, 31, 36, 38, 25, 52, 95, 5, 60], "4,5,12,22,25,27,28,31,36,38,50,52,60,64,65,87,95"),
		([99, 40, 26, 87, 60, 38, 96, 89, 13, 1, 33, 32, 84, 71, 63, 30, 21], "1,13,21,26,30,32,33,38,40,60,63,71,84,87,89,96,99"),
		([85, 81, 8, 59, 94, 87, 63, 65, 48, 68, 67, 29, 22, 31, 37], "8,22,29,31,37,48,59,63,65,67,68,81,85,87,94"),
	]

	for case in testCase:
		linkedList = linked_list.createLinkedLst(case[0])
		if str(test_module.insertionSortList(linkedList)) != case[1]:
			raise RuntimeError("testInsertionSortList failed!! %s" % case[0])


	print "testInsertionSortList done!"


def testQuickSortLinkedList():
	testCase = [
		([1], "1"),
		([1,2], "1,2"),
		([2,1], "1,2"),
		([1,2,3,4], "1,2,3,4"),
		([1,2,3,4,5,6,7], "1,2,3,4,5,6,7"),
		([1,3,3,1,3,1,3,3,2], "1,1,1,2,3,3,3,3,3"),
	]

	for i in xrange(25):
		size = random.randint(25, 150)
		lst = []
		while len(lst) < size:
			val = random.randint(0, 10)
			lst.append(val)
		linkedLst = linked_list.createLinkedLst(lst)
		if str(test_module.quickSortLinkedList(linkedLst)) != ",".join(map(str, sorted(lst)) ):
			raise RuntimeError("testQuickSortLinkedList failed!!")


	for case in testCase:
		lst = linked_list.createLinkedLst(case[0])
		if str(test_module.quickSortLinkedList(lst)) != case[1]:
			raise RuntimeError("testQuickSortLinkedList failed!!")

	print "testQuickSortLinkedList done!"

def testMergeSortLinkedList():
	testCase = [
		([1], "1"),
		([1,2], "1,2"),
		([2,1], "1,2"),
		([1,2,3,4], "1,2,3,4"),
		([1,2,3,4,5,6,7], "1,2,3,4,5,6,7"),
		([1,3,3,1,3,1,3,3,2], "1,1,1,2,3,3,3,3,3"),
	]

	for i in xrange(25):
		size = random.randint(25, 150)
		lst = []
		while len(lst) < size:
			val = random.randint(0, 10)
			lst.append(val)
		linkedLst = linked_list.createLinkedLst(lst)
		if str(test_module.mergeSortLinkedList(linkedLst)) != ",".join(map(str, sorted(lst)) ):
			raise RuntimeError("testMergeSortLinkedList failed!!")


	for case in testCase:
		lst = linked_list.createLinkedLst(case[0])
		if str(test_module.mergeSortLinkedList(lst)) != case[1]:
			raise RuntimeError("testMergeSortLinkedList failed!!")

	print "testMergeSortLinkedList done!"

def testMaxProduct():
	testCase = [
		([], 0), ([-2], -2),	([0,2], 2),([2,0], 2),	([-2,0,-1], 0),([3,-1,4], 4),([-2,3,-4], 24),([2,-5,-2,-4,3], 24),([-1,-2,-9,-6], 108),
		([1, -1, -8, 4, 2, 3, 6, 10, -3, -7, 2], 483840),([8, 8, -9, -9, -5, -7, -10, -2], 3628800),	([4, 9, -3, 10, -10, -7, 6, -2], 907200),
		([-9, 10, 1, -8, -3, 4, 6, -9, -8, 1, -10, 9], 335923200),([9, -2, 6, 3, 9, 7, 0, 2, -2, -7, -6], 1134),
		([4, 7, 6, -3, -9, 10, -8, -7], 2540160),([-5, 8, -3, -1, 8, 2, 9, 0, 1, 7, 8], 3456),
		([8, 6, 7, -7, 10, -7, -5, 0, 5, 6], 164640),([8, -1, 6, 6, -6, 0, -7, 5, 2], 1728),
		([-5, -7, 1, -4, 6, 9, -7, 5, 9], 2381400),	([-4, 4, 8, 9, 1, 2, -5, -9, 5, -8, -7], 7257600),
		([-5, -3, -8, -2, 9, -6, -9, -9, 10, -1, 3, 7], 220449600),	([-9, 5, 6, 9, 9, 1, -10, -7, 9, -9, -10, 1], 137781000),
		([-1, 8, 3, 10, -5, -1, -8, -1, 5, -7], 336000),([-10, 0, -5, 9, 4, 6, 0, -3], 216),([3, 1, -2, 8, -8, 3, 8, -8, -7], 516096),
		([6, -1, 8, 7, 0, -10, -1, 10, 0], 100),([-1, -1, 5, 4, 4, -5, -5, -5, 2, 0, -1, -9], 20000),
	]

	for case in testCase:
		if test_module.maxProduct(case[0]) != case[1]:
			raise RuntimeError("testMaxProduct failed!! %s" % case[0])


	print "testMaxProduct done!"

def testEvalRPN():
	testCase = [
		(["2", "1", "+", "3", "*"], 9), 
		(["4", "13", "5", "/", "+"], 6),
		(["0","3","/"], 0), (["18"], 18),
		(["10","6","9","3","+","-11","*","/","*","17","+","5","+"], 22),
	]

	for case in testCase:
		if test_module.evalRPN(case[0]) != case[1]:
			raise RuntimeError("testEvalRPN failed!! %s" % case[0])

	print "testEvalRPN done!"




tests = [
	# (testTwoSum, "def twoSum(nums, target):"),
	# (testAddTwoNumbers, "def addTwoNumbers(l1, l2):"),
	# (testLongestSubstring, "def lengthOfLongestSubstring(s):"),
	# (testLongestPalindrome, "def longestPalindrome(s):"),
	# (testMaxArea, "def maxArea(height):"),
	# (testThreeSum, "def threeSum(nums):"),
	# (testThreeSumClosest, "def threeSumClosest(nums, target):"),
	# (testLetterCombinations, "def letterCombinations(digits, dict):"),
	# (testFourSum, "def fourSum(nums, target):"),
	# (testGenerateParenthesis, "def generateParenthesis(n):"),
	# (testSwapPairs, "def swapPairs(head):\n\ndef swapPairs2(head):"), 
	# (testDivide, "def divide(a, b):"), 

	# (testNextPermutation, "def nextPermutation(nums):"), 
	# (testSearchRange, "def searchRange(nums, target):"),
	# (testSearchInsert, "def searchInsert(nums, target):"),
	# (testCombinationSum, "def combinationSum(candidates, target):"),
	# (testCombinationSum2, "def combinationSum2(candidates, target):"), 
	# (testMultiplyString, "def multiplyString(num1, num2):"),
	# (testPermutations, "def permute(nums):"), 
	# (testRotateMatrix, "def rotateMatrix(matrix):"),
	# (testAnagrams, "def anagrams(strs):"),
	# (testPow, "def pow(x, n):\n\ndef pow2(x, n):"),

	# (testMaxSubArray, "def maxSubArray(nums):"),
	# (testSpiralOrder, "def spiralOrder(matrix):"), 
	# (testJumpGame, "def canJump(nums):"),
	# (testGenerateMatrix, "#Tag: Array\ndef generateMatrix(n):"),
	# (testGetPermutation, "#Tag: Backtracking Math\ndef getPermutation(n, k):"),
	# (testRotateRight, "#Tag: Linked List Two Pointers\ndef rotateRight(head, k):"),
	# (testUniquePaths, "#Tag: Array, Dynamic Programming\ndef uniquePaths(m, n):\n\n\ndef uniquePaths2(m, n):"),
	# (testUniquePathsWithObstacles, "#Tag: Array, Dynamic Programming\ndef uniquePathsWithObstacles(obstacleGrid):"),
	# (testMinPathSum, "#Tag: Array, Dynamic Programming\ndef minPathSum(grid):"),
	# (testMySqrt, "#Tag: Math, Binary Search\ndef mySqrt(x):\n\n\ndef mySqrt2(x):"),

	# (testSetZeroes, "#tag: Array\ndef setZeroes(matrix):"), 
	# (testSearchMatrix, "#Tad: Binary Search, Array\ndef searchMatrix(matrix, target):"),
	# (testSortColors, "#Tag: Array, Two Pointers, Sort\ndef sortColors(nums):\n\n\ndef sortColors2(nums):"),
	# (testNumCombine, "#Tag: Backtracking\ndef numCombine(n, k):\n\n\ndef numCombine2(n, k):"),
	# (testSubsets, "#Tag: Array, Backtracking, Bit Manipulation\ndef subsets(nums):\n\n\ndef subsets2(nums):"),
	# (testWordSearch, "#Tag:  Array, Backtracking\ndef wordSearch(board, word):"),
	# (testRemoveDuplicates2, "#tag: Array, Two Pointers\ndef removeDuplicates2(nums):"), 
	# (testSearchInRotatedSortedArray, "#Tag: Array, Binary Search\ndef searchInRotatedSortedArray(nums, target):"),
	# (testDeleteDuplicatesSL2, "#Remove Duplicates from Sorted List II \ndef deleteDuplicates(head):\n\n\ndef deleteDuplicates2(head):"),
	# (testPartitionList, "#Tag: Linked List, Two Pointers\ndef partitionList(head, x):"),

	# (testGrayCode, "#Tag: Backtracking\ndef grayCode(n):\n\n\ndef grayCode2(n):"),
	# (testNumDecodings, "#Dynamic Programming, String\ndef numDecodings(s):"),
	# (testSubsetsWithDup, "#Array, Backtracking\ndef subsetsWithDup(nums):"),
	# (testReverseBetween, "#Tag: Linked list\ndef reverseBetween(head, m, n):"),
	# (testRestoreIpAddresses, "#Tag: Backtracking, String\ndef restoreIpAddresses(s):"),
	# (testInorderTraversal, "#Tag: Tree, Hash Table, Stack\ndef inorderTraversal(root):\n\n\ndef inorderTraversal2(root):"),
	# (testNumTrees, '#Tree, Dynamic Programming\ndef numTrees(n):'),
	# (testGenerateTrees, "#Tree, Dynamic Programming\ndef generateTrees(n):"),
	# (testIsValidBST, "# Tree, Depth-first Search\ndef isValidBST(root):"),
	# (testZigzagLevelOrder, "#Tag: Tree, Breadth-first Search, Stack\ndef zigzagLevelOrder(root):"),

	(testBuildTreeFromPreIn, "#Tag: Tree, Array, Depth-first Search\ndef buildTreeFromPreIn(preorder, inorder):"),
	(testBuildTreeFromPostIn, "#Tag: Tree, Array, Depth-first Search\ndef buildTreeFromPostIn(postorder, inorder):"),
	(testSortedArrayToBST, "#Tag:Tree, Depth-first Search\ndef sortedArrayToBST(nums):"),
	(testSortedListToBST, "#Tag: Depth-first Search, Linked List\ndef sortedListToBST(head):"),
	(testFlatten, "#Tag: Tree, Depth-first Search\ndef flatten(root):\n\n\ndef flatten2(root):"),
	(testPathSum, "#Tag: Tree, Depth-first Search\ndef pathSum(root, sum):"),
	(testConnectTree, "#Tag: Tree, Depth-first Search\ndef connectTree(root):"), 
	(testMinimumTotal, "#Array, Dynamic Programming\ndef minimumTotal(triangle):"),
	(testMaxProfit, "#Tag: Array, Dynamic Programming\ndef maxProfit(prices):"),
	(testMaxProfit2, "#Tag: Array, Greedy\ndef maxProfit2(prices):"),

	(testSumNumbers, "#Tag: Tree, Depth-first Search\ndef sumNumbers(root):"),
	(testWordLadder, "def wordLadder(beginWord, endWord, wordList):"),
	(testSurroundedRegons, "#Tag:Breadth-first Search, Union Find\ndef surroundedRegons(board):"),
	(testPalindromePartition, "#Tag:Backtracking\ndef palindromePartition(s):"),
	(testCloneGraph, "#Tag:Depth-first Search, Breadth-first Search, Graph\ndef cloneGraph(node):"),
	(testCanCompleteCircuit, "#tag: Greedy\ndef canCompleteCircuit(gas, cost):"),
	(testSingleNumber, "#Tag: Hash Table, Bit Manipulation\ndef singleNumber(nums):"),
	(testSingleNumber2, "#Tag:Bit Manipulation\ndef singleNumber2(nums):"),
	(testWordBreak, "#Tag: Dynamic Programming\ndef wordBreak(s, wordDict):"),
	(testHasCycle, "#Tag:Linked List, Two Pointers\ndef hasCycle(head):"),

	# (testDetectCycle, "#Tag:Linked List, Two Pointers\ndef detectCycle(head):"),
	# (testReorderList, "#Tag: linked list\ndef reorderList(head):"),
	# (testPreorderTraversal, "#Tag:Tree, Stack\ndef preorderTraversal(root):\n\n\ndef preorderTraversal2(root):"),
	# (testPostorderTraversal, "#Tag:Tree, Stack\ndef postorderTraversal(root):\n\n\ndef postorderTraversal2(root):"),
	# (testSingleNumber3, "#Tag:  Bit Manipulation\ndef singleNumber3(nums):"),
	# (testInsertionSortList, "#Linked List, Sort\ndef insertionSortList(head):"),
	# (testQuickSortLinkedList, "#Tag:Linked List, Sort\ndef quickSortLinkedList(head):"),
	# (testMergeSortLinkedList, "#Tag:Linked List, Sort\ndef mergeSortLinkedList(head):"),
	# (testEvalRPN, "#Tag: Stack\ndef evalRPN(tokens):"),
	# (testMaxProduct, "#Array, Dynamic Programming\ndef maxProduct(nums):"),
]	

import os
import sys
import os
import sys
import shutil

def increaseSolvedCnt( d ):
	tempName = os.path.dirname(os.path.abspath( __file__ ));
	file1 = os.path.join(tempName, "history.txt")
	file2 = os.path.join(tempName, "history_temp.txt")
	
	cnt = 0
	try:
		with open(file1, 'r') as f:
			cnt = int(f.readline())
	except:
		pass

	cnt += d
	with open(file2, 'w') as f:
		f.write("%d" % cnt)

	shutil.move(file2, file1)
	return cnt



def askForQuit():
	while True:
		try:
			r = raw_input("\nquit? y/n: ")
			if r == 'y':
				exit()
			break
		except KeyboardInterrupt:
			exit()

def reloadModule():
	global test_module
	failed = False
	while True:
		try:
			if failed:
				raw_input("reolad test module failed..\n")
			reload(test_module)
			return
		except KeyboardInterrupt:
			exit()
		except:
			print sys.exc_info()[1]
			failed = True
			continue


def pause(msg, needReload = False):
	try:
		ret = raw_input(msg)
	except:
		exit()

	if needReload:
		reloadModule()

	return ret


def getQuestionCnt():
	while True:
		try:
			cnt = input("Please input number of questions:\n")
			break
		except KeyboardInterrupt:
			exit()
		except:
			continue

	return cnt

def initFuncs(testLst, fileName, cnt):
	cnt = min(len(testLst), cnt)
	f = open(fileName, "a")
	funcs = []
	for i in xrange(0, cnt):
		item = testLst.pop()
		print item[0].__name__
		funcs.append(item[0])
		f.write(item[1])
		f.write("\n\n\n\n\n\n\n\n\n")
	f.close()

	return funcs

def callFunc(func):
	global test_module

	while True:
		try:
			func()
			break
		except KeyboardInterrupt:
			askForQuit()
			reloadModule()
			continue
		except:
			print sys.exc_info()[1]
			pause("Press any keys to try again...\n", True)
			continue


def testFuncs(funcs):

	beginTime = time.time()
	while True:

		pause("Press any keys when ready....\n", True)

		idx = 0
		while idx < len(funcs):
			callFunc(funcs[idx])
			idx += 1

		if pause("try again? y/n\n") == 'n':
			break

	return time.time() - beginTime



def testEx():
	global test_module
	testLst = []
	while len(tests):
		idx = random.randint(0, len(tests)-1)
		testLst.append( tests.pop(idx) )
	
	tempName = os.path.dirname(os.path.abspath( __file__ ));
	tempName = os.path.join(tempName, "test_temp.py")
	
	f = open(tempName, "w")
	f.close()

	test_module = importlib.import_module('test_temp')


	cnt = getQuestionCnt()
	totalCnt = len(testLst)
	beginTime = time.time()
	progress = 0
	while len(testLst):
		try:
			funcs = initFuncs(testLst, tempName, cnt)
			timeUsed = testFuncs(funcs)
			totalProgress = increaseSolvedCnt(len(funcs))
			progress += len(funcs)
			print "====================(%d/%d, totalProgress:%d, totalTimeSpent:%d, currentTimeSpent:%d)==================" \
				% (progress, totalCnt, totalProgress, time.time() - beginTime, timeUsed)
		except KeyboardInterrupt:
			askForQuit()
				
	print "done!"
		
	


def test():
	global test_module
	test_module = importlib.import_module('ltc_medium')
	for test in tests:
		test[0]()
	print "\n\n\n"


test()
testEx()