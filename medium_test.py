import importlib
import random
import binary_tree
import linked_list

test_module = None
def randomString(size):
	s = ""
	for i in xrange(0, size):
		s += chr(random.randint(97,122))
	return s

def outputTopath(s):
	tempName = os.path.dirname(os.path.abspath( __file__ ));
	tempName = os.path.join(tempName, "output.txt")
	
	f = open(tempName, "a")
	f.write(s + "\n")

	f.close()

def testTwoSum():
	testCase = [
		([], 12, []),
		([2, 7, 11, 15], 9, [1,2]),
		([3,2,4], 6,[2,3]),
		([15, 59, 51, 96, 99, 13, 36, 51, 45, 72, 37, 97, 23, 1, 98, 62, 63], 131, [2, 10]),
		([58, 38, 67, 67, 80, 84, 99, 34, 57, 23, 32, 99, 58, 54, 95, 57, 37, 60], 280,[]),
		([8, 68, 11, 17, 30, 33, 76, 92, 79, 37, 31, 48, 55, 78, 65], 65, [4, 12]),
		([71, 18, 45, 83, 8, 53, 42, 42, 72, 19, 80, 74, 91, 90, 36, 20], 10, []),
		([68, 40, 67, 46, 78, 74, 25, 51, 80, 6, 51, 38, 36, 6, 74, 77, 98, 58, 84, 22], 18, []),
		([6, 99, 79, 6, 30, 68, 17, 14, 25, 50, 32, 83, 8, 53, 65, 60, 95, 32], 46, [8,18]),
		([41, 2, 30, 9, 62, 2, 49, 10, 33, 80, 100, 35, 44, 79, 70, 89, 17, 56, 2, 94], 47, [3, 17]),
		([5, 91, 83, 68, 16, 35, 79, 83, 48, 56], 152, []),
		([91, 21, 67, 82, 31, 48, 84, 99, 2, 76, 33, 30], 250, []),
		([45, 33, 42, 22, 78, 10, 35, 67, 19, 17, 33, 30], 94, []),
		([29, 84, 84, 38, 63, 10, 9, 84, 76, 21, 22, 16], 111, []),
		([4, 3, 29, 87, 39, 24, 33, 53, 73, 96, 48, 74, 22, 71], 110, [5, 14]),
		([78, 76, 75, 63, 66, 55, 86, 100, 96, 23, 100, 69, 60, 33, 74], 60, []),
		([83, 1, 12, 37, 67, 72, 62, 98, 82, 25, 68, 50, 85, 94, 65, 12, 15, 41, 30, 65], 13, [2, 16]),
		([73, 9, 45, 21, 24, 32, 66, 33, 16, 4, 80], 136, []),
		([23, 11, 73, 20, 84, 29, 29, 30, 91, 41, 75], 248, []),
		([22, 99, 31, 69, 97, 6, 47, 32, 74, 44, 31, 16, 19, 11, 69], 43, [8, 14]),
		([44, 2, 33, 54, 57, 23, 20, 59, 38, 76, 95, 19, 54, 94, 45, 20, 64, 4, 84], 262, []),
		([25, 6, 35, 6, 78, 7, 4, 69, 82, 30], 237, []),
		([63, 83, 24, 59, 96, 58, 47, 75, 12, 37, 90, 38], 149, [4, 11]),
	]

	for case in testCase:
		ret = 0
		for idx in test_module.twoSum(case[0], case[1]):
			ret += case[0][idx-1]
		for idx in case[2]:
			ret -= case[0][idx-1]

		if ret != 0:
			raise RuntimeError("testTwoSum failed!!")
	print "testTwoSum done!"

def testAddTwoNumbers():
	testCase = [
		(0, 123),
		(2, 12),
		(1, 99)
	]
	for i in xrange(0, 200):
		testCase.append( (random.randint(0,1999), random.randint(0,3000)) )
	for case in testCase:
		num1 = case[0]
		num2 = case[1]
		lst1, lst2 = [], []
		n1, n2 = num1, num2

		if num1 == 0:
			lst1.append(0)
		while num1:
			lst1.append(num1 % 10)
			num1 /= 10

		if num2 == 0:
			lst2.append(0)
		while num2:
			lst2.append(num2 % 10)
			num2 /= 10

		lst1 = linked_list.createLinkedLst(lst1)
		lst2 = linked_list.createLinkedLst(lst2)

		calc = int("".join(str(test_module.addTwoNumbers(lst1, lst2)).split(',')[::-1]))
		if n1 + n2 != calc:
			raise RuntimeError("testAddTwoNumbers failed", n1, n2)

	print "testAddTwoNumbers done!"

def testLongestSubstring():
	testCase = [
		("", 0), ("a", 1), ("abca", 3), ("aab", 2), ("tmmzuxt", 5),
		("vqblqcb", 4), ("jbpnbwwd", 4), ("eee", 1), ("au", 2)
	]

	for case in testCase:
		if test_module.lengthOfLongestSubstring(case[0]) != case[1]:
			print test_module.lengthOfLongestSubstring(case[0])
			raise RuntimeError("testLongestSubstring failed!! %s" % str(case[0]))

	print "testLongestSubstring done!"

def testLongestPalindrome():
	testCase = [
		("a", "a"), ("bb", "bb"), ("abb", "bb"), ("bba", "bb"),
		("wqwqabccba", "abccba"), ("abccbawqwq", "abccba"), ("abccbawqwq", "abccba")
	]
	for case in testCase:
		if test_module.longestPalindrome(case[0]) != case[1]:
			print test_module.longestPalindrome(case[0])
			raise RuntimeError("testLongestPalindrome failed!! %s" % str(case[0]))
			
	print "testLongestPalindrome done!"
	
	
def testMaxArea():
	testCase = [
		([1,1], 1), ([2,1], 1),
		([8, 12, 15, 8, 13, 5, 4], 36), ([13, 10, 12, 12, 8, 19, 12], 72),
		([17, 1, 7, 13, 20, 15, 16], 96), ([8, 13, 11, 18, 16, 11, 5], 44),
		([17, 1, 20, 20, 18, 9, 15], 90),([9, 4, 9, 20, 10, 4, 16], 54),
		([4, 15, 3, 11, 13, 5, 16], 75),([17, 12, 1, 16, 1, 17, 20], 102),
		([20, 10, 10, 14, 11, 19, 2], 95),([7, 6, 9, 6, 3, 3, 10], 42),
		([13, 4, 2, 2, 18, 10, 14], 78),([6, 13, 17, 7, 13, 7, 15], 65),
		([13, 15, 10, 13, 16, 15, 6], 65),([6, 2, 11, 12, 16, 16, 17], 44),
		([15, 18, 8, 20, 14, 19, 12], 75),
	]

	for case in testCase:
		if test_module.maxArea(case[0]) != case[1]:
			raise RuntimeError("testMaxArea failed!! %s" % str(case[0]) )
	print "testMaxArea done!"


def testThreeSum():
	testCase = [
		([], []),
		([-1,0,1], [[-1,0,1]]),
		([-1,1,0], [[-1,0,1]]),
		([-13, -7, -3, 2, 6, 9, 12, 15],[]),
		([-13, -12, -12, -5, -2, 10, 10, 11],[]),
		([-14, -10, -4, -4, -3, 3, 4, 13],[[-10, -3, 13]]),
		([-15, -14, -13, -13, -2, 7, 9, 14],[]),
		([-10, -9, -2, 1, 3, 4, 10, 15],[]),
		([-13, -13, -5, -2, -1, 0, 7, 11],[[-5, -2, 7]]),
		([-10, -10, 1, 2, 4, 5, 9, 12],[[-10, 1, 9]]),
		([-12, -11, -9, -9, -8, -4, -2, 14],[[-12, -2, 14]]),
		([-11, -1, 0, 0, 2, 4, 4, 14],[]),
		([-14, -11, -10, -1, 9, 11, 14, 15],[[-14, -1, 15], [-10, -1, 11]]),
		([-15, -13, -11, -10, -9, 5, 6, 9],[[-15, 6, 9], [-11, 5, 6]]),
		([-10, -4, 0, 8, 11, 11, 12, 12],[]),
		([-11, -11, -9, -4, 9, 12, 13, 14],[[-9, -4, 13]]),
		([-15, -8, -7, -7, 2, -10, 3, 12],[[-15, 3, 12]]),
		([-11, -11, -8, -7, 6, -10, 9, 10],[]),
		([-2,0,1,1,2], [[-2,0,2],[-2,1,1]]),
		([-15, -15, -15, -14, -14, -14, -14, -13, -13, -12, -12, -12, -12, -12, -12, -12,
		 -12, -11, -11, -11, -11, -10, -10, -10, -9, -9, -9, -9, -9, -9, -8, -8, -8, -8, 
		 -8, -8, -7, -7, -6, -6, -6, -5, -5, -5, -5, -4, -4, -4, -4, -3, -3, -3, -3, -3, 
		 -3, -2, -2, -2, -2, -2, -2, -2, -1, -1, -1, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 3, 
		 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8,8, 
		 9, 9, 9, 9, 10, 10, 10, 10, 10, 11, 11, 11, 12, 12, 12, 12, 12, 13, 13, 13, 14, 
		 14, 14, 14],[[-15, 1, 14], [-15, 2, 13], [-15, 3, 12], [-15, 4, 11], [-15, 5, 10], 
		 [-15, 6, 9], [-15, 7, 8], [-14, 0, 14], [-14, 1, 13], [-14, 2, 12], [-14,3, 11], 
		 [-14, 4, 10], [-14, 5, 9], [-14, 6, 8], [-14, 7, 7], [-13, -1, 14], [-13, 0, 13], 
		 [-13, 1, 12], [-13, 2, 11], [-13, 3, 10], [-13, 4, 9], [-13, 5, 8], [-13, 6, 7], 
		 [-12, -2, 14], [-12, -1, 13], [-12, 0, 12], [-12, 1, 11], [-12, 2, 10], [-12, 3, 9], 
		 [-12, 4, 8], [-12, 5, 7], [-12, 6, 6], [-11, -3, 14], [-11, -2,13], [-11, -1, 12], 
		 [-11, 0, 11], [-11, 1, 10], [-11, 2, 9], [-11, 3, 8], [-11,4, 7], [-11, 5, 6], 
		 [-10, -4, 14], [-10, -3, 13], [-10, -2, 12], [-10, -1, 11],[-10, 0, 10], [-10, 1, 9], 
		 [-10, 2, 8], [-10, 3, 7], [-10, 4, 6], [-10, 5, 5], [-9, -5, 14], [-9, -4, 13], 
		 [-9, -3, 12], [-9, -2, 11], [-9, -1, 10], [-9, 0, 9], [-9, 1, 8], [-9, 2, 7], 
		 [-9, 3, 6], [-9, 4, 5], [-8, -6, 14], [-8, -5, 13], [-8, -4, 12], [-8, -3, 11], 
		 [-8, -2, 10], [-8, -1, 9], [-8, 0, 8], [-8, 1, 7], [-8, 2, 6], [-8, 3, 5], [-8, 4, 4],
		  [-7, -7, 14], [-7, -6, 13], [-7, -5, 12], [-7, -4, 11], [-7, -3, 10], [-7, -2, 9],
		   [-7, -1, 8], [-7, 0, 7], [-7, 1, 6], [-7, 2,5], [-7, 3, 4], [-6, -6, 12], 
		   [-6, -5, 11], [-6, -4, 10], [-6, -3, 9], [-6, -2,8], [-6, -1, 7], [-6, 0, 6],
		   [-6, 1, 5], [-6, 2, 4], [-6, 3, 3], [-5, -5, 10], [-5, -4, 9], [-5, -3, 8], 
		   [-5, -2, 7], [-5, -1, 6], [-5, 0, 5], [-5, 1, 4], [-5,2, 3], [-4, -4, 8], 
		   [-4, -3, 7], [-4, -2, 6], [-4, -1, 5], [-4, 0, 4], [-4, 1, 3], [-4, 2, 2], 
		   [-3, -3, 6], [-3, -2, 5], [-3, -1, 4], [-3, 0, 3], [-3, 1, 2], [-2, -2, 4], [-2, -1, 3],
		    [-2, 0, 2], [-1, -1, 2], [-1, 0, 1], [0, 0, 0]]),
		]

	for case in testCase:
		if test_module.threeSum(case[0]) != case[1]:
			raise RuntimeError("testThreeSum failed!! %s", str(case[0]))

	print "testThreeSum done!"

def testThreeSumClosest():
	testCase = [
		([],0,0),
		([0,1,2], 3, 3),
		([-1, 0, 1], 0, 0),
		([-13, -7, -3, 2, 6, 9, 12, 15], 2, 2),
		([-13, -12, -12, -5, -2, 10, 10, 11], -2, -3),
		([-14, -10, -4, -4, -3, 3, 4, 13], -2, -1),
		([-15, -14, -13, -13, -2, 7, 9, 14], -4, -3),
		([-10, -9, -2, 1, 3, 4, 10, 15], 1, 1),
		([-13, -13, -5, -2, -1, 0, 7, 11], -2, -2),
		([-10, -10, 1, 2, 4, 5, 9, 12], 1, 1),
		([-12, -11, -9, -9, -8, -4, -2, 14], -6, -6),
		([-11, -1, 0, 0, 2, 4, 4, 14], 1, 1),
		([-14, -11, -10, -1, 9, 11, 14, 15], 1, 0),
		([-15, -13, -11, -10, -9, 5, 6, 9], -5, -4),
		([-10, -4, 0, 8, 11, 11, 12, 12], 5, 4),
		([-11, -11, -9, -4, 9, 12, 13, 14], 1, 1),
		([-15, -8, -7, -7, 2, 3, -10, 12], -4, -5),
		([-11, -11, -10, -8, -7, 6, 9, 10], -3, -5),
		([-15, -15, -15, -14, -14, -14, -14, -13, -13, -12, -12, -12, -12, -12, -12, -12, -12, -11, -11, -11, -11, -10, -10, -10, -9, -9, -9, -9, -9, -9, -8, -8, -8, -8, -8, -8, -7, -7, -6, -6, -6, -5, -5, -5, -5, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -2, -2, -2, -2, -2, -2, -2, -1, -1, -1, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8,8, 9, 9, 9, 9, 10, 10, 10, 10, 10, 11, 11, 11, 12, 12, 12, 12, 12, 13, 13, 13, 14, 14, 14, 14], -1, -1),
	]

	for case in testCase:
		if test_module.threeSumClosest(case[0], case[1]) != case[2]:
			raise RuntimeError("testThreeSumClosest failed!! %s, %d" % (case[0], case[1]))

	print "testThreeSumClosest done!"

def testLetterCombinations():
	testCase = [
		("", []),
		("0", ['']),
		("9592", ['wjwa', 'xjwa', 'yjwa', 'zjwa', 'wkwa', 'xkwa', 'ykwa', 'zkwa', 'wlwa', 'xlwa', 'ylwa', 'zlwa', 'wjxa', 'xjxa', 'yjxa', 'zjxa', 'wkxa', 'xkxa', 'ykxa', 'zkxa', 'wlxa', 'xlxa', 'ylxa', 'zlxa', 'wjya', 'xjya', 'yjya', 'zjya', 'wkya', 'xkya', 'ykya', 'zkya', 'wlya', 'xlya', 'ylya', 'zlya', 'wjza', 'xjza', 'yjza', 'zjza', 'wkza', 'xkza', 'ykza', 'zkza', 'wlza', 'xlza', 'ylza', 'zlza', 'wjwb', 'xjwb', 'yjwb', 'zjwb', 'wkwb', 'xkwb', 'ykwb', 'zkwb', 'wlwb', 'xlwb', 'ylwb', 'zlwb', 'wjxb', 'xjxb', 'yjxb', 'zjxb', 'wkxb', 'xkxb', 'ykxb', 'zkxb', 'wlxb', 'xlxb', 'ylxb', 'zlxb', 'wjyb', 'xjyb', 'yjyb', 'zjyb', 'wkyb', 'xkyb', 'ykyb', 'zkyb', 'wlyb', 'xlyb', 'ylyb', 'zlyb', 'wjzb', 'xjzb', 'yjzb', 'zjzb', 'wkzb', 'xkzb', 'ykzb', 'zkzb', 'wlzb', 'xlzb', 'ylzb', 'zlzb', 'wjwc', 'xjwc', 'yjwc', 'zjwc', 'wkwc', 'xkwc', 'ykwc', 'zkwc', 'wlwc', 'xlwc', 'ylwc', 'zlwc', 'wjxc', 'xjxc', 'yjxc', 'zjxc', 'wkxc', 'xkxc', 'ykxc', 'zkxc', 'wlxc', 'xlxc', 'ylxc', 'zlxc', 'wjyc', 'xjyc', 'yjyc', 'zjyc', 'wkyc', 'xkyc', 'ykyc', 'zkyc', 'wlyc', 'xlyc', 'ylyc', 'zlyc', 'wjzc', 'xjzc', 'yjzc', 'zjzc', 'wkzc', 'xkzc', 'ykzc', 'zkzc', 'wlzc', 'xlzc', 'ylzc', 'zlzc']),
		("25", ['aj', 'bj', 'cj', 'ak', 'bk', 'ck', 'al', 'bl', 'cl']),
		("55", ['jj', 'kj', 'lj', 'jk', 'kk', 'lk', 'jl', 'kl', 'll']),
		("762", ['pma', 'qma', 'rma', 'sma', 'pna', 'qna', 'rna', 'sna', 'poa', 'qoa', 'roa', 'soa', 'pmb', 'qmb', 'rmb', 'smb', 'pnb', 'qnb', 'rnb', 'snb', 'pob', 'qob', 'rob', 'sob', 'pmc', 'qmc', 'rmc', 'smc', 'pnc', 'qnc', 'rnc', 'snc', 'poc', 'qoc', 'roc', 'soc']),
		("56", ['jm', 'km', 'lm', 'jn', 'kn', 'ln', 'jo', 'ko', 'lo']),
		("427", ['gap', 'hap', 'iap', 'gbp', 'hbp', 'ibp', 'gcp', 'hcp', 'icp', 'gaq', 'haq', 'iaq', 'gbq', 'hbq', 'ibq', 'gcq', 'hcq', 'icq', 'gar', 'har', 'iar', 'gbr', 'hbr', 'ibr', 'gcr', 'hcr', 'icr', 'gas', 'has', 'ias', 'gbs', 'hbs', 'ibs', 'gcs', 'hcs', 'ics']),
		("643", ['mgd', 'ngd', 'ogd', 'mhd', 'nhd', 'ohd', 'mid', 'nid', 'oid', 'mge', 'nge', 'oge', 'mhe', 'nhe', 'ohe', 'mie', 'nie', 'oie', 'mgf', 'ngf', 'ogf', 'mhf', 'nhf', 'ohf', 'mif', 'nif', 'oif']),
		("836", ['tdm', 'udm', 'vdm', 'tem', 'uem', 'vem', 'tfm', 'ufm', 'vfm', 'tdn', 'udn', 'vdn', 'ten', 'uen', 'ven', 'tfn', 'ufn', 'vfn', 'tdo', 'udo', 'vdo', 'teo', 'ueo', 'veo', 'tfo', 'ufo', 'vfo']),
		("484", ['gtg', 'htg', 'itg', 'gug', 'hug', 'iug', 'gvg', 'hvg', 'ivg', 'gth', 'hth', 'ith', 'guh', 'huh', 'iuh', 'gvh', 'hvh', 'ivh', 'gti', 'hti', 'iti', 'gui', 'hui', 'iui', 'gvi', 'hvi', 'ivi']),
	]

	dict = ["","","abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"]
	for case in testCase:
		if test_module.letterCombinations(case[0], dict) != case[1]:
			raise RuntimeError("testLetterCombinations failed!! ")

	print "testLetterCombinations done!"

def testFourSum():
	testCase = [
		([-1,0,1,2,-1,-4], -1, [[-4,0,1,2],[-1,-1,0,1]]),
		([5,5,3,5,1,-5,1,-2], 4, [[-5,1,3,5]]),
		([-3,-2,-1,0,0,1,2,3], 0, [[-3,-2,2,3],[-3,-1,1,3],[-3,0,0,3],[-3,0,1,2],[-2,-1,0,3],[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]),
		([-497,-488,-488,-484,-463,-463,-442,-402,-397,-394,-384,-380,-361,-358,-355,-350,-344,-338,-333,-330,-328,-325,-305,-301,-292,-290,-272,-262,-220,-202,-189,-172,-166,-162,-137,-133,-121,-90,-69,-68,-55,-51,-50,-44,-44,-38,-36,-14,-4,15,22,38,75,91,110,148,155,157,160,166,170,191,205,215,219,223,223,235,255,267,277,280,282,300,314,315,330,361,393,412,419,461,478,497], -2057, []),
	]

	for case in testCase:
		if sorted(test_module.fourSum(case[0], case[1])) != sorted(case[2]):
			raise RuntimeError("testFourSum failed!!")

	print "testFourSum done!"

def testGenerateParenthesis():
	testCase = [
		(0, []),
		(1, ["()"]),
		(2, ["(())","()()"]),
		(3,['((()))', '(()())', '(())()', '()(())', '()()()']),
		(4, ['(((())))', '((()()))', '((())())', '((()))()', '(()(()))', '(()()())', '(()())()', '(())(())', '(())()()', '()((()))', '()(()())', '()(())()', '()()(())', '()()()()']),
		
	]

	for case in testCase:
		if test_module.generateParenthesis(case[0]) != case[1]:
			raise RuntimeError("testGenerateParenthesis failed!! %s" % case[0])

	print "testGenerateParenthesis done!"

def testSwapPairs():
	testCase = [
		([], "None"),
		([0], "0"),
		([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "1,0,3,2,5,4,7,6,9,8,11,10,13,12,15,14,17,16,19,18"),
		([0, 1, 2], "1,0,2"),
		([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "1,0,3,2,5,4,7,6,9,8,11,10,12"),
		([0, 1, 2, 3, 4, 5, 6, 7, 8], "1,0,3,2,5,4,7,6,8"),
		([0, 1, 2, 3, 4, 5], "1,0,3,2,5,4"),
		([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], "1,0,3,2,5,4,7,6,9,8"),
		([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], "1,0,3,2,5,4,7,6,9,8,11,10"),
		([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], "1,0,3,2,5,4,7,6,9,8,11,10,13,12,15,14,17,16"),
		([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], "1,0,3,2,5,4,7,6,9,8,11,10,13,12,15,14,16"),
		([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], "1,0,3,2,5,4,7,6,9,8,11,10,13,12,14"),
		([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "1,0,3,2,5,4,7,6,9,8,11,10,12"),
		([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], "1,0,3,2,5,4,7,6,9,8,10"),
		([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "1,0,3,2,5,4,7,6,9,8,11,10,13,12,15,14"),
		([0, 1, 2], "1,0,2"),
		([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "1,0,3,2,5,4,7,6,9,8,11,10,13,12,15,14"),
		([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], "1,0,3,2,5,4,7,6,9,8,11,10,13,12,15,14,17,16"),
		([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], "1,0,3,2,5,4,7,6,9,8,10"),
		([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], "1,0,3,2,5,4,7,6,9,8,11,10,13,12"),
		([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], "1,0,3,2,5,4,7,6,9,8,11,10,13,12,15,14,17,16"),
		([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], "1,0,3,2,5,4,7,6,9,8,10"),
	]
	for case in testCase:
		ret = test_module.swapPairs( linked_list.createLinkedLst(case[0]) )
		ret2 = test_module.swapPairs2( linked_list.createLinkedLst(case[0]) )
		if str(ret) != case[1] or str(ret) != str(ret2):
			raise RuntimeError("testSwapPairs failed!!")

	print "testSwapPairs done!"

def testDivide():
	testCase = [
		(1,0,0),
		(-2,-1,2),
		(-5,2,-3),
		(5,-2,-3),
		(5,2,2),
		(2**31+1,1, 2**31-1),
		(2**31+2,-1, -2**31),
		(-(2**31+2),1, -2**31),
	]

	for i in xrange(0, 900):
		a = random.randint(0,500)
		b = random.randint(0,500)
		if random.randint(1,5) <= 2:
			a = -a
		if random.randint(1,5) <= 2:
			b = -b
		ret = a/b if b != 0 else 0
		testCase.append((a, b, ret))

	for case in testCase:
		if test_module.divide(case[0], case[1]) != case[2]:
			print test_module.divide(case[0], case[1]), 2 ** 31 - 1
			raise RuntimeError("testDivide failed!! %s" % str(case))

	print "testDivide done!"

def testNextPermutation():
	testCase = [
		([], []),
		([1], [1]),
		([1,3,2], [2,1,3]),
		([1,2], [2,1]),
		([1,2,3], [1,3,2]),
		([3,2,1], [1,2,3]),
		([5,5,5], [5,5,5]),
		([9, 4, 2, 8, 0, 6, 9], [9, 4, 2, 8, 0, 9, 6]),
		([9, 0, 9, 0, 9, 2, 1, 8], [9, 0, 9, 0, 9, 2, 8, 1]),
		([5, 2, 4, 4, 6, 7], [5, 2, 4, 4, 7, 6]),
		([1, 2, 1, 2, 4], [1, 2, 1, 4, 2]),
		([3, 8, 2, 0, 4, 0, 2], [3, 8, 2, 0, 4, 2, 0]),
		([1, 1, 3, 1, 9, 4], [1, 1, 3, 4, 1, 9]),
		([8, 6, 9, 6, 4, 3, 9, 1], [8, 6, 9, 6, 4, 9, 1, 3]),
		([9, 2, 2, 5, 9, 0, 5], [9, 2, 2, 5, 9, 5, 0]),
		([0, 1, 5, 9, 5, 0, 5], [0, 1, 5, 9, 5, 5, 0]),
		([5, 9, 8, 9, 6, 1, 8], [5, 9, 8, 9, 6, 8, 1]),
		([5, 0, 6, 1, 7, 6], [5, 0, 6, 6, 1, 7]),
		([0, 3, 3, 2, 5, 3, 2, 4], [0, 3, 3, 2, 5, 3, 4, 2]),
		([2, 4, 4, 5, 5, 5, 9], [2, 4, 4, 5, 5, 9, 5]),
		([6, 0, 8, 0, 6, 2, 4, 6], [6, 0, 8, 0, 6, 2, 6, 4]),
		([8, 9, 0, 1, 7], [8, 9, 0, 7, 1]),
		([8, 9, 2, 5, 1, 7, 2], [8, 9, 2, 5, 2, 1, 7]),
		([5, 6, 2, 2, 3], [5, 6, 2, 3, 2]),
		([9, 0, 7, 8, 9, 5, 2, 2], [9, 0, 7, 9, 2, 2, 5, 8]),
		([7, 0, 8, 9, 1, 2, 6], [7, 0, 8, 9, 1, 6, 2]),
		([0, 6, 2, 1, 9, 0], [0, 6, 2, 9, 0, 1]),
	]

	for case in testCase:
		temp = case[0]
		test_module.nextPermutation(case[0])
		if case[0] != case[1]:
			raise RuntimeError("testNextPermutation failed! %s" % case[0])

	print "testNextPermutation done!"

def testSearchRange():
	testCase = [
		([],1,[-1,-1]),
		([2,2], 1, [-1, -1]),
		([2,2], 3, [-1, -1]),
		([2,2,2,3], 2, [0, 2]),
		([1,2,2,2], 2, [1, 3]),
		([4, 5, 5, 5, 6, 7, 8, 10, 10], 7, [5, 5]),
		([3, 4, 4, 4, 5, 6, 8, 9, 10, 10], 1, [-1, -1]),
		([4, 4, 5, 7, 8, 8, 8], 12, [-1, -1]),
		([1, 1, 1, 1, 3, 5, 6, 6, 8, 10], 14, [-1, -1]),
		([1, 1, 2, 3, 6, 6, 7, 8, 9, 9], 5, [-1, -1]),
		([1, 2, 2, 3, 7, 7, 9], 9, [6, 6]),
		([1, 1, 2, 5, 8, 8, 10], 2, [2, 2]),
		([1, 1, 2, 2, 3, 7, 7, 7], 11, [-1, -1]),
		([3, 3, 5, 6, 6, 8, 10], 1, [-1, -1]),
		([1, 3, 4, 6, 9, 10, 10], 4, [2, 2]),
		([3, 5, 6, 6, 7, 8, 8, 9, 9, 10], 1, [-1, -1]),
		([1, 2, 2, 4, 6, 7, 9, 9, 10], 13, [-1, -1]),
		([1, 2, 2, 3, 4, 6, 7, 9, 9], 13, [-1, -1]),
		([2, 3, 3, 5, 5, 5, 9, 10, 10], 13, [-1, -1]),
		([1, 2, 2, 4, 5, 6, 7], 7, [6, 6]),
		([1, 2, 2, 3, 3, 4, 6, 9], 15, [-1, -1]),
		([2, 2, 5, 5, 6, 8, 9, 10, 10, 10], 5, [2, 3]),
		([1, 2, 3, 3, 3, 4, 4, 5, 8, 10], 12, [-1, -1]),
		([2, 3, 3, 4, 5, 5, 6, 7, 7, 9], 6, [6, 6]),
		([2, 5, 5, 5, 5, 8, 10], 5, [1, 4]),
	]


	for case in testCase:
		if test_module.searchRange(case[0], case[1]) != case[2]:
			raise RuntimeError("testSearchRange failed! %s" % str(case))

	print "testSearchRange done!"

def testSearchInsert():
	testCase = [
		([], 1, 0),
		([2, 2], 3, 2),
		([2, 2, 2, 3], 2, 0),
		([1, 2, 2, 2], 2, 1),
		([4, 5, 5, 5, 6, 7, 8, 10, 10], 7, 5),
		([3, 4, 4, 4, 5, 6, 8, 9, 10, 10], 1, 0),
		([4, 4, 5, 7, 8, 8, 8], 12, 7),
		([1, 1, 1, 1, 3, 5, 6, 6, 8, 10], 14, 10),
		([1, 1, 2, 3, 6, 6, 7, 8, 9, 9], 5, 4),
		([1, 2, 2, 3, 7, 7, 9], 9, 6),
		([1, 1, 2, 5, 8, 8, 10], 2, 2),
		([1, 1, 2, 2, 3, 7, 7, 7], 11, 8),
		([3, 3, 5, 6, 6, 8, 10], 1, 0),
		([1, 3, 4, 6, 9, 10, 10], 4, 2),
		([3, 5, 6, 6, 7, 8, 8, 9, 9, 10], 1, 0),
		([1, 2, 2, 4, 6, 7, 9, 9, 10], 13, 9),
		([1, 2, 2, 3, 4, 6, 7, 9, 9], 13, 9),
		([2, 3, 3, 5, 5, 5, 9, 10, 10], 13, 9),
		([1, 2, 2, 4, 5, 6, 7], 7, 6),
		([1, 2, 2, 3, 3, 4, 6, 9], 15, 8),
		([2, 2, 5, 5, 6, 8, 9, 10, 10, 10], 5, 2),
		([1, 2, 3, 3, 3, 4, 4, 5, 8, 10], 12, 10),
		([2, 3, 3, 4, 5, 5, 6, 7, 7, 9], 6, 6),
		([2, 5, 5, 5, 5, 8, 10], 5, 1),
	]

	for case in testCase:
		if test_module.searchInsert(case[0], case[1]) != case[2]:
			raise RuntimeError("testSearchInsert failed! %s" % str(case))

	print "testSearchInsert done!"

def testCombinationSum():
	testCase = [
		([92,71,89,74,102,91,70,119,86,116,114,106,80,81,115,99,117,93,76,77,111,110,75,104,95,112,94,73], 310, [[70, 70, 71, 99], [70, 70, 75, 95], [70, 70, 76, 94], [70, 70, 77, 93], [70, 70, 81, 89], [70, 71, 74, 95], [70, 71, 75, 94], [70, 71, 76, 93], [70, 71, 77, 92], [70, 71, 80, 89], [70, 73, 73, 94], [70, 73, 74, 93], [70, 73, 75, 92], [70, 73, 76, 91], [70, 73, 81, 86], [70, 74, 74, 92], [70, 74, 75, 91], [70, 74, 77, 89], [70, 74, 80, 86], [70, 75, 76, 89], [70, 77, 77, 86], [70, 80, 80, 80], [71, 71, 73, 95], [71, 71, 74, 94], [71, 71, 75, 93], [71, 71, 76, 92], [71, 71, 77, 91], [71, 73, 73, 93], [71, 73, 74, 92], [71, 73, 75, 91], [71, 73, 77, 89], [71, 73, 80, 86], [71, 74, 74, 91], [71, 74, 76, 89], [71, 75, 75, 89], [71, 76, 77, 86], [71, 77, 81, 81], [73, 73, 73, 91], [73, 73, 75, 89], [73, 74, 74, 89], [73, 74, 77, 86], [73, 75, 76, 86], [73, 75, 81, 81], [73, 76, 80, 81], [73, 77, 80, 80], [74, 74, 76, 86], [74, 74, 81, 81], [74, 75, 75, 86], [74, 75, 80, 81], [74, 76, 80, 80], [74, 117, 119], [75, 75, 80, 80], [75, 77, 77, 81], [75, 116, 119], [76, 76, 77, 81], [76, 77, 77, 80], [76, 115, 119], [76, 117, 117], [77, 114, 119], [77, 116, 117], [80, 111, 119], [80, 114, 116], [80, 115, 115], [81, 110, 119], [81, 112, 117], [81, 114, 115], [86, 110, 114], [86, 112, 112], [89, 102, 119], [89, 104, 117], [89, 106, 115], [89, 110, 111], [91, 102, 117], [91, 104, 115], [92, 99, 119], [92, 102, 116], [92, 104, 114], [92, 106, 112], [93, 102, 115], [93, 106, 111], [94, 99, 117], [94, 102, 114], [94, 104, 112], [94, 106, 110], [95, 99, 116], [95, 104, 111], [99, 99, 112], [102, 102, 106], [102, 104, 104]]),
		([2,3,6,7], 7, [[2, 2, 3], [7]]),
		([2,2,2,3,6,7], 7, [[2, 2, 3], [7]]),
		([13,15], 10, []),
		([],1, []),
		([8,7,4,3], 11, [[3, 4, 4], [3, 8], [4, 7]]),
		([1], 1, [[1]])
	]

	for case in testCase:
		if test_module.combinationSum(case[0], case[1]) != case[2]:
			raise RuntimeError("testCombinationSum failed! %s", str(case))
	print "testCombinationSum done!"

def testCombinationSum2():
	testCase = [
		([10,1,2,7,6,1,5], 8, [[1, 1, 6], [1, 2, 5], [1, 7], [2, 6]]),
		#([92,71,89,74,102,91,70,119,86,116,114,106,80,81,115,99,117,93,76,77,111,110,75,104,95,112,94,73], 310, [[70, 70, 71, 99], [70, 70, 75, 95], [70, 70, 76, 94], [70, 70, 77, 93], [70, 70, 81, 89], [70, 71, 74, 95], [70, 71, 75, 94], [70, 71, 76, 93], [70, 71, 77, 92], [70, 71, 80, 89], [70, 73, 73, 94], [70, 73, 74, 93], [70, 73, 75, 92], [70, 73, 76, 91], [70, 73, 81, 86], [70, 74, 74, 92], [70, 74, 75, 91], [70, 74, 77, 89], [70, 74, 80, 86], [70, 75, 76, 89], [70, 77, 77, 86], [70, 80, 80, 80], [71, 71, 73, 95], [71, 71, 74, 94], [71, 71, 75, 93], [71, 71, 76, 92], [71, 71, 77, 91], [71, 73, 73, 93], [71, 73, 74, 92], [71, 73, 75, 91], [71, 73, 77, 89], [71, 73, 80, 86], [71, 74, 74, 91], [71, 74, 76, 89], [71, 75, 75, 89], [71, 76, 77, 86], [71, 77, 81, 81], [73, 73, 73, 91], [73, 73, 75, 89], [73, 74, 74, 89], [73, 74, 77, 86], [73, 75, 76, 86], [73, 75, 81, 81], [73, 76, 80, 81], [73, 77, 80, 80], [74, 74, 76, 86], [74, 74, 81, 81], [74, 75, 75, 86], [74, 75, 80, 81], [74, 76, 80, 80], [74, 117, 119], [75, 75, 80, 80], [75, 77, 77, 81], [75, 116, 119], [76, 76, 77, 81], [76, 77, 77, 80], [76, 115, 119], [76, 117, 117], [77, 114, 119], [77, 116, 117], [80, 111, 119], [80, 114, 116], [80, 115, 115], [81, 110, 119], [81, 112, 117], [81, 114, 115], [86, 110, 114], [86, 112, 112], [89, 102, 119], [89, 104, 117], [89, 106, 115], [89, 110, 111], [91, 102, 117], [91, 104, 115], [92, 99, 119], [92, 102, 116], [92, 104, 114], [92, 106, 112], [93, 102, 115], [93, 106, 111], [94, 99, 117], [94, 102, 114], [94, 104, 112], [94, 106, 110], [95, 99, 116], [95, 104, 111], [99, 99, 112], [102, 102, 106], [102, 104, 104]]),
		([2,3,6,7], 7, [[7]]),
		([13,15], 10, []),
		([],1, []),
		([8,7,4,3], 11, [[3, 8], [4, 7]]),
		([1], 1, [[1]])
	]

	for case in testCase:
		if test_module.combinationSum2(case[0], case[1]) != case[2]:
			print test_module.combinationSum2(case[0], case[1])
			raise RuntimeError("testCombinationSum2 failed! %s", str(case))
	print "testCombinationSum2 done!"

def testMultiplyString():
	testCase = [
		(0,12,0),
		(0,0,0),
	]
	for i in xrange(0, 100):
		a = random.randint(0, 10000)
		b = random.randint(0,10000)
		testCase.append((a, b, a*b))

	for case in testCase:
		if test_module.multiplyString(str(case[0]), str(case[1])) != str(case[2]):
			raise RuntimeError("testMultiplyString failed!! %s" % (str(case)))

	print "testMultiplyString done!"

def testPermutations():
	testCase = [
		([1,2,3], [ [1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], [3,2,1] ]),
		([], []),
	]

	for case in testCase:
		if sorted(test_module.permute(case[0])) != case[1]:
			print sorted(test_module.permute(case[0]))
			raise RuntimeError("testPermutations failed!!")

	print "testPermutations done!"

def testRotateMatrix():
	testCase = [
		([], []),
		([[1,2],[3,4]], [[3,1],[4,2]]),
		([[1,2,3],[4,5,6],[7,8,9]], [[7, 4, 1], [8, 5, 2], [9, 6, 3]]),
		([[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]], [[13, 9, 5, 1], [14, 10, 6, 2], [15, 11, 7, 3], [16, 12, 8, 4]])
	]

	for case in testCase:
		test_module.rotateMatrix(case[0])
		if case[0] != case[1]:
			raise RuntimeError("testRotateMatrix failed!! %s" % str(case[0]))

	print "testRotateMatrix done!"

def testAnagrams():
	def generateAnagrams(size):
		s = randomString(size)
		retSize = random.randint(2,7)
		ret = set()
		ret.add(s)
		cnt = 50
		while cnt and len(ret) < retSize:
			randLst = []
			while len(randLst) < size:
				val = random.randint(0, size-1)
				if val not in randLst:
					randLst.append(val)
			s2 = "".join([ s[x] for x in randLst ] )
			ret.add(s2)
			cnt -= 1

		return list(ret)

	testCase = [
		([], []),
		(["tea","and","ate","eat","dan"], ["and","dan","tea","ate","eat"]),
	]
	for i in xrange(0, 20):
		toCheck = set()
		lst1 = generateAnagrams(5)
		lst2 = generateAnagrams(4)
		odd1 = lst1[0]
		odd2 = lst2[0]
		for i in xrange(0, 26):
			c = chr(ord('a') + i)
			if odd1[:-1] + c not in lst1 and random.randint(1,10) == 1:
				toCheck.add(odd1[:-1] + c)
			if odd2[:-1] + c not in lst2 and random.randint(1,10) == 1:
				toCheck.add(odd2[:-1] + c)

		ret = set()
		for item in lst1:
			if len(lst1) > 1:
				ret.add(item)
			toCheck.add(item)
		for item in lst2:
			if len(lst2) > 1:
				ret.add(item)
			toCheck.add(item)
		testCase.append((list(toCheck), list(ret)))

	for case in testCase:
		if sorted(test_module.anagrams(case[0])) != sorted(case[1]):
			raise RuntimeError("testAnagrams failed!!")
	print "testAnagrams done!"

def testPow():
	testCase = [
		(0, 1, 0),
	]
	for i in xrange(0, 200):
		x = random.randint(0, 100)
		if random.randint(1,3) == 2:
			x = x / 10.0000
		if random.randint(1,3) == 2:
			x = -x
		n = random.randint(-10,10)
		ret = 0
		if x == 0.0 and n < 0:
			ret = 0
		else:
			ret = x ** n

		testCase.append((x, n, ret))
	for case in testCase:
		if abs(case[2] - test_module.pow(case[0], case[1])) > 0.001 or\
			abs(case[2] - test_module.pow2(case[0], case[1])) > 0.001:
			raise RuntimeError("testPow failed!! %s" % str(case))

	print "testPow done!"


def testMaxSubArray():
	testCase = [
		([], 0),
		([-64, -20, 81, -69, 3, -91, -31, -85, 46, -69, 20, 9, -98, 93, -79, 75, -41, -41, 23, 29], 93),
		([67, 68, 86, -91, 90, 27, 66, -57, 93, -48, -74, -75, -90, -64, 86, 53, 47, -44, 19, -11], 349),
		([81, -27, 43, 85, 71, -76, -64, 91, -31, 37, -69, -49, -86, -43, 64, 88, -72, 93, -29, -60], 253),
		([-71, 93, -71, 25, -33, -41, -58, -58, 74, 67, 67, -9, 65, 33, 75, 21, -54, 30, 78, -56], 447),
		([-76, -20, 93, 56, 72, 70, 67, 66, 33, 41, 46, 77, -35, 76, 77, -73, -57, 68, 89, -51], 766),
		([93, 57, 84, -62, 16, 19, 17, 27, -50, -60, -94, 41, 94, 41, 96, 64, 70, -12, -86, -22], 453),
		([31, 89, 87, 11, -92, 83, -78, -10, 76, -49, 46, -7, -40, -95, 88, 28, 69, -22, -91, 30], 237),
		([-82, 82, 14, -75, 98, -25, 46, -96, 65, -62, -9, -25, -81, -100, 8, 14, -69, -55, -36, -51], 140),
		([37, -57, -73, -37, -19, 4, 79, 61, -88, 31, -90, -76, 43, 14, -72, 16, 65, -73, -34, 8], 144),
		([-33, 66, 48, 17, -9, -49, -47, 49, 55, -48, -9, -32, -14, -76, -95, -80, 72, 25, -89, 41], 131),
		([-62, -84, -65, 49, 20, -74, 49, -30, -10, -44, -18, 82, -61, 54, -29, -38, -43, 7, -29, -55], 82),
		([-24, -33, -54, -92, -69, -9, -71, -22, 55, -89, -15, -31, 61, 5, -19, -35, -33, -88, 41, -76], 66),
		([-93, 99, -6, 85, -18, 49, -65, -26, 94, -90, -74, 99, 39, 48, 96, 6, -64, -99, 31, -100], 336),
		([-36, -95, 13, -76, -99, -4, 10, -87, -89, -86, -92, -94, 67, 40, 29, 22, -89, 9, -37, -80], 158),
		([-88, 58, 74, -100, -36, -50, -95, 30, 18, -50, -55, 77, 15, 24, -40, -49, -33, 59, -83, -62], 132),
		([-33, 19, 8, 76, 42, 11, 90, 88, -94, 24, 70, -45, -71, -51, 55, -9, 80, -78, -6, 60], 334),
		([-49, 88, -28, 90, 29, 41, -95, 56, -8, -25, -72, -96, -31, 65, 83, -94, -26, -7, -89, -66], 220),
		([67, -90, 48, -33, 61, -29, 75, 35, 31, -59, 8, -22, 60, -15, 18, -71, -56, -59, -10, 90], 188),
		([73, -48, -70, 9, 67, 48, -76, 65, 8, 94, -68, -12, -34, -67, 87, -58, 25, -17, -57, 67], 215),
		([-75, 41, -57, -27, -48, -57, -97, 15, 13, -96, 8, -40, -55, 62, -41, 68, 0, 20, -55, 3], 109),
	]

	for case in testCase:
		if test_module.maxSubArray(case[0]) != case[1]:
			raise RuntimeError("testMaxSubArray failed!!")

	print "testMaxSubArray done!"

def testSpiralOrder():
	testCase = [
		([], []),
		([[ 1, 2, 3 ],[ 4, 5, 6 ],[ 7, 8, 9 ]], [1,2,3,6,9,8,7,4,5]),
		([[7],[9],[6]], [7,9,6]),
		([[7,9,6]], [7,9,6]),
		([[ 1, 2, 3, 10 ],[ 4, 5, 6, 11 ],[ 7, 8, 9, 12 ]], [1, 2, 3, 10, 11, 12, 9, 8, 7, 4, 5, 6]),
	]

	for case in testCase:
		if test_module.spiralOrder(case[0]) != case[1]:
			raise RuntimeError("testSpiralOrder failed! %s" % str(case[0]))

	print "testSpiralOrder done!"

def testJumpGame():
	testCase = [
		([], False),
		([0], True),
		([0,1], False),
		([2,3,1,1,4], True),
		([3,2,1,0,4], False),
		([4, 4, 4, 8, 7, 10, 7, 1, 8, 4, 9, 9, 1, 5, 6, 0, 10, 0, 3, 1], True),
		([1, 1, 0, 6, 6, 0, 7, 10, 6, 4, 6, 5, 2, 1, 0, 7, 4, 6, 9, 0], False),
		([10, 9, 5, 4, 0, 8, 3, 4, 1, 5, 3, 2, 2, 8, 9, 3, 5, 1, 4, 1], True),
		([0, 8, 6, 3, 7, 5, 0, 0, 6, 8, 10, 6, 1, 4, 9, 1, 2, 10, 4, 5], False),
		([9, 4, 8, 4, 3, 4, 5, 8, 9, 0, 6, 6, 4, 7, 7, 1, 4, 2, 9, 8], True),
		([10, 0, 2, 6, 5, 10, 8, 4, 5, 10, 8, 10, 0, 10, 10, 0, 8, 3, 0, 2], True),
		([8, 2, 3, 0, 6, 2, 8, 4, 2, 3, 5, 3, 4, 6, 5, 3, 10, 8, 10, 3], True),
		([0, 6, 10, 4, 6, 4, 4, 7, 2, 1, 2, 1, 6, 2, 2, 1, 4, 0, 2, 3], False),
		([9, 2, 10, 6, 0, 7, 1, 5, 0, 4, 8, 8, 5, 2, 10, 9, 10, 4, 0, 7], True),
	]

	for case in testCase:
		if test_module.canJump(case[0]) != case[1]:
			raise RuntimeError("testJumpGame failed!! %s" % case[0])
	print "testJumpGame done!"

def testGenerateMatrix():
	testCase = [
		(0, []),
		(1, [[1]]),
		(2, [[1, 2], [4, 3]]),
		(3, [[1, 2, 3], [8, 9, 4], [7, 6, 5]]),
		(4, [[1, 2, 3, 4], [12, 13, 14, 5], [11, 16, 15, 6], [10, 9, 8, 7]]),
		(5, [[1, 2, 3, 4, 5], [16, 17, 18, 19, 6], [15, 24, 25, 20, 7], [14, 23, 22, 21, 8], [13, 12, 11, 10, 9]]),
	]
	for case in testCase:
		if test_module.generateMatrix(case[0]) != case[1]:
			raise RuntimeError("testGenerateMatrix failed!! %d" % case[0])

	print "testGenerateMatrix done!"

def testGetPermutation():
	testCase = [
		(3,5, "312"),(2,1, "12"),(7,60,"1254763"),(0,99,""),(2,53,""),
		(1,32,""),(9,38,"123468597"),(4,69,""),(4,12,"2431"),(7,50,"1253476"),
		(9,99,"123495768"),(5,53,"31524"),(6,58,"143562"),(5,81,"42315"),
		(0,43,""),(9,5,"123456978"),(1,39,""),(3,97,""),(2,43,""),
		(6,92,"156243"),(4,11,"2413"),(5,97,"51234"),
	]

	for case in testCase:
		if test_module.getPermutation(case[0], case[1]) != case[2]:
			raise RuntimeError("testGetPermutation failed!! %d %d" % (case[0], case[1]))
	print "testGetPermutation done!"


def testRotateRight():
	testCase = [
		([1, 2, 3], 1, "3,1,2"),
		([1], 0, "1"),
		([1, 2, 3], 2000000000, "2,3,1"),
		([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], 6, "9,10,11,12,13,14,1,2,3,4,5,6,7,8"),
		([1, 2, 3, 4, 5], 20, "1,2,3,4,5"),
		([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], 24, "5,6,7,8,9,10,11,12,13,14,1,2,3,4"),
		([1, 2, 3, 4, 5, 6, 7, 8], 3, "6,7,8,1,2,3,4,5"),
		([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 18, "3,4,5,6,7,8,9,10,1,2"),
		([1, 2, 3, 4], 2, "3,4,1,2"),
		([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], 7, "5,6,7,8,9,10,11,1,2,3,4"),
		([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], 38, "5,6,7,8,9,10,11,12,13,14,1,2,3,4"),
		([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], 7, "5,6,7,8,9,10,11,1,2,3,4"),
		([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], 0, "1,2,3,4,5,6,7,8,9,10,11,12,13"),
		([1, 2, 3, 4], 20, "1,2,3,4"),
		([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], 49, "4,5,6,7,8,9,10,11,12,13,1,2,3"),
		([1, 2, 3, 4], 1, "4,1,2,3"),
		([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], 5, "7,8,9,10,11,1,2,3,4,5,6"),
		([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], 61, "6,7,8,9,10,11,1,2,3,4,5"),
		([1, 2, 3, 4, 5, 6], 4, "3,4,5,6,1,2"),
		([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], 44, "5,6,7,8,9,10,11,12,1,2,3,4"),
		([1, 2, 3, 4, 5, 6], 18, "1,2,3,4,5,6"),
		([1, 2, 3, 4, 5], 20, "1,2,3,4,5"),
		([1, 2, 3, 4, 5, 6, 7, 8, 9], 41, "5,6,7,8,9,1,2,3,4"),	
	]

	for case in testCase:
		lst = linked_list.createLinkedLst(case[0])
		ret = str(test_module.rotateRight(lst, case[1]))
		if ret != case[2]:
			raise RuntimeError("testRotateRight failed!! %s %d" % (str(case[0]), case[1]))

	print "testRotateRight done!"

def testUniquePaths():
	testCase = [
		(2, 5, 5), (1,5,1),
		(93, 67, 2737158422982075697084497097760673619727797850),(74, 94, 1741221082007179243598649702544644964807931346000),(97, 40, 13300649953523781765341005255405500),
		(38, 65, 5397234129638871133346507775),(56, 32, 232059241971866600926656),(58, 99, 12535617790312130209999079686846049796655500),
		(51, 59, 18529000879706807531602016459016),(98, 92, 20727878870248140516019424202137444496555352602984696200),(40, 47, 2509852088803449039224400),
		(83, 59, 12047912578768747580968424546714111495600),(7, 39, 7059052),(51, 61, 62757830663187746413533383430396),
		(83, 58, 4991278068347052569258347312210131905320),(53, 84, 84542582990368368308183766933720166200),(95, 90, 674688620033024331087132967198641654628691999664753000),
		(98, 38, 1505274015358705198643403573005800),(46, 40, 1358272895117160656521440),(84, 35, 340811579728681083704279633490),
		(75, 8, 3477216600),(38, 13, 92263734836),(87, 21, 1944755294749129923060),(100, 32, 842689791195123863257531408000),
		(82, 16, 130815226545884704),(28, 76, 3559022103502725100714704),(26, 45, 4150132566624501912),(3, 32, 528),
		(48, 36, 177879702602584113899040),(48, 37, 410111536555957818156120),(96, 36, 60584438988157669745491463932800),(21, 79, 342163121308290625896),
	]

	for case in testCase:
		ret1 = test_module.uniquePaths2(case[0], case[1])
		ret2 = test_module.uniquePaths(case[0], case[1])
		if ret1 != ret2 or ret1 != case[2]:
			raise RuntimeError("testUniquePaths failed!! %s" % str(case))

	print "testUniquePaths done!"

def testUniquePathsWithObstacles():
	testCase = [
	([[1]], 0),
	([[0,0]], 1),
	([[0]], 1),
	([[1], [0], [0], [0]], 0),
	([[0, 1, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], 462),
	([[1, 0, 1], [0, 1, 0], [0, 0, 1], [0, 0, 0], [0, 0, 0]], 0),
	([[0], [0], [0], [0]], 1),
	([[0, 0, 0, 0]], 1),
	([[0, 0, 0, 0]], 1),
	([[0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 1]], 0),
	([[0], [0]], 1),
	([[0, 1], [1, 0], [0, 0], [0, 0], [0, 0], [0, 1]], 0),
	([[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [1, 0, 0, 0, 0]], 14),
	([[0, 0, 0], [0, 0, 0], [0, 1, 0]], 3),
	([[0, 0, 0, 1, 0], [0, 1, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], 11),
	([[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], 10),
	([[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]], 252),
	([[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0]], 112),
	([[0, 0, 0], [0, 1, 1]], 0),
	([[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 1, 0], [0, 0, 0, 0]], 8),
	([[0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 0], [0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0]], 13),
	([[0], [1]], 0),
	([[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]], 6),
	]
	for case in testCase:
		if test_module.uniquePathsWithObstacles(case[0]) != case[1]:
			raise RuntimeError("testUniquePathsWithObstacles failed!! %s" % str(case[0]))

	print "testUniquePathsWithObstacles done!"

def testMinPathSum():
	testCase = [
		([], 0),
		([[1,2],[1,1]], 3),
		([[1,3,1],[1,5,1],[4,2,1]], 7),
		([[1]], 1),
		([[8, 6, 4, 4, 2, 9, 7], [8, 8, 6, 2, 5, 1, 1], [1, 5, 4, 2, 4, 3, 8], [9, 4, 10, 8, 7, 7, 6], [6, 5, 8, 7, 4, 4, 6]], 50),
		([[4, 7], [4, 2], [10, 7], [7, 6], [1, 1], [1, 7], [1, 9]], 37),
		([[4, 9, 3, 1, 7, 9], [4, 1, 6, 10, 7, 10], [5, 4, 4, 3, 1, 6], [1, 2, 8, 4, 10, 10]], 37),
		([[9, 5, 7, 9, 8], [9, 6, 1, 8, 4], [3, 5, 1, 9, 1], [7, 2, 9, 3, 4], [5, 9, 5, 1, 10], [1, 2, 5, 6, 6]], 47),
		([[3, 6, 7, 5, 9, 3, 2], [6, 1, 10, 8, 10, 8, 8], [2, 3, 7, 5, 9, 10, 4], [2, 10, 7, 6, 4, 7, 3], [1, 2, 5, 1, 9, 8, 8]], 47),
		([[7], [9], [4], [9], [5], [4], [7]], 45),
		([[1, 6, 7, 4, 7, 9], [4, 6, 6, 10, 3, 9], [5, 8, 3, 10, 4, 8], [9, 7, 5, 10, 3, 1], [3, 7, 2, 1, 9, 2], [9, 5, 3, 3, 6, 7], [1, 7, 8, 5, 2, 7]], 45),
		([[7, 6], [3, 5], [6, 1], [1, 1]], 17),
		([[9, 2, 5, 8], [3, 9, 8, 9]], 33),
		([[3, 2, 2, 2], [5, 2, 1, 2], [4, 5, 5, 10], [2, 8, 3, 7], [1, 9, 10, 10], [7, 4, 3, 1]], 30),
	]

	for case in testCase:
		if test_module.minPathSum(case[0]) != case[1]:
			raise RuntimeError("testMinPathSum failed!! %s", str(case[0]))

	print "testMinPathSum done!"

def testMySqrt():
	testCase = [
		(8, 2),(0, 0),(1, 1),(6113, 78),(1842, 42),(2535, 50),
		(1647, 40),(5764, 75),(6866, 82),(7713, 87),(985, 31),(4383, 66),(358, 18),(5592, 74),(8434, 91),(4869, 69),
		(9414, 97),(830, 28),(4369, 66),(2935, 54),(1692, 41),(894, 29),(2681, 51),(8318, 91),(6321, 79),(9942, 99),
		(5923, 76),(1198, 34),(4573, 67),(4208, 64),(552, 23),(7635, 87),(3179, 56),(8699, 93),(4173, 64),(8182, 90),
	]

	for case in testCase:
		ret1 = test_module.mySqrt(case[0])
		ret2 = test_module.mySqrt2(case[0])
		if ret1 != ret2 or ret1 != case[1]:
			raise RuntimeError("testMySqrt failed!! %d" % case[0])

	print "testMySqrt done!"

def testSetZeroes():
	testCase = [
	([[0,0,0,5],[4,3,1,4],[0,1,1,4],[1,2,1,3],[0,0,1,1]], [[0,0,0,0],[0,0,0,4],[0,0,0,0],[0,0,0,3],[0,0,0,0]]),
	([[-4,-2147483648,6,-7,0],[-8,6,-8,-6,0],[2147483647,2,-9,-6,-10]], [[0,0,0,0,0],[0,0,0,0,0],[2147483647,2,-9,-6,0]]),
	([[5], [4], [0], [2], [1]], [[0], [0], [0], [0], [0]]),
	([[5], [4], [3], [0], [1]], [[0], [0], [0], [0], [0]]),
	([[15, 14, 13, 0, 11], [10, 0, 8, 7, 0], [0, 4, 3, 2, 1]], [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]),
	([[20, 19, 18, 17, 16], [15, 14, 0, 12, 11], [10, 9, 8, 7, 6], [5, 4, 3, 2, 1]], [[20, 19, 0, 17, 16], [0, 0, 0, 0, 0], [10, 9, 0, 7, 6], [5, 4, 0, 2, 1]]),
	([[20, 19, 18, 17, 16], [15, 14, 0, 12, 11], [10, 9, 8, 7, 0], [5, 4, 3, 2, 1]], [[20, 19, 0, 17, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [5, 4, 0, 2, 0]]),
	([[2], [1]], [[2], [1]]),
	([[12, 11, 10], [0, 8, 7], [6, 5, 4], [3, 0, 1]], [[0, 0, 10], [0, 0, 0], [0, 0, 4], [0, 0, 0]]),
	([[25, 24, 23, 22, 0], [20, 19, 0, 17, 0], [15, 14, 13, 12, 11], [10, 9, 8, 0, 6], [0, 4, 3, 0, 1]], [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 14, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]),
	([[0, 1]], [[0, 0]]),
	([[12, 11, 0, 9], [0, 0, 6, 5], [4, 0, 2, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]),
	([[5], [4], [0], [0], [1]], [[0], [0], [0], [0], [0]]),
	([[8, 0], [6, 5], [0, 3], [2, 0]], [[0, 0], [0, 0], [0, 0], [0, 0]]),
	([[8, 0], [0, 5], [4, 3], [0, 1]], [[0, 0], [0, 0], [0, 0], [0, 0]]),
	([[9, 8, 0], [6, 5, 4], [0, 2, 1]], [[0, 0, 0], [0, 5, 0], [0, 0, 0]]),
	([[5], [0], [3], [0], [1]], [[0], [0], [0], [0], [0]]),
	([[0, 5, 4], [0, 2, 1]], [[0, 0, 0], [0, 0, 0]]),
	([[10, 0], [8, 0], [0, 5], [0, 3], [2, 1]], [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]),
	([[0, 7, 0, 5], [4, 3, 2, 0]], [[0, 0, 0, 0], [0, 0, 0, 0]]),
	([[10, 9, 8, 7, 6], [5, 4, 3, 2, 0]], [[10, 9, 8, 7, 0], [0, 0, 0, 0, 0]]),
	([[25, 24, 23, 22, 21], [20, 19, 0, 17, 0], [0, 0, 13, 12, 11], [10, 9, 8, 7, 6], [5, 4, 3, 2, 1]], [[0, 0, 0, 22, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 7, 0], [0, 0, 0, 2, 0]]),
	([[4], [3], [2], [1]], [[4], [3], [2], [1]]),
	([[4, 3], [2, 1]], [[4, 3], [2, 1]]),
	([[6, 5, 4], [3, 2, 1]], [[6, 5, 4], [3, 2, 1]]),
	([[12, 0, 10], [9, 8, 0], [6, 5, 0], [3, 2, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]]),
	([[16, 0, 14, 13], [12, 0, 10, 9], [8, 0, 6, 5], [4, 3, 2, 1]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [4, 0, 2, 1]]),
	]

	for case in testCase:
		toCheck = str(case[0])
		test_module.setZeroes(case[0])
		if case[0] != case[1]:
			raise RuntimeError("testSetZeroes failed!! %s" % toCheck)

	print "testSetZeroes done!"

def testSearchMatrix():
	testCase = [
		([], 1, False),
		([[1,3]], 1, True),
		([[1]], 2, False),
		([[1,3]], 3, True),
		([[1],[3]], 3, True),
		([[1,3,5,7],[10,11,16,20],[23,30,34,50]], 3, True),
		([[1,3,5,7],[10,11,16,20],[23,30,34,50]], 10, True),
		([[1,3,5,7],[10,11,16,20],[23,30,34,50]], 20, True),
		([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]], 22, False),
		([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]], 22, False),
		([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]], 7, True),
		([[1]], 1, True),
		([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]], 20, False),
		([[1], [2]], 12, False),
		([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 8, True),
		([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]], 7, True),
		([[1, 2], [3, 4], [5, 6], [7, 8]], 5, True),
		([[1, 2, 3]], 13, False),
		([[1, 2, 3, 4, 5]], 5, True),
	]

	for case in testCase:
		if test_module.searchMatrix(case[0], case[1]) != case[2]:
			raise RuntimeError("testSearchMatrix failed!! %s, %d " % (str(case[0]), case[1]))

	print "testSearchMatrix done!"


tests = [
	#(testTwoSum, "def twoSum(nums, target):"),
	#(testAddTwoNumbers, "def addTwoNumbers(l1, l2):"),
	#(testLongestSubstring, "def lengthOfLongestSubstring(s):"),
	#(testLongestPalindrome, "def longestPalindrome(s):"),
	#(testMaxArea, "def maxArea(height):"),
	#(testThreeSum, "def threeSum(nums):"),
	#(testThreeSumClosest, "def threeSumClosest(nums, target):"),
	#(testLetterCombinations, "def letterCombinations(digits, dict):"),
	#(testFourSum, "def fourSum(nums, target):"),
	#(testGenerateParenthesis, "def generateParenthesis(n):"),
	#(testSwapPairs, "def swapPairs(head):\n\ndef swapPairs2(head):"), 
	#(testDivide, "def divide(a, b):"), 

	(testNextPermutation, "def nextPermutation(nums):"), 
	(testSearchRange, "def searchRange(nums, target):"),
	(testSearchInsert, "def searchInsert(nums, target):"),
	(testCombinationSum, "def combinationSum(candidates, target):"),
	(testCombinationSum2, "def combinationSum2(candidates, target):"), 
	(testMultiplyString, "def multiplyString(num1, num2):"),
	(testPermutations, "def permute(nums):"), 
	(testRotateMatrix, "def rotateMatrix(matrix):"),
	(testAnagrams, "def anagrams(strs):"),
	(testPow, "def pow(x, n):\n\ndef pow2(x, n):"),

	(testMaxSubArray, "def maxSubArray(nums):"),
	(testSpiralOrder, "def spiralOrder(matrix):"), 
	(testJumpGame, "def canJump(nums):"),
	(testGenerateMatrix, "#Tag: Array\ndef generateMatrix(n):"),
	(testGetPermutation, "#Tag: Backtracking Math\ndef getPermutation(n, k):"),
	(testRotateRight, "#Tag: Linked List Two Pointers\ndef rotateRight(head, k):"),
	(testUniquePaths, "#Tag: Array, Dynamic Programming\ndef uniquePaths(m, n):\n\n\ndef uniquePaths2(m, n):"),
	(testUniquePathsWithObstacles, "#Tag: Array, Dynamic Programming\ndef uniquePathsWithObstacles(obstacleGrid):"),
	(testMinPathSum, "#Tag: Array, Dynamic Programming\ndef minPathSum(grid):"),
	(testMySqrt, "#Tag: Math, Binary Search\ndef mySqrt(x):\n\n\ndef mySqrt2(x):"),

	#(testSetZeroes, "#tag: Array\ndef setZeroes(matrix):"), 
	#(testSearchMatrix, "#Tad: Binary Search, Array\ndef searchMatrix(matrix, target):"),
]	

import os
import sys
import os
import sys
import shutil

def increaseSolvedCnt( d ):
	tempName = os.path.dirname(os.path.abspath( __file__ ));
	file1 = os.path.join(tempName, "history.txt")
	file2 = os.path.join(tempName, "history_temp.txt")
	
	cnt = 0
	try:
		with open(file1, 'r') as f:
			cnt = int(f.readline())
	except:
		pass

	cnt += d
	with open(file2, 'w') as f:
		f.write("%d" % cnt)

	shutil.move(file2, file1)
	return cnt



def askForQuit():
	while True:
		try:
			r = raw_input("\nquit? y/n: ")
			if r == 'y':
				exit()
			break
		except KeyboardInterrupt:
			exit()

def reloadModule():
	global test_module
	failed = False
	while True:
		try:
			if failed:
				raw_input("reolad test module failed..\n")
			reload(test_module)
			return
		except KeyboardInterrupt:
			exit()
		except:
			print sys.exc_info()[1]
			failed = True
			continue


def pause(msg, needReload = False):
	try:
		ret = raw_input(msg)
	except:
		exit()

	if needReload:
		reloadModule()

	return ret


def getQuestionCnt():
	while True:
		try:
			cnt = input("Please input number of questions:\n")
			break
		except KeyboardInterrupt:
			exit()
		except:
			continue

	return cnt

def initFuncs(testLst, fileName, cnt):
	cnt = min(len(testLst), cnt)
	f = open(fileName, "a")
	funcs = []
	for i in xrange(0, cnt):
		item = testLst.pop()
		print item[0].__name__
		funcs.append(item[0])
		f.write(item[1])
		f.write("\n\n\n\n\n\n\n\n\n")
	f.close()

	return funcs

def callFunc(func):
	global test_module

	while True:
		try:
			func()
			break
		except KeyboardInterrupt:
			askForQuit()
			reloadModule()
			continue
		except:
			print sys.exc_info()[1]
			pause("Press any keys to try again...\n", True)
			continue


def testFuncs(funcs):

	while True:

		pause("Press any keys when ready....\n", True)

		idx = 0
		while idx < len(funcs):
			callFunc(funcs[idx])
			idx += 1

		if pause("try again? y/n\n") == 'n':
			break



def testEx():
	global test_module
	testLst = []
	while len(tests):
		idx = random.randint(0, len(tests)-1)
		testLst.append( tests.pop(idx) )
	
	tempName = os.path.dirname(os.path.abspath( __file__ ));
	tempName = os.path.join(tempName, "test_temp.py")
	
	f = open(tempName, "w")
	f.close()

	test_module = importlib.import_module('test_temp')


	cnt = getQuestionCnt()
	totalCnt = len(testLst)
	progress = 0
	while len(testLst):
		try:
			funcs = initFuncs(testLst, tempName, cnt)
			testFuncs(funcs)
			totalProgress = increaseSolvedCnt(len(funcs))
			progress += len(funcs)
			print "====================(%d/%d, totalProgress:%d)==================" % (progress, totalCnt, totalProgress)
		except KeyboardInterrupt:
			askForQuit()
				
	print "done!"
		
	


def test():
	global test_module
	test_module = importlib.import_module('ltc_medium')
	for test in tests:
		test[0]()
	print "\n\n\n"


test()
testEx()