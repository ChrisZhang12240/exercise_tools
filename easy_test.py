import importlib
import random
import binary_tree
import linked_list

test_module = None
def randomString(size):
	s = ""
	for i in xrange(0, size):
		s += chr(random.randint(97,122))
	return s

def testCompareVersion():
	testCase = [
	("1.0", "1.0", 0),
	("2.1.3", "2.2.3", -1),
	("2.5.3", "2.2.3", 1),
	("2.1.3", "2.1.3.0", 0),
	("2.1.3", "2.1.3.1", -1),
	("2.1.3.1.1.1", "2.1.3.0", 1),
	("1.1.3.1.1.1", "2.1.3.0", -1),
	]

	for case in testCase:
		ret = test_module.compareVersion(case[0], case[1])
		if not ret == case[2]:
			raise RuntimeError("comapre version failed %s, %s -> %d(%d)", case[0], case[1], ret, case[2])

	print "testCompareVersion done!"


def testHappyNumber():
	def isHappyNumber( n ):
	    def helper(n):
	        ret = 0
	        while n > 0:
	            t = n % 10
	            ret += t * t
	            n /= 10
	        return ret

	    num1 = num2 = n
	    while True:
	        num1 = helper(num1)
	        num2 = helper(helper(num2))
	        if num1 == 1:
	            return True
	        elif num1 == num2:
	            return False
	    return False

	for i in xrange(0, 333):
		i = random.randint(1,999999)
		if isHappyNumber(i) != test_module.isHappyNumber(i):
			raise RuntimeError("isHappyNumber failed: %d" % i)

	print "isHappyNumber done!"


def testInvertTree():
	testCase = [
		([434, 85, 521, 368, 581, 58, 192, 840, 10, 175, 699, 735, 9, 863, 798, 580, 632, 531, 240, 828, 483, 47, 744, 463, 517, 779, 662, 798, 370, 111, 386, 343, 186, 650], "434,85,521,58,368,483,581,10,#,192,370,463,517,580,840,9,47,175,240,#,386,#,#,#,#,531,#,699,863,#,#,#,#,111,186,#,343,#,#,#,#,632,735,#,#,#,#,#,#,#,#,#,662,#,798,650,#,744,828,#,#,#,779"),
		([887, 981, 867, 638, 384, 788, 466, 19, 552, 442, 110, 126, 596, 373, 533, 431, 784, 57, 162, 752, 179, 418, 975, 123, 548, 733, 92, 735, 444, 905], "887,867,981,638,#,975,#,384,788,905,#,19,466,784,#,#,#,#,110,442,552,752,#,57,126,431,444,533,596,733,#,#,92,123,373,418,#,#,#,#,548,#,#,#,735,#,#,#,#,162,#,#,#,#,#,#,#,#,179"),
		([533, 736, 391, 777, 790, 99, 210, 872, 341, 215, 885, 221, 665, 332, 13, 323, 503, 892, 813, 972, 328, 832, 234, 327, 644, 105, 630, 845, 328, 95, 247, 163, 569, 852], "533,391,736,99,503,665,777,13,210,#,#,644,#,#,790,#,95,105,341,630,#,#,872,#,#,#,163,215,#,569,#,813,885,#,#,#,221,#,#,#,832,#,892,#,332,#,845,#,972,323,#,#,852,#,#,234,328,#,#,#,247,327"),
		([590, 702, 147, 906, 279, 317, 473, 465, 981, 594, 603, 738, 653, 944, 276, 926, 352, 586, 812, 431, 157, 836, 200, 614, 375, 806, 875, 767, 871, 320, 809], "590,147,702,#,279,594,906,276,317,#,603,738,981,157,#,#,473,#,653,#,812,944,#,#,200,465,586,614,#,806,836,926,#,#,#,352,#,#,#,#,#,767,809,#,875,#,#,320,431,#,#,#,#,871,#,#,#,375"),
		([863, 302, 821, 180, 140, 769, 627, 283, 734, 660, 753, 646, 562, 804, 450, 241, 822, 799, 359, 451, 935, 673, 369, 824, 568, 198, 612, 155, 227, 755, 789, 908], "863,302,935,180,821,908,#,140,283,769,822,#,#,#,155,241,#,627,804,#,824,#,#,198,#,562,734,799,#,#,#,#,227,450,568,660,753,789,#,#,#,359,451,#,612,646,673,#,755,#,#,#,369"),
		([754, 942, 770, 277, 303, 260, 643, 967, 445, 865, 523, 514, 550, 867, 35, 490, 32, 602, 57, 63, 96, 42, 949, 245, 281, 239, 325, 611, 795, 15, 593, 86, 340], "754,277,942,260,303,770,967,35,#,281,643,#,865,949,#,32,57,#,#,445,#,795,867,#,#,15,#,42,63,325,523,#,#,#,#,#,#,#,#,#,96,#,340,514,550,86,245,#,#,490,#,#,602,#,#,239,#,#,#,593,611"),
		([915, 633, 90, 970, 580, 112, 906, 47, 514, 462, 781, 565, 769, 73, 396, 526, 62, 618, 154, 102, 207, 206, 182, 824, 344, 722, 889, 23, 331, 432, 847, 37, 689, 358, 527], "915,633,970,90,906,#,#,47,580,781,#,23,73,112,618,769,824,#,37,62,#,102,514,#,#,722,#,#,889,#,#,#,#,#,#,462,565,689,#,847,#,396,#,526,#,#,#,#,#,154,432,#,527,#,207,#,#,#,#,206,344,182,#,331,358"),
		([57, 821, 269, 414, 106, 300, 305, 779, 534, 235, 676, 151, 236, 463, 845, 276, 478, 985, 725, 830, 880, 78, 292, 39, 991, 383, 226, 492, 762, 589], "57,39,821,#,#,269,845,106,414,830,985,78,235,300,779,#,#,880,991,#,#,151,236,276,305,534,#,#,#,#,#,#,226,#,#,#,292,#,383,463,676,#,#,#,#,#,#,#,478,589,725,#,492,#,#,#,762"),
		([343, 607, 296, 614, 712, 423, 789, 50, 245, 251, 835, 844, 505, 263, 129, 36, 496, 286, 257, 631, 55, 414, 107, 445, 662, 109, 264, 598, 567, 298], "343,296,607,50,298,423,614,36,245,#,#,414,505,#,712,#,#,129,251,#,#,496,598,631,789,55,#,#,263,445,#,567,#,#,662,#,835,#,107,257,286,#,#,#,#,#,#,#,844,#,109,#,#,264"),
		([990, 567, 876, 25, 758, 467, 565, 222, 686, 660, 489, 510, 939, 383, 139, 843, 372, 514, 224, 775, 547, 515, 57, 141, 674, 876, 97, 283, 578, 720, 680, 609, 256, 360], "990,567,#,25,876,#,467,758,939,222,565,686,843,#,#,139,383,489,#,660,720,775,#,57,141,372,#,#,510,578,674,#,#,#,#,#,97,#,#,224,#,#,514,#,609,#,680,#,#,#,283,#,547,#,#,#,#,256,360,515"),
		([181, 5, 976, 709, 442, 158, 396, 505, 433, 150, 327, 992, 364, 201, 46, 683, 440, 939, 398, 492, 507, 181, 126, 436, 298, 901, 654, 854, 534, 259, 781, 588, 47], "181,5,976,#,158,709,992,150,#,442,939,#,#,46,#,396,505,901,#,#,126,327,433,492,683,854,#,47,#,201,364,398,440,#,#,507,#,781,#,#,#,#,298,#,#,#,#,436,#,#,654,#,#,259,#,#,#,534,#,#,#,#,588"),
		([80, 213, 409, 70, 943, 438, 609, 822, 339, 699, 126, 470, 178, 141, 994, 424, 463, 264, 848, 131, 765, 817, 271, 378, 806, 686, 96, 87, 684, 166, 611, 206], "80,70,213,#,#,126,409,96,178,339,943,87,#,141,206,264,378,438,994,#,#,131,166,#,#,#,271,#,#,424,609,#,#,#,#,#,#,#,#,#,#,470,822,463,#,699,848,#,#,686,765,#,#,684,#,#,817,611,#,806"),
		([882, 32, 798, 731, 536, 737, 30, 771, 972, 632, 708, 69, 377, 212, 103, 26, 345, 309, 130, 255, 691, 654, 894, 421, 715, 914, 594, 52, 670, 305, 82], "882,32,972,30,798,894,#,26,#,731,#,#,914,#,#,536,737,#,#,69,632,#,771,52,377,594,708,#,#,#,#,212,421,#,#,691,715,103,345,#,#,654,#,#,#,82,130,309,#,#,670,#,#,#,#,255,#,#,#,#,305"),
		([110, 595, 460, 249, 125, 736, 982, 299, 96, 886, 159, 610, 876, 706, 531, 21, 67, 83, 840, 691, 606, 753, 146, 466, 100, 677, 364, 723, 7, 799, 502, 791, 448], "110,96,595,21,100,460,736,7,67,#,#,249,531,610,982,#,#,#,83,125,299,466,#,606,706,886,#,#,#,#,159,#,364,#,502,#,#,691,723,876,#,146,#,#,448,#,#,677,#,#,#,840,#,#,#,#,#,#,#,753,#,#,799,791"),
		([997, 499, 296, 903, 595, 461, 142, 21, 92, 4, 112, 300, 887, 797, 346, 646, 759, 719, 272, 133, 815, 283, 233, 466, 18, 887, 298, 437, 572, 53, 327, 351, 413], "997,499,#,296,903,142,461,595,#,21,272,300,466,572,887,4,92,233,283,298,346,#,#,#,#,797,#,#,18,53,112,#,#,#,#,#,#,327,437,646,815,#,#,#,#,#,133,#,#,351,#,#,759,#,#,#,#,#,413,719"),
		([92, 607, 518, 791, 251, 348, 481, 32, 610, 995, 418, 38, 272, 789, 285, 858, 98, 88, 943, 288, 883, 446, 247, 860, 645, 672, 279, 295, 553, 301, 629, 73, 916, 912], "92,32,607,#,38,518,791,#,88,251,553,610,995,73,#,98,348,#,#,#,789,858,#,#,#,#,247,272,481,645,#,#,943,#,#,#,285,418,#,629,672,883,#,279,288,#,446,#,#,#,#,860,916,#,#,#,295,#,#,#,#,912,#,#,301"),
		([704, 834, 449, 619, 775, 979, 814, 77, 675, 811, 359, 747, 455, 768, 536, 572, 206, 911, 822, 942, 947, 435, 391, 995, 909, 612, 727, 584, 188, 569], "704,449,834,77,619,775,979,#,359,455,675,747,814,911,995,206,435,#,536,#,#,727,768,811,822,909,942,#,#,188,#,391,#,#,572,#,#,#,#,#,#,#,#,#,#,#,947,#,#,#,#,569,612,#,#,#,#,584"),
		([843, 454, 305, 124, 136, 741, 331, 957, 169, 310, 360, 223, 575, 532, 86, 937, 220, 436, 86, 471, 946, 179, 742, 16, 980, 729, 212, 982, 934, 940], "843,454,957,305,741,937,980,124,331,575,742,934,946,#,982,86,136,310,360,532,729,#,#,#,#,940,#,#,#,16,#,#,169,#,#,#,436,471,#,#,#,#,#,#,#,#,223,#,#,#,#,220,#,179,#,#,212"),
		([466, 878, 825, 549, 457, 859, 716, 239, 636, 620, 160, 872, 138, 495, 763, 757, 541, 461, 959, 814, 320, 313, 159, 8, 826, 83, 133, 120, 705, 731, 29, 996, 50], "466,457,878,239,461,825,959,160,320,#,#,549,859,#,996,138,#,313,#,495,716,826,872,#,#,8,159,#,#,#,541,636,763,#,#,#,#,#,83,#,#,#,#,620,705,757,814,29,133,#,#,#,#,731,#,#,#,#,50,120"),
		([561, 496, 483, 423, 183, 30, 471, 275, 786, 308, 611, 63, 661, 91, 766, 44, 303, 274, 43, 878, 779, 994, 718, 785, 435, 910, 434, 926, 311, 813, 74, 700, 674], "561,496,786,483,#,611,878,423,#,#,661,813,994,183,471,#,766,#,#,910,#,30,275,435,#,718,779,#,926,#,63,274,308,434,#,700,#,#,785,#,#,44,91,#,#,303,311,#,#,674,#,#,#,43,#,74"),
		([334, 819, 801, 453, 330, 924, 123, 633, 283, 172, 964, 293, 699, 975, 818, 181, 919, 17, 314, 695, 264, 456, 35, 193, 657, 422, 246, 611, 467, 830, 253, 894, 92, 72, 391], "334,330,819,123,#,801,924,17,283,453,818,919,964,#,35,172,293,422,633,#,#,830,#,#,975,#,92,#,181,#,314,391,#,456,699,#,894,#,#,72,#,#,264,#,#,#,#,#,611,695,#,#,#,#,#,193,#,467,#,657,#,#,246,#,#,#,#,#,253"),
		([884, 111, 652, 115, 953, 342, 673, 695, 247, 673, 844, 950, 40, 802, 233, 2, 492, 28, 530, 506, 515, 685, 663, 396, 853, 410, 757, 958, 30, 84], "884,111,953,40,652,950,958,2,84,115,673,#,#,#,#,#,28,#,#,#,342,663,695,#,30,247,492,#,#,685,844,#,#,233,#,396,530,#,#,802,853,#,#,#,410,506,#,757,#,#,#,#,#,#,515"),
		([877, 674, 683, 882, 761, 424, 563, 256, 695, 82, 714, 251, 624, 719, 706, 195, 947, 515, 406, 939, 868, 560, 803, 935, 761, 11, 769, 964, 159, 514, 629, 398], "877,674,882,424,683,#,947,256,563,#,761,939,964,82,406,515,624,695,868,935,#,#,#,11,251,398,#,514,560,#,629,#,714,803,#,#,#,#,#,195,#,#,#,#,#,#,#,#,#,706,719,769,#,159"),
		([353, 533, 630, 720, 224, 592, 387, 764, 674, 85, 291, 334, 112, 894, 676, 441, 60, 519, 230, 944, 177, 523, 535, 578, 627, 45, 193, 624, 53, 404, 770, 207, 568], "353,224,533,85,291,387,630,60,112,230,334,#,441,592,720,45,#,#,177,#,#,#,#,404,519,535,627,674,764,#,53,#,193,#,#,#,523,#,578,624,#,#,676,#,894,#,#,#,207,#,#,568,#,#,#,#,#,770,944"),
		([655, 347, 714, 131, 603, 33, 122, 116, 965, 27, 185, 573, 567, 5, 612, 859, 735, 162, 606, 739, 18, 74, 386, 850, 934, 756, 722, 407, 909, 477], "655,347,714,131,603,#,965,33,185,573,612,859,#,27,122,162,#,567,#,606,#,735,934,5,#,116,#,#,#,386,#,#,#,722,739,909,#,#,18,74,#,#,407,#,#,#,850,#,#,#,#,#,#,#,477,756"),
		([484, 689, 923, 447, 822, 939, 524, 956, 12, 472, 623, 655, 541, 824, 616, 326, 181, 42, 632, 141, 166, 764, 428, 988, 23, 961, 42, 877, 62, 8], "484,447,689,12,472,524,923,8,326,#,#,#,623,822,939,#,#,181,428,541,655,764,824,#,956,42,#,#,#,#,616,632,#,#,#,#,877,#,988,23,141,#,#,#,#,#,#,961,#,#,#,62,166"),
		([782, 3, 112, 547, 783, 743, 141, 712, 663, 296, 988, 317, 156, 454, 998, 475, 642, 829, 663, 165, 864, 489, 577, 32, 897, 802, 226, 428, 127, 761, 934], "782,3,783,#,112,#,988,32,547,829,998,#,#,141,743,802,864,#,#,127,296,712,761,#,#,#,897,#,#,156,317,663,#,#,#,#,934,#,165,#,454,642,#,#,#,#,226,428,475,577,#,#,#,#,#,#,489"),
		([783, 461, 837, 528, 390, 323, 23, 953, 304, 354, 648, 657, 240, 370, 373, 155, 162, 1, 943, 148, 477, 176, 573, 599, 242, 936, 389, 543, 196, 608, 576, 495], "783,461,837,390,528,#,953,323,#,477,648,943,#,23,354,#,495,573,657,936,#,1,304,#,370,#,#,543,599,#,#,#,#,#,#,240,#,#,373,#,#,576,608,155,242,#,389,#,#,#,#,148,162,#,#,#,#,#,#,#,176,#,196"),
		([700, 302, 44, 173, 112, 826, 9, 449, 713, 218, 696, 599, 458, 518, 903, 738, 582, 414, 370, 452, 61, 789, 419, 632, 391, 140, 411, 336, 529, 442, 7, 137, 769, 51], "700,302,826,44,449,713,903,9,173,414,696,#,738,#,#,7,#,112,218,370,419,599,#,#,789,#,#,61,140,#,#,336,391,#,442,458,632,769,#,51,#,137,#,#,#,#,411,#,#,452,518,#,#,#,#,#,#,#,#,#,#,#,#,#,582,529"),
		([502, 534, 570, 270, 911, 330, 878, 305, 844, 200, 427, 869, 939, 381, 747, 21, 299, 959, 852, 763, 918, 499, 320, 31, 851, 275, 276, 140, 519, 546, 514, 162], "502,270,534,200,330,519,570,21,#,305,427,514,#,546,911,#,31,299,320,381,499,#,#,#,#,878,939,#,140,275,#,#,#,#,#,#,#,844,#,918,959,#,162,#,276,747,869,#,#,#,#,#,#,#,#,#,763,852,#,#,#,851"),
		([600, 672, 593, 651, 365, 779, 34, 509, 483, 749, 463, 620, 444, 184, 644, 23, 184, 718, 418, 833, 918, 134, 288, 20, 850, 978, 275, 264, 448, 403, 360, 800], "600,593,672,365,#,651,779,34,509,620,#,749,833,23,184,483,#,#,644,718,#,800,918,20,#,134,288,463,#,#,#,#,#,#,#,850,978,#,#,#,#,275,360,444,#,#,#,#,#,264,#,#,#,418,448,#,#,403"),
		([285, 767, 733, 690, 811, 883, 172, 630, 364, 802, 177, 948, 638, 190, 679, 204, 655, 961, 606, 724, 915, 171, 931, 250, 942, 595, 399, 425, 526, 517, 597, 774, 633, 571, 345], "285,172,767,171,177,733,811,#,#,#,190,690,#,802,883,#,204,630,724,774,#,#,948,#,250,364,638,#,#,#,#,915,961,#,#,345,606,633,679,#,931,#,#,#,#,595,#,#,#,655,#,#,942,399,597,#,#,#,#,#,425,#,#,#,526,517,571"),
		([878, 751, 816, 682, 878, 479, 229, 990, 829, 493, 920, 337, 868, 366, 906, 881, 223, 576, 206, 430, 345, 532, 111, 72, 755, 228, 330, 103, 484, 369, 432, 699, 883, 665, 247], "878,751,990,682,816,920,#,479,699,755,829,906,#,229,493,#,#,#,#,#,868,881,#,223,337,484,576,#,#,#,883,206,228,330,366,#,#,532,665,#,#,111,#,#,#,247,#,345,430,#,#,#,#,72,#,#,#,#,#,369,432,#,103"),
		([263, 118, 581, 850, 594, 594, 486, 160, 96, 390, 675, 879, 949, 562, 308, 573, 988, 964, 101, 578, 859, 597, 73, 581, 525, 377, 210, 286, 837, 442], "263,118,581,96,160,486,850,73,101,#,210,390,562,594,879,#,#,#,#,#,#,308,442,525,573,#,675,859,949,286,377,#,#,#,#,#,578,597,837,#,#,#,988,#,#,#,#,#,#,#,#,#,#,964"),
		([836, 710, 514, 968, 578, 256, 350, 460, 853, 108, 829, 938, 831, 582, 604, 900, 522, 238, 765, 598, 273, 579, 247, 386, 870, 217, 686, 647, 577, 31, 156, 687, 450], "836,710,968,514,829,853,#,256,578,765,831,#,938,108,350,522,582,#,#,#,#,900,#,31,238,273,460,#,577,579,604,870,#,#,#,217,247,#,#,386,#,#,#,#,#,598,686,#,#,156,#,#,#,#,450,#,#,647,687"),
		([445, 42, 441, 615, 327, 698, 180, 162, 894, 9, 858, 977, 801, 440, 966, 875, 503, 827, 491, 454, 670, 2, 92, 861, 306, 658, 447, 450, 644, 473, 88, 698, 196, 738, 819], "445,42,615,9,441,503,698,2,#,327,#,491,#,670,894,#,#,180,440,454,#,658,#,858,977,162,306,#,#,447,473,644,#,801,875,966,#,92,#,196,#,#,450,#,#,#,#,738,827,861,#,#,#,88,#,#,#,#,#,#,#,819"),
		([301, 994, 933, 273, 751, 473, 864, 901, 532, 61, 173, 258, 615, 727, 264, 859, 698, 97, 99, 737, 910, 435, 832, 277, 402, 11, 497, 808, 730, 744, 115, 517], "301,273,994,61,277,933,#,11,173,#,#,751,#,#,#,97,258,473,864,#,99,#,264,435,532,859,901,#,115,#,#,402,#,497,615,832,#,#,910,#,#,#,#,#,517,#,727,808,#,#,#,#,#,698,737,#,#,#,#,730,744"),
		([303, 620, 456, 571, 999, 656, 207, 84, 784, 453, 993, 402, 220, 221, 891, 847, 317, 272, 832, 870, 985, 966, 207, 300, 614, 570, 158, 956, 774, 220, 414, 260, 174], "303,207,620,84,220,456,999,#,158,#,221,453,571,656,#,#,174,#,272,402,#,570,614,#,784,#,#,260,300,317,414,#,#,#,#,774,993,#,#,#,#,#,#,#,#,#,#,891,#,847,985,832,870,966,#,#,#,#,#,956"),
		([721, 701, 812, 610, 385, 676, 883, 724, 731, 383, 967, 146, 528, 605, 267, 270, 450, 451, 355, 858, 643, 621, 957, 126, 134, 678, 284, 644, 395, 380, 722, 229, 41, 662, 528], "721,701,812,610,#,724,883,385,676,722,731,858,967,383,528,643,678,#,#,#,#,#,#,957,#,146,#,450,605,621,644,#,#,#,#,126,267,395,451,#,#,#,#,#,662,41,134,229,270,#,#,#,#,#,#,#,#,#,#,#,#,#,355,284,380"),
		([306, 621, 970, 945, 458, 897, 104, 833, 643, 715, 137, 461, 288, 646, 272, 661, 270, 933, 417, 883, 556, 263, 300, 945, 512, 550, 622, 741, 594, 738, 211, 977, 355, 798], "306,104,621,#,137,458,970,#,288,417,461,945,977,272,300,355,#,#,556,897,#,#,#,270,#,#,#,#,#,512,594,833,933,263,#,#,550,#,#,643,883,#,#,211,#,#,#,622,715,#,#,#,#,#,#,646,741,#,661,738,798"),
		([158, 63, 9, 896, 950, 584, 931, 960, 618, 171, 415, 591, 353, 153, 272, 122, 200, 584, 475, 554, 314, 26, 47, 336, 288, 319, 189, 935, 89, 319, 584, 564, 613], "158,63,896,9,153,584,950,#,26,122,#,171,618,931,960,#,47,89,#,#,415,591,#,#,935,#,#,#,#,#,#,353,475,#,613,#,#,272,#,#,554,#,#,200,314,#,564,189,#,288,336,#,#,#,#,#,#,319"),
		([921, 471, 141, 657, 150, 957, 966, 698, 164, 24, 856, 514, 365, 813, 118, 275, 862, 951, 293, 202, 137, 996, 534, 114, 314, 670, 232, 424, 619, 614, 651, 900, 822], "921,471,957,141,657,951,966,24,150,514,698,#,#,#,996,#,118,#,164,#,534,670,856,#,#,114,137,#,365,#,619,#,#,813,862,#,#,#,#,275,424,614,651,#,822,#,900,202,293,#,#,#,#,#,#,#,#,#,#,#,232,#,314"),
		([464, 499, 237, 193, 227, 631, 888, 518, 989, 577, 376, 314, 259, 944, 206, 120, 19, 332, 562, 642, 795, 361, 234, 907, 716, 137, 449, 939, 425, 558, 720, 47], "464,237,499,193,376,#,631,120,227,314,449,518,888,19,137,206,234,259,332,425,#,#,577,642,989,#,47,#,#,#,#,#,#,#,#,#,361,#,#,562,#,#,795,944,#,#,#,#,#,558,#,716,#,907,#,#,#,#,720,#,939"),
		([382, 510, 777, 545, 833, 748, 204, 595, 627, 773, 745, 63, 710, 341, 322, 521, 368, 836, 377, 244, 307, 34, 491, 503, 779, 599, 909, 616, 695, 471, 761], "382,204,510,63,341,491,777,34,#,322,368,471,503,545,833,#,#,244,#,#,377,#,#,#,#,521,748,779,836,#,307,#,#,#,#,595,773,#,#,#,909,#,#,#,627,761,#,#,#,599,745,#,#,#,616,710,#,#,#,695"),
		([468, 402, 708, 52, 528, 595, 378, 129, 143, 928, 709, 297, 923, 559, 578, 278, 234, 440, 502, 454, 43, 524, 327, 206, 841, 201, 47, 646, 70, 477, 78, 442, 523, 961], "468,402,708,52,440,528,928,43,378,#,454,502,595,709,961,#,47,129,#,442,#,477,524,559,646,#,923,#,#,#,#,70,143,#,#,#,#,523,#,#,578,#,#,841,#,#,78,#,297,#,#,#,#,#,#,#,#,278,327,234,#,#,#,206,#,201"),
		([841, 62, 281, 549, 956, 364, 119, 360, 170, 800, 490, 397, 422, 870, 372, 168, 376, 412, 773, 1, 958, 393, 598, 93, 857, 970, 593, 60, 471, 246, 263, 415, 149, 281], "841,62,956,1,281,870,958,#,60,119,549,857,#,#,970,#,#,93,170,364,800,#,#,#,#,#,#,168,246,360,490,773,#,149,#,#,263,#,#,397,#,598,#,#,#,#,#,372,422,593,#,#,376,412,471,#,#,#,393,#,415"),
		([645, 829, 807, 116, 849, 311, 266, 790, 16, 219, 930, 38, 204, 630, 672, 855, 459, 608, 778, 725, 279, 564, 834, 434, 26, 711, 586, 791, 571, 711, 819, 73, 724, 127], "645,116,829,16,311,807,849,#,38,266,630,790,819,834,930,26,73,219,279,459,#,672,791,#,#,#,#,855,#,#,#,#,#,204,#,#,#,434,608,#,778,#,#,#,#,127,#,#,#,564,#,725,#,#,#,#,586,711,#,571,#,#,724"),
		([236, 252, 601, 414, 951, 151, 277, 976, 624, 414, 213, 274, 940, 203, 441, 53, 538, 677, 400, 339, 139, 784, 444, 345, 210, 8, 416, 589, 860, 648, 866, 795, 809, 235], "236,151,252,53,213,#,601,8,139,203,235,414,951,#,#,#,#,#,210,#,#,277,441,624,976,#,#,274,400,416,538,#,940,#,#,#,#,339,#,#,#,444,589,677,#,#,345,#,#,#,#,648,784,#,#,#,#,#,860,795,866,#,809"),
		([222, 62, 606, 458, 763, 553, 132, 712, 129, 108, 206, 155, 224, 976, 205, 383, 458, 230, 381, 609, 122, 809, 463, 269, 224, 599, 103, 163, 670, 530, 383, 795, 452, 574, 259], "222,62,606,#,132,458,763,129,206,224,553,712,976,108,#,155,#,#,383,463,599,609,#,809,#,103,122,#,205,230,452,#,530,574,#,#,670,795,#,#,#,#,#,163,#,#,381,#,#,#,#,#,#,#,#,#,#,#,#,269,#,259"),
		([422, 363, 972, 530, 417, 60, 204, 142, 124, 616, 839, 311, 465, 735, 107, 526, 992, 931, 437, 593, 634, 388, 249, 762, 548, 36, 676, 307, 716, 421, 252, 376], "422,363,972,60,417,530,992,36,204,388,421,465,616,#,#,#,#,142,311,376,#,#,#,437,526,593,839,124,#,249,#,#,#,#,#,#,#,548,#,735,931,107,#,#,307,#,#,634,762,#,#,#,#,252,#,#,676,#,#,#,#,#,716"),
		([747, 958, 955, 552, 1, 193, 172, 492, 757, 860, 673, 185, 354, 967, 939, 992, 228, 183, 330, 986, 495, 421, 441, 604, 113, 938, 525, 497, 27, 217, 322, 226, 207, 834], "747,552,958,1,673,955,967,#,193,604,#,757,#,#,992,172,492,#,#,#,860,986,#,113,185,354,495,834,939,#,#,27,#,183,#,228,421,#,525,#,#,938,#,#,#,#,#,217,330,#,441,497,#,#,#,207,226,322"),
		([531, 855, 155, 516, 944, 859, 270, 913, 151, 645, 163, 627, 791, 128, 623, 635, 4, 761, 426, 496, 540, 40, 862, 554, 447, 539, 412, 511, 344, 320], "531,155,855,151,516,645,944,128,#,270,#,627,791,859,#,4,#,163,426,623,635,761,#,#,913,#,40,#,#,412,496,540,#,#,#,#,#,862,#,#,#,344,#,447,511,539,554,#,#,320"),
		([510, 648, 323, 693, 857, 243, 727, 871, 492, 492, 997, 34, 226, 854, 85, 556, 673, 281, 931, 968, 701, 670, 197, 623, 623, 258, 779, 686, 970, 401, 755], "510,323,648,243,492,556,693,34,281,401,#,#,623,673,857,#,226,258,#,#,#,#,#,670,686,727,871,85,#,#,#,#,#,#,#,701,854,#,997,#,197,#,#,779,#,931,#,#,#,755,#,#,968,#,#,#,970"),
		([497, 661, 45, 703, 905, 534, 809, 651, 66, 455, 779, 536, 650, 84, 866, 20, 435, 180, 751, 511, 931, 810, 330, 236, 210, 432, 369, 993, 908, 901, 761, 67, 133], "497,45,661,20,66,534,703,#,#,#,455,511,651,#,905,84,#,#,#,536,#,809,931,67,435,#,650,779,866,908,993,#,#,180,#,#,#,751,#,810,901,#,#,#,#,133,330,#,761,#,#,#,#,#,#,236,432,#,#,210,#,369"),
		([589, 104, 871, 311, 730, 103, 147, 995, 379, 779, 312, 207, 424, 667, 15, 659, 490, 418, 763, 980, 169, 902, 963, 69, 162, 998, 404, 124, 834, 199, 488, 643], "589,104,871,103,311,730,995,15,#,147,379,667,779,980,998,#,69,124,207,312,424,659,#,763,834,902,#,#,#,#,#,#,#,169,#,#,#,418,490,643,#,#,#,#,#,#,963,162,199,404,#,488"),
		([370, 662, 338, 401, 522, 100, 919, 969, 222, 174, 619, 4, 130, 655, 127, 315, 434, 186, 513, 938, 179, 582, 681, 178, 261, 934, 124, 515, 166, 343, 483, 225, 49, 487, 309], "370,338,662,100,343,401,919,4,222,#,#,#,522,681,969,#,49,174,315,434,619,#,#,938,#,#,#,130,186,261,#,#,513,582,655,934,#,127,166,179,#,225,309,483,515,#,#,#,#,#,#,124,#,#,#,178,#,#,#,#,#,#,487"),
		([962, 930, 540, 11, 734, 624, 493, 149, 254, 532, 796, 228, 601, 966, 504, 879, 671, 270, 158, 131, 706, 744, 165, 819, 336, 206, 412, 945, 798, 471, 786, 899], "962,930,966,540,945,#,#,11,734,#,#,#,493,624,796,149,532,601,671,744,879,131,254,504,#,#,#,#,706,#,786,819,899,#,#,228,270,#,#,#,#,#,#,798,#,#,#,158,#,#,336,#,#,#,165,#,412,#,206,#,471"),
		([514, 966, 613, 774, 243, 144, 870, 93, 441, 627, 520, 710, 732, 80, 631, 535, 452, 628, 873, 60, 11, 168, 202, 421, 936, 428, 12, 719, 847, 234, 635, 272, 988], "514,243,966,144,441,613,988,93,168,421,452,520,774,#,#,80,#,#,202,272,428,#,#,#,535,627,870,60,#,#,234,#,#,#,#,#,#,#,710,847,873,11,#,#,#,631,732,#,#,#,936,#,12,628,635,719"),
		([737, 263, 801, 236, 367, 637, 806, 424, 997, 44, 89, 988, 462, 378, 556, 66, 427, 869, 588, 242, 164, 365, 845, 64, 888, 880, 712, 868, 100, 407, 908, 891, 235, 859, 519], "737,263,801,236,367,#,806,44,242,365,637,#,997,#,89,#,#,#,#,424,712,988,#,66,164,378,462,#,#,869,#,64,#,100,235,#,407,427,556,845,888,#,#,#,#,#,#,#,#,#,#,519,588,#,868,880,908,#,#,#,#,859,#,#,#,891"),
		([78, 456, 6, 923, 716, 769, 153, 882, 747, 501, 3, 343, 241, 228, 420, 808, 592, 930, 435, 114, 207, 359, 535, 749, 47, 710, 664, 822, 821, 658, 690, 465, 288], "78,6,456,3,47,153,923,#,#,#,#,114,343,716,930,#,#,241,420,501,769,#,#,228,288,359,435,465,592,747,882,207,#,#,#,#,#,#,#,#,#,535,710,#,749,808,#,#,#,#,#,664,#,#,#,#,822,658,690,821"),
	]

	for case in testCase:
		tree = binary_tree.createTree(case[0])
		s = binary_tree.serialize(tree)

		if s != case[1]:
			raise RuntimeError("testInvertTree failed!")

	print "testInvertTree done!"


def testStringToInterger():
	testCase = [
	("",0), ("-1", -1), ("+-2", 0), (" 010", 10), (" -0012a42", -12), ("2147483648", 2147483647), ("23a8f", 23), (" -11919730356x", -2147483648), 
	("123", 123), ("1ad", 1), ("-00852", -852), ("0750", 750), ("000000000123", 123)
	]
	for case in testCase:
		if test_module.strToInterger(case[0]) != case[1]:
			raise RuntimeError("testStringToInterger failed: %s " % (case[0]))
	print "testStringToInterger done!"


def testZigZagConvertion():
	def zigZagConvertion(s, numRows):
	    if len(s) == 0 or numRows <= 1:
	        return s
	    
	    ret = ""
	    diff = 2 * (numRows - 1)
	    for row in xrange(0, numRows):
	        for pt in xrange(row, len(s), diff):
	            ret += s[pt]
	            pt2 = pt + (diff - row * 2)
	            if pt2 < len(s) and pt2 != pt and pt2 != pt + diff:
	                ret += s[pt2]
	    return ret

	for i in xrange(0, 1000):
		s = randomString(random.randint(0,100))
		numRows = random.randint(0,33)
		if zigZagConvertion(s, numRows) != test_module.zigZagConvertion(s, numRows):
			raise RuntimeError("zigZagConvertion failed!")

	print "testZigZagConvertion done!"

def testReverseInt():
	testCase = [(0, 0), (123,321), (-123,-321), (1, 1), (12, 21),
		(333333,333333), (1213243534534534, 0), (-4534456546567567,0),
		(2147483648, 0), (-2147483648, 0), (1534236469, 0), (-2147483412, -2143847412)]

	for case in testCase:
		if test_module.reverseInt( case[0] ) != case[1]:
			raise RuntimeError("reverseInt failed! %d" % case[0])

	print "testReverseInt done!"

def testPalindromeNumber():
	testCase = [(12345, False), (555555, True), (5555555, True), (123321, True), (-123321, True),
		(12321, True), (43546456, False), (8888, True), (1233210, False), (3543500, False), (100000, False)]

	for case in testCase:
		if test_module.palindromeNumber(case[0]) != case[1]:
			raise RuntimeError("testPalindromeNumber failed! %d" % case[0])

	print "testPalindromeNumber done!"

def testLongestCommonPrefix():
	testCase = [
		(["a", "b"], ""),
		(["a", "a"], "a"),
		(["abc", "abd", "abe", "abv"], "ab"),
		([""], ""),
		([], ""),
	]
	for case in testCase:
		if test_module.longestCommonPrefix( case[0] ) != case[1]:
			raise RuntimeError("testLongestCommonPrefix failed! %s" % (case[0]) )

	print "testLongestCommonPrefix done!"

def testRemoveNthFromEnd():
	testCase = [
		([], 3, "None"),
		([1,2], 1, "1"),
		([1,2], 2, "2"),
		([1,2], 3, "1"),
		([1,2,3,4,5,6,7,8], 8, "2,3,4,5,6,7,8"),
		([1,2,3,4,5,6,7,8], 7, "1,3,4,5,6,7,8"),
		([1,2,3,4,5,6,7,8], 0, "1,2,3,4,5,6,7,8"),
		([1,2,3,4,5,6,7,8], 1, "1,2,3,4,5,6,7"),
	]

	for case in testCase:
		lst = linked_list.createLinkedLst(case[0])
		if str(test_module.removeNthFromEnd(lst, case[1])) != case[2]:
			raise RuntimeError("testRemoveNthFromEnd failed! %s %s" % (case[0], case[1]) )

	print "testRemoveNthFromEnd done!"

def testIsValidParentheses():
	testCase = [
		("", False),
		("(", False),
		("((", False),
		("(()", False),
		("([]]", False),
		("{(([)])}", False),
		("({()})", True),
		("{}", True),
		("{(([]))}", True),
		("}", False),
	]
	for case in testCase:
			if test_module.isValidParentheses( case[0] ) != case[1]:
				raise RuntimeError("testIsValidParentheses failed! %s" % case[0])

	print "testIsValidParentheses done!"


def testMergeSortedLst():
	testCase = [
		([1,3,5,7],[2,4,6,8], "1,2,3,4,5,6,7,8"),
		([1,3,5,7],[2,4,6], "1,2,3,4,5,6,7"),
		([1,3,5,7],[2,6,8], "1,2,3,5,6,7,8"),
		([1],[2,4,6,8], "1,2,4,6,8"),
		([1],[2], "1,2"),
		([1,3,5,7],[], "1,3,5,7"),
		([],[2,4,6,8], "2,4,6,8"),
	]

	for case in testCase:
		lst1 = linked_list.createLinkedLst(case[0])
		lst2 = linked_list.createLinkedLst(case[1])
		if str(test_module.mergeSortedList1(lst1, lst2)) != case[2]:
			raise RuntimeError("testMergeSortedLst1 failed! %s, %s" % (case[0], case[1]) )
		lst1 = linked_list.createLinkedLst(case[0])
		lst2 = linked_list.createLinkedLst(case[1])
		if str(test_module.mergeSortedList2(lst1, lst2)) != case[2]:
			raise RuntimeError("testMergeSortedLst2 failed! %s, %s" % (case[0], case[1]) )

	print "testMergeSortedLst done!"


def testRemoveDuplicates():
	testCase = [
		([1,2,3,4,5], [1,2,3,4,5]),
		([], []),
		([1,3,3,4,5], [1,3,4,5]),
		([1,1], [1])
	]

	for case in testCase:
		size = test_module.removeDuplicates( case[0] )
		if case[0][:size] != case[1]:
			raise RuntimeError("testRemoveDuplicates failed! %s" % case[0])

	print "testRemoveDuplicates done!"

def testRemoveElement():
	testCase = [
		([1,2,3,4,5,6], 7, [1,2,3,4,5,6]),
		([], 6, []),
		([1,3,3,4,5], 3, [1,4,5]),
		([1,1], 1, []),
		([1], 1, []),
	]

	for case in testCase:
		size = test_module.removeElement( case[0], case[1] )
		if case[0][:size] != case[2]:
			raise RuntimeError("testRemoveElement failed! %s" % case[2])

	print "testRemoveElement done!"


def testStrStr():
	testCase = [
	("", "", 0),
	("1", "", 0),
	("abc", "abc", 0),
	("", "as", -1),
	("abcddbcd", "bcd", 1),
	("12344321", "123", 0),
	("1235", "235", 1)
	]

	for case in testCase:
		if test_module.strStr(case[0], case[1]) != case[2]:
			raise RuntimeError("testStrStr failed! %s" % case[0])

	print "testStrStr done!"

def testCountAndSay():
	testCase = [
	(0, ""), (1, "1"), (2, "11"), (3, "21"), (4, "1211"),
	(5, "111221"), (6, "312211"), (7, "13112221"), (8, "1113213211"),
	(9, "31131211131221"), (10, "13211311123113112211"),
	]
	for case in testCase:
		if test_module.countAndSay(case[0]) != case[1]:
			raise RuntimeError("testCountAndSay failed! %s" % case[0])
	print "testCountAndSay done!"

def testLengthOfLastWord():
	testCase = [
		("a", 1),
		("", 0), 
		("        ", 0),
		("a b c d ", 1),
		(" qa baa cdsf sdsfd ", 5),
	]
	for case in testCase:
		if test_module.lengthOfLastWord( case[0] ) != case[1]:
			raise RuntimeError("testLengthOfLastWord failed! %s" % case[0])

	print "testLengthOfLastWord done!"

def testPlusOne():
	testCase = [None, 0, 123, 89999, 900, 33, 122, 322, 309, 310, 319]
	for case in testCase:
		lst = []
		if case == 0:
			lst = []
		if case != None:
			temp = case
			while temp:
				lst = [temp % 10] + lst
				temp /= 10

		result = 1
		if case != None:
			result = case + 1

		runResult = test_module.plusOne(lst)
		toVerify = 0
		for i in runResult:
			toVerify = toVerify * 10 + i

		if toVerify != result:
			raise RuntimeError("testPlusOne failed!! %s", case)

	print "testPlusOne done!"

def testAddBinary():
	testCase = [
		("", "", ""),
		("", "1111011", "1111011"),
		("1111011", "", "1111011"),
		("1111100111", "1100011", "10001001010"),
		("11000000111001", "1101010000101", "100101010111110"),
		("1101000001010110100100000100011000101111111011010111111110", "100111101100111000001101011110011100011000010111001001001100110100011011010", "100111101100111001110101101001010000111000111010001111001100001111011011000"),
	]
	for case in testCase:
		if test_module.addBinary(case[0], case[1]) != case[2]:
			raise RuntimeError("testAddBinary failed!! %s + %s" % (case[0], case[1]))

	print "testAddBinary done!"

def testClimbStair():
	testCase = [
		(0,0), (1,1), (2,2), (3, 3), (31,2178309), (33, 5702887), (32,3524578), (-12,0)
	]

	for case in testCase:
		r = test_module.climbStairs1(case[0])
		if r != test_module.climbStairs2(case[0]) or r != case[1]:
			raise RuntimeError("testClimbStair failed!! %s" % case)

	print "testClimbStair done!"

def testMergeSortedArray():
	testCase = [
		([1,3,5,7,0,0,0,0],[2,4,6,8], 4, 4, "1,2,3,4,5,6,7,8"),
		([1,3,5,7,0,0,0],[2,4,6], 4, 3, "1,2,3,4,5,6,7"),
		([1,3,5,7,0,0,0],[2,6,8], 4, 3, "1,2,3,5,6,7,8"),
		([1,0,0,0,0],[2,4,6,8], 1, 4, "1,2,4,6,8"),
		([1,0],[2], 1, 1, "1,2"),
		([1,3,5,7],[], 4, 0, "1,3,5,7"),
		([0,0,0,0],[2,4,6,8], 0, 4, "2,4,6,8"),
	]
	for case in testCase:
		t = case[0]
		test_module.mergeSortedArray(t, case[2], case[1], case[3])
		if ",".join(['%d' % x for x in t]) != case[4]:
			raise RuntimeError("testMergeSortedArray failed!! %s" % case)

	print "testMergeSortedArray done!"

def testDeleteDuplicates():
	testCase = [
		([1,2,3,4,5], "1,2,3,4,5"),
		([], "None"),
		([1,3,3,4,5], "1,3,4,5"),
		([1,1], "1")
	]

	for case in testCase:
		lst = linked_list.createLinkedLst(case[0])
		if str(test_module.deleteDuplicates(lst)) != case[1]:
			raise RuntimeError("testDeleteDuplicates failed! %s" % case[0])

	print "testDeleteDuplicates done!"

def testIsSameTree():
	for i in xrange(0, 300 + random.randint(1,3)):
		lst = list(set([random.randint(1,200) for x in xrange(1, 30+random.randint(1,5))]))

		r = True
		tree1 = binary_tree.createTree(lst)
		if random.randint(0,1):
			for i in xrange(0, random.randint(2,12)):
				lst.pop(random.randint(0, len(lst)-1))
			r = False
		tree2 = binary_tree.createTree(lst)

		if test_module.isSameTree(tree1, tree2) != r:
			raise RuntimeError("testIsSameTree failed!!")

	print "testIsSameTree done!"

def testSymmetricTree():
	def createSymmetricTree():
		A = binary_tree.Node(1)
		B = binary_tree.Node(2)
		C = binary_tree.Node(2)
		D = binary_tree.Node(3)
		E = binary_tree.Node(3)
		F = binary_tree.Node(4)
		G = binary_tree.Node(4)
		A.left = B
		A.right = C
		B.left = D
		B.right = F
		C.left = G
		C.right = E
		return A

	for i in xrange(0, 10):
		tree = createSymmetricTree()
		r = True
		if random.randint(0, 1):
			tree = binary_tree.createTree(list(set([random.randint(1,200) for x in xrange(1, 30+random.randint(1,5))])))
			r = False

		if test_module.isSymmetric(tree) != r:
			raise RuntimeError("testSymmetricTree failed!!")

	print "testSymmetricTree done!"

def testLevelOrder():

	testCase = [
		([], []),
		([133, 142, 15, 144, 147, 21, 151, 24, 25, 26, 27, 154, 69, 161, 165, 166, 168, 173, 177, 179, 40, 186, 187, 60, 64, 193, 197, 77, 79, 82, 92, 113, 114], [[133], [15, 142], [21, 144], [24, 147], [25, 151], [26, 154], [27, 161], [69, 165], [40, 77, 166], [60, 79, 168], [64, 82, 173], [92, 177], [113, 179], [114, 186], [187], [193], [197]]),
		([4, 5, 135, 138, 173, 147, 148, 21, 22, 23, 25, 155, 133, 160, 38, 45, 178, 59, 60, 10, 199, 200, 81, 88, 15, 104, 106, 112, 117, 119, 122, 126], [[4], [5], [135], [21, 138], [10, 22, 173], [15, 23, 147, 178], [25, 148, 199], [133, 155, 200], [38, 160], [45], [59], [60], [81], [88], [104], [106], [112], [117], [119], [122], [126]]),
		([3, 6, 135, 11, 140, 14, 18, 147, 21, 22, 26, 28, 160, 172, 46, 175, 64, 65, 68, 197, 73, 80, 95, 108, 111, 112, 114, 116, 117, 118, 124, 126], [[3], [6], [135], [11, 140], [14, 147], [18, 160], [21, 172], [22, 175], [26, 197], [28], [46], [64], [65], [68], [73], [80], [95], [108], [111], [112], [114], [116], [117], [118], [124], [126]]),
		([130, 43, 5, 6, 9, 11, 3, 32, 164, 167, 171, 176, 181, 54, 59, 64, 65, 66, 198, 200, 95, 96, 97, 98, 104, 114, 117, 127], [[130], [43, 164], [5, 54, 167], [3, 6, 59, 171], [9, 64, 176], [11, 65, 181], [32, 66, 198], [95, 200], [96], [97], [98], [104], [114], [117], [127]]),
		([150, 137, 139, 140, 141, 144, 19, 22, 26, 159, 34, 35, 46, 178, 185, 60, 61, 67, 70, 75, 78, 82, 86, 88, 16, 108, 118, 125], [[150], [137, 159], [19, 139, 178], [16, 22, 140, 185], [26, 141], [34, 144], [35], [46], [60], [61], [67], [70], [75], [78], [82], [86], [88], [108], [118], [125]]),
		([134, 142, 147, 26, 155, 29, 30, 36, 40, 42, 171, 172, 48, 49, 53, 186, 65, 70, 199, 83, 84, 87, 91, 98, 100, 116, 117, 119], [[134], [26, 142], [29, 147], [30, 155], [36, 171], [40, 172], [42, 186], [48, 199], [49], [53], [65], [70], [83], [84], [87], [91], [98], [100], [116], [117], [119]]),
		([132, 6, 7, 13, 14, 15, 17, 23, 4, 36, 167, 168, 46, 48, 49, 52, 181, 54, 55, 194, 69, 76, 77, 88, 92, 95, 102, 106, 108, 109, 110, 113], [[132], [6, 167], [4, 7, 168], [13, 181], [14, 194], [15], [17], [23], [36], [46], [48], [49], [52], [54], [55], [69], [76], [77], [88], [92], [95], [102], [106], [108], [109], [110], [113]]),
		([131, 10, 142, 145, 148, 28, 160, 36, 166, 168, 156, 43, 173, 175, 56, 185, 192, 198, 199, 74, 77, 80, 82, 84, 88, 108, 109, 110, 41, 20, 124], [[131], [10, 142], [28, 145], [20, 36, 148], [43, 160], [41, 56, 156, 166], [74, 168], [77, 173], [80, 175], [82, 185], [84, 192], [88, 198], [108, 199], [109], [110], [124]]),
		([134, 136, 19, 149, 22, 154, 30, 166, 71, 44, 175, 8, 50, 179, 52, 183, 59, 188, 193, 196, 199, 73, 80, 86, 87, 88, 93, 187, 106, 110, 122], [[134], [19, 136], [8, 22, 149], [30, 154], [71, 166], [44, 73, 175], [50, 80, 179], [52, 86, 183], [59, 87, 188], [88, 187, 193], [93, 196], [106, 199], [110], [122]]),
		([129, 2, 131, 133, 139, 142, 151, 25, 27, 28, 32, 161, 35, 165, 166, 156, 46, 175, 48, 185, 188, 190, 66, 199, 76, 78, 80, 84, 86, 115, 62], [[129], [2, 131], [25, 133], [27, 139], [28, 142], [32, 151], [35, 161], [46, 156, 165], [48, 166], [66, 175], [62, 76, 185], [78, 188], [80, 190], [84, 199], [86], [115]]),
	]

	for case in testCase:
		tree = binary_tree.createTree(case[0])
		if test_module.levelOrder(tree) != case[1]:
			raise RuntimeError("testLevelOrder failed!!")

	print "testLevelOrder done!"	

def testMaxDepth():
	testCase = [
		([], 0),
		([133, 142, 15, 144, 147, 21, 151, 24, 25, 26, 27, 154, 69, 161, 165, 166, 168, 173, 177, 179, 40, 186, 187, 60, 64, 193, 197, 77, 79, 82, 92, 113, 114], 17),
		([4, 5, 135, 138, 173, 147, 148, 21, 22, 23, 25, 155, 133, 160, 38, 45, 178, 59, 60, 10, 199, 200, 81, 88, 15, 104, 106, 112, 117, 119, 122, 126], 21),
		([3, 6, 135, 11, 140, 14, 18, 147, 21, 22, 26, 28, 160, 172, 46, 175, 64, 65, 68, 197, 73, 80, 95, 108, 111, 112, 114, 116, 117, 118, 124, 126], 26),
		([130, 43, 5, 6, 9, 11, 3, 32, 164, 167, 171, 176, 181, 54, 59, 64, 65, 66, 198, 200, 95, 96, 97, 98, 104, 114, 117, 127], 15),
		([150, 137, 139, 140, 141, 144, 19, 22, 26, 159, 34, 35, 46, 178, 185, 60, 61, 67, 70, 75, 78, 82, 86, 88, 16, 108, 118, 125], 20),
		([134, 142, 147, 26, 155, 29, 30, 36, 40, 42, 171, 172, 48, 49, 53, 186, 65, 70, 199, 83, 84, 87, 91, 98, 100, 116, 117, 119], 21),
		([132, 6, 7, 13, 14, 15, 17, 23, 4, 36, 167, 168, 46, 48, 49, 52, 181, 54, 55, 194, 69, 76, 77, 88, 92, 95, 102, 106, 108, 109, 110, 113], 27),
		([131, 10, 142, 145, 148, 28, 160, 36, 166, 168, 156, 43, 173, 175, 56, 185, 192, 198, 199, 74, 77, 80, 82, 84, 88, 108, 109, 110, 41, 20, 124], 16),
		([134, 136, 19, 149, 22, 154, 30, 166, 71, 44, 175, 8, 50, 179, 52, 183, 59, 188, 193, 196, 199, 73, 80, 86, 87, 88, 93, 187, 106, 110, 122], 14),
		([129, 2, 131, 133, 139, 142, 151, 25, 27, 28, 32, 161, 35, 165, 166, 156, 46, 175, 48, 185, 188, 190, 66, 199, 76, 78, 80, 84, 86, 115, 62], 16),
	]
	for case in testCase:
		tree = binary_tree.createTree(case[0])
		if test_module.maxDepth(tree) != case[1]:
			raise RuntimeError("testMaxDepth failed!!!")

	print "testMaxDepth done!"


def testIsBalanced():
	testCase = [
		("", True),
		("1,2,3,4,5,6", True),
		("1,2,3,4", True),
		("1,#,2,3,4", False),
		("1,#,2", True),
		("1,#,#", True),
		("1,#,2,#,3,#,4,#,5", False),
		("1,2,3,4,#,#,5,6,7,8,9", False)
	]
	for case in testCase:
		tree = binary_tree.createTreeFromStr(case[0])
		if test_module.isBalanced(tree) != case[1]:
			raise RuntimeError("testIsBalanced failed!!", case[0])

	print "testIsBalanced done!"

def testMinDepth():
	testCase = [
		("", 0),
		("1,2,3,4,5,6,7", 3),
		("1,#,2,#,3,#,4", 4),
		("1,2,3,#,#,4", 2),
	]

	for case in testCase:
		tree = binary_tree.createTreeFromStr(case[0])
		if test_module.minDepth(tree) != case[1]:
			raise RuntimeError("testMinDepth failed!!", case[0])

	print "testMinDepth done!"

def testHasPathSum():
	testCase = [
		("", 0, False),
		("1,2,3,4,5,6,7", 7, True),
		("1,2,3,4,5,6,7", 8, True),
		("1,2,3,4,5,6,7", 9, False),
		("1,#,2,#,3,#,4", 10, True),
		("1,#,2,#,3,#,4", 4, False),
		("1,#,2,#,3,#,4", 19, False),
		("1,2,3,#,#,4", 8, True),
		("1,2,3,#,#,4", 2, False),
	]

	for case in testCase:
		tree = binary_tree.createTreeFromStr(case[0])
		if test_module.hasPathSum(tree, case[1]) != case[2]:
			raise RuntimeError("testHasPathSum failed!!", case)

	print "testHasPathSum done!"

def testPascalTriangle():
	testCase = [
		(-1, []), 
		(0, []), 
		(1, [[1]]), 
		(2, [[1], [1, 1]]), 
		(3, [[1], [1, 1], [1, 2, 1]]), 
		(4, [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1]]), 
		(5, [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]), 
	]

	for case in testCase:
		if test_module.pascalTriangle(case[0]) != case[1]:
			raise RuntimeError("testPascalTriangle failed!!", case[0])

	print "testPascalTriangle done!"

def testIsPalindromeStr():
	testCase = [
		("", True),
		("A man, a plan, a canal: Panama", True),
		("race a car", False),
		("dsfsdgdfg", False),
		("sfds ,g34,h4", False),
		("abcddcba", True),
		("123321", True),
		("1221", True),
		("21dffd12", True),
		("21.dffd,12", True),
		("21d,ffd,12", True),
	]

	for case in testCase:
		if test_module.isPalindrome(case[0]) != case[1]:
			raise RuntimeError("testIsPalindromeStr failed!! ", case[0])

	print "testIsPalindromeStr done!"

def testConvertToTitle():
	testCase = [
		(0, ""),
		(2123, "CCQ"),
		(43, "AQ"),
		(27, "AA"),
		(28, "AB"),
		(26, "Z"),
		(25, "Y"),
		(1, "A"),
		(34, "AH"),
		(546, "TZ"),
		(22, "V"),
		(124, "DT"),
		(33, "AG"),
	]

	for case in testCase:
		if test_module.convertToTitle(case[0]) != case[1]:
			raise RuntimeError("testConvertToTitle failed!", case)

	print "testConvertToTitle done!"

def testMajorityElement():
	testCase = [
		([1], 1),
		([1,2,3,2], 2),
		([1,2,3,2], 2),
		([1,1,1,1,1], 1),
		([2,5,8,11,33,33,33,33], 33),
		([32,32,32,32,33,33,33,33,33], 33),
		([1,1,2,2], 2),
	]

	for case in testCase:
		if test_module.majorityElement(case[0]) != case[1]:
			raise RuntimeError("testMajorityElement failed!!", case)

	print "testMajorityElement done!"

def testTitleToNumber():
	testCase = [
		("", 0),
		("CCQ", 2123),
		("AQ", 43),
		("AA", 27),
		("AB", 28),
		("Z", 26),
		("Y", 25),
		("A", 1),
		("AH", 34),
		("TZ", 546),
		("V", 22),
		("DT", 124),
		("AG", 33),
	]

	for case in testCase:
		if test_module.titleToNumber(case[0]) != case[1]:
			raise RuntimeError("testTitleToNumber failed!! %s", case[0])

	print "testTitleToNumber done!"

def testTrailingZeroes():
	testCase = [
		(46356, 11585),(66395, 16596),(186814, 46698),(3650, 911),(90006, 22499),(167315, 41825),(115625, 28905),
		(24088, 6018),(43481, 10866),(151627, 37903),(113169, 28289),(9403, 2349),(104939, 26230),(150314, 37574),
		(77561, 19386),(106249, 26556),(54693, 13669),(149866, 37461),(94238, 23556),(169581, 42392),(62952, 15735),
		(12820, 3202),(26652, 6660),(26060, 6512),(84961, 21237),(103726, 25928),(29677, 7416),(101213, 25299),
		(142528, 35629),(29507, 7374),(51502, 12873),(175716, 43926),(36330, 9080),(161364, 40337),(38692, 9669),
		(345, 84),(186994, 46743),(17233, 4305),(168703, 42171),(72838, 18205),(67893, 16969),(157693, 39420),
		(78312, 19576),(31119, 7774),(144961, 36236),(172681, 43168),(173846, 43458),(6620, 1652),(193329, 48328),
		(-91216, 22800),(0,0)
	]

	for case in testCase:
		if test_module.trailingZeroes(case[0]) != case[1]:
			raise RuntimeError("testTrailingZeroes failed!! %s" % case)

	print "testTrailingZeroes done!"

def testRotateArray():
	testCase = [
		([1,2,3,4,5,6,7], 3, [5,6,7,1,2,3,4]),
		([1,2,3,4,5,6,7], 12, [3,4,5,6,7,1,2]),
		([1,2,3,4,5,6,7], -1, [1,2,3,4,5,6,7]),
		([1,2,3,4,5,6,7], 1, [7,1,2,3,4,5,6]),
		([],3,[]),
	]

	for case in testCase:
		temp = case[0]
		test_module.rotateArray(temp, case[1])
		if temp != case[2]:
			raise RuntimeError("testRotateArray failed!! %s" % case)

	print "testRotateArray done!"

def testReverseBits():
	testCase = [
	(0,0),
	(-1234,1960837119),
	(-1,4294967295),
	(12345,2618032128),
	(546,1145044992),
	(32423,3850240000),
	(12121,2599682048),
	(546,1145044992),
	(33,2214592512),
	]

	for case in testCase:
		if test_module.reverseBits(case[0]) != case[1]:
			raise RuntimeError("testReverseBits failed!!" % case[0])

	print "testReverseBits done!"

def testHammingWeight():
	testCase = [
		(0,0),(123,6),(5656,5),(23,4),(122,5),(33,2),(1,1),(34,2),(2323,5),
	]
	for case in testCase:
		if test_module.hammingWeight(case[0]) != case[1]:
			raise RuntimeError("testHammingWeight failed!!", case[0])

	print "testHammingWeight done!"

def testInterSectionNode():
	testCase = [
		([1,2,3], [4,5], [6,7,8], 6),
		([1,2,3], [4,5,6], [7,8,9], 7),
		([1,2,3], [4,5],[], None),
	]

	for case in testCase:
		lst1 = linked_list.createLinkedLst(case[0])
		lst2 = linked_list.createLinkedLst(case[1])
		lst3 = None if not len(case[2]) else linked_list.createLinkedLst(case[2])
		pt = lst1
		while pt and pt.next:
			pt = pt.next
		pt.next = lst3

		pt = lst2
		while pt and pt.next:
			pt = pt.next
		pt.next = lst3

		ret = test_module.getIntersectionNode(lst1, lst2)
		if (ret and ret.val != case[3]) or (ret == None and case[3] != None):
			raise RuntimeError("testInterSectionNode failed!!")

	print "testInterSectionNode done!"

def testHouseRob():
	testCase = [
		([], 0),
		([167, 860, 879, 722, 846, 482, 618, 107, 665, 276, 91, 135, 345, 520, 338, 519, 570, 816, 453, 495, 737, 148, 65, 876, 884, 173, 135, 625, 273, 577, 190, 897, 170], 9050),
		([316, 820, 794, 460, 558, 744, 834, 198, 821, 552, 484, 27, 699, 873, 335, 611, 772, 515, 337, 748, 756, 847, 60, 634, 519, 672, 376, 395, 688, 180, 806, 339, 766], 10967),
		([66, 246, 706, 741, 656, 603, 841, 817, 773, 665, 556, 580, 596, 21, 414, 211, 296, 636, 464, 171, 765, 352, 519, 415, 307, 372, 457, 795, 81, 660, 418, 281, 505], 8984),
		([791, 695, 587, 776, 270, 487, 590, 706, 876, 306, 815, 865, 634, 203, 81, 273, 578, 393, 322, 18, 438, 125, 579, 406, 239, 186, 659, 540, 644, 710, 898, 834, 493], 9494),
		([603, 688, 778, 68, 787, 434, 448, 734, 726, 51, 159, 420, 238, 784, 311, 583, 459, 115, 451, 201, 817, 433, 66, 551, 72, 858, 425, 314, 548, 884, 241, 348, 51], 9352),
		([105, 401, 733, 398, 481, 192, 57, 153, 493, 512, 744, 211, 595, 280, 581, 375, 833, 879, 675, 497, 714, 402, 647, 628, 742, 568, 451, 583, 730, 852, 204, 736, 582], 9571),
		([848, 765, 433, 600, 698, 50, 753, 206, 300, 374, 846, 165, 443, 1, 183, 872, 597, 481, 272, 214, 235, 20, 133, 288, 16, 801, 858, 596, 171, 552, 486, 820, 415], 8966),
		([416, 772, 857, 399, 313, 897, 310, 545, 41, 853, 508, 606, 506, 472, 648, 578, 119, 329, 195, 315, 436, 616, 610, 200, 280, 373, 714, 85, 430, 737, 208, 443, 601], 8931),
		([18, 867, 303, 653, 328, 233, 818, 802, 570, 440, 647, 677, 485, 55, 383, 453, 451, 846, 716, 541, 864, 866, 115, 529, 631, 478, 869, 732, 747, 307, 811, 781, 883], 10687),
		([538, 691, 691, 634, 407, 803, 75, 849, 886, 533, 108, 714, 686, 466, 699, 260, 143, 633, 771, 88, 149, 707, 792, 551, 416, 488, 748, 287, 330, 713, 115, 426, 488], 9143),
		([724, 613, 772, 168, 284, 25, 12, 777, 38, 11, 537, 113, 144, 345, 147, 874, 81, 622, 880, 218, 761, 439, 263, 226, 859, 217, 573, 283, 556, 354, 687, 859, 373], 9265),
		([104, 475, 635, 890, 62, 782, 42, 16, 16, 247, 387, 783, 630, 140, 778, 613, 272, 549, 334, 148, 388, 295, 228, 235, 376, 808, 270, 453, 769, 223, 785, 826, 146], 7708),
		([706, 354, 478, 235, 443, 144, 625, 874, 754, 14, 189, 163, 103, 78, 610, 453, 824, 349, 343, 206, 766, 395, 885, 836, 209, 678, 833, 483, 687, 318, 6, 581, 784], 9245),
		([864, 466, 385, 477, 228, 648, 587, 194, 721, 897, 275, 574, 778, 665, 281, 597, 792, 657, 334, 183, 331, 417, 774, 550, 859, 272, 455, 538, 119, 39, 189, 371, 866], 9166),
		([780, 497, 563, 576, 378, 722, 207, 325, 17, 572, 234, 526, 686, 362, 628, 854, 286, 567, 497, 46, 648, 878, 313, 630, 830, 858, 118, 148, 442, 592, 539, 475, 553], 9230),
		([788, 87, 111, 821, 614, 670, 287, 617, 254, 515, 760, 543, 517, 669, 27, 313, 818, 512, 15, 264, 495, 248, 3, 353, 585, 230, 395, 306, 60, 642, 884, 576, 672], 8556),
		([326, 727, 810, 16, 579, 472, 212, 858, 851, 681, 150, 726, 248, 531, 603, 521, 244, 729, 651, 741, 511, 197, 402, 829, 155, 403, 891, 586, 324, 741, 493, 839, 431], 10097),
		([115, 590, 343, 811, 287, 440, 348, 155, 767, 299, 540, 86, 763, 434, 349, 484, 290, 367, 134, 289, 12, 230, 14, 895, 89, 594, 237, 119, 183, 871, 357, 4, 346], 8106),
		([267, 340, 839, 15, 174, 726, 341, 220, 775, 801, 792, 641, 156, 898, 155, 151, 206, 687, 397, 363, 611, 85, 762, 228, 821, 39, 424, 103, 259, 82, 386, 891, 233], 8998),
		([704, 393, 624, 528, 507, 311, 366, 544, 871, 743, 540, 508, 43, 136, 470, 259, 480, 366, 284, 456, 707, 125, 10, 883, 234, 766, 302, 665, 380, 510, 493, 174, 73], 8594),
		([649, 220, 435, 190, 337, 26, 841, 257, 110, 192, 344, 170, 248, 416, 580, 778, 879, 802, 16, 616, 785, 9, 515, 779, 518, 696, 300, 197, 337, 371, 39, 689, 446], 8229),
		([491, 803, 523, 771, 29, 797, 830, 395, 99, 297, 865, 253, 671, 716, 660, 61, 805, 374, 363, 602, 408, 294, 477, 791, 618, 765, 204, 326, 138, 176, 103, 377, 415], 9136),
		([804, 889, 487, 798, 27, 480, 356, 351, 358, 423, 325, 566, 582, 724, 495, 192, 261, 101, 843, 718, 129, 767, 713, 522, 433, 85, 390, 556, 677, 569, 641, 573, 871], 9203),
		([521, 302, 638, 895, 217, 207, 385, 763, 730, 234, 26, 429, 172, 814, 59, 507, 95, 412, 224, 167, 571, 155, 38, 97, 302, 479, 756, 655, 634, 509, 811, 218, 348], 8242),
		([250, 540, 53, 654, 248, 348, 433, 742, 824, 747, 387, 319, 785, 298, 397, 443, 550, 69, 761, 345, 525, 467, 498, 325, 894, 408, 383, 163, 792, 119, 293, 691, 811], 9720),
		([268, 354, 615, 575, 871, 731, 673, 259, 628, 551, 388, 586, 611, 104, 758, 794, 210, 409, 725, 615, 535, 693, 585, 321, 889, 286, 651, 95, 336, 683, 247, 295, 114], 9385),
		([13, 475, 232, 67, 665, 495, 433, 641, 567, 562, 485, 735, 786, 604, 822, 210, 898, 422, 692, 652, 248, 291, 87, 489, 755, 563, 603, 310, 446, 31, 589, 233, 717], 9268),
		([544, 484, 341, 664, 311, 90, 658, 271, 594, 408, 408, 533, 896, 209, 834, 858, 438, 419, 19, 201, 164, 302, 713, 330, 685, 425, 837, 762, 673, 507, 447, 814, 124], 8964),
		([440, 696, 655, 482, 885, 231, 161, 107, 507, 501, 147, 681, 592, 463, 377, 776, 735, 334, 51, 432, 77, 833, 853, 541, 270, 568, 151, 739, 893, 832, 390, 443, 771], 9618),
		([684, 665, 793, 10, 441, 544, 214, 186, 305, 180, 817, 654, 496, 767, 887, 462, 51, 466, 57, 660, 380, 12, 388, 601, 787, 786, 189, 845, 331, 884, 645, 116, 894], 9785),
	]
	
	for case in testCase:
		if test_module.houseRob(case[0]) != case[1]:
			raise RuntimeError("testHouseRob failed!!")

	print "testHouseRob done!"

def testRemoveElements():
	testCase = [
		([],1, "None"),
		([1,1,1,1,1,1], 1, "None"),
		([1,2,1,1,1,], 1, "2"),
		([1,2,1,1,1,], 3, "1,2,1,1,1"),
		([1,2,3,4,5,], 6, "1,2,3,4,5"),
		([1,2,3,4,5,], 5, "1,2,3,4"),
		([1,2,3,4,5,], 2, "1,3,4,5"),
	]
	for case in testCase:
		lst = linked_list.createLinkedLst(case[0])
		if str( test_module.removeElements(lst, case[1]) ) != case[2]:
			raise RuntimeError("testRemoveElements failed!!")

	print "testRemoveElements done!"

def testCountPrimes():
	testCase = [
		(0, 0),(1, 0),(2, 0),(3, 1),(4, 2),(5, 2),(6, 3),(7, 3),(8, 4),(9, 4),
		(10, 4),(11, 4),(12, 5),(13, 5),(14, 6),(15, 6),(16, 6),(17, 6),(18, 7),(19, 7),
		(153, 36),(486, 92),(958, 162),(959, 162),
		(320, 66),(227, 48),(384, 76),(942, 160),(459, 88),(692, 125),(564, 103),(35, 11),
		(216, 47),(937, 158),(234, 51),(956, 162),(544, 100),(457, 87),(912, 156),(427, 82),
	]

	for case in testCase:
		if test_module.countPrimes(case[0]) != case[1]:
			raise RuntimeError("testCountPrimes failed!!")

	print "testCountPrimes done!"

def testIsIsomorphic():
	testCase = [
		("abcd", "efgh", True),
		("abcd", "abcd", True),
		("aabb", "ddff", True),
		("", "", True),
		("acd", "efgh", False),
		("sdsd", "qwqw", True),
		("abb", "baa", True),
		("baa", "abb", True),
		("dfsdf", "hgfhd", False),
	]
	for case in testCase:
		if test_module.isIsomorphic(case[0], case[1]) != case[2]:
			raise RuntimeError("testIsIsomorphic failed!! %s, %s" % (case[0], case[1]))

	print "testIsIsomorphic done!"

def testReverseLinkedLst():
	testCase = [([], "None"), ]
	for i in xrange(0, 30):
		lst = [random.randint(10,300) for x in xrange(0, 100)]
		ret = ",".join(['%d' % x for x in lst[::-1]])
		testCase.append((lst, ret))
	for case in testCase:
		r2 = str( test_module.reverseList1(linked_list.createLinkedLst(case[0])) )
		r1 = str( test_module.reverseList2(linked_list.createLinkedLst(case[0])) )
		if r1 != r2 or r1 != case[1]:
			print r1, r2
			raise RuntimeError("testReverseLinkedLst failed!!")

	print "testReverseLinkedLst done!"

def testContainDuplicate():
	testCase = [
		([1,2,3,4,5,6,7], False),
		([], False),
		([1,2,3,4,5,6,7,7], True),
		([1,1,2,3,4,5,6,7], True),
		([1,2,3,4,5,5,6,7], True),
	]

	for case in testCase:
		if test_module.containsDuplicate(case[0]) != case[1]:
			raise RuntimeError("testContainDuplicate failed! %s" % case[0])

	print "testContainDuplicate done!"


def testContainDuplicate2():
	testCase = [
		([1,2,3,4,1], 3, False),
		([1,2,3,1,4], 3, True),
		([1,2,1,4,3], 3, True),
		([],12, False),
		([1,2,1,4,3], 12, True),
		([1,2,2,4,3], 3, True),
		([1,2,2,4,3], 1, True),
	]

	for case in testCase:
		if test_module.containsNearbyDuplicate(case[0], case[1]) != case[2]:
			raise RuntimeError("testContainDuplicate2 failed! %s" % str(case))

	print "testContainDuplicate2 done!"

def testComputeArea():
	testCase = [
		([-2, -2, 2, 2, -2, -2, 2, 2], 16),
		([-2, -2, 2, 2, 3, 3, 4, 4], 17),
		([0, 0, 0, 0, -1, -1, 1, 1], 4),
	]

	for case in testCase:
		if test_module.computeArea(case[0][0],case[0][1], case[0][2], \
			case[0][3], case[0][4], case[0][5], case[0][6], case[0][7]) != case[1]:
			raise RuntimeError("testComputeArea failed! %s" % case[0])

	print "testComputeArea done!"

def testSummaryRanges():
	testCase = [
		([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], ['0->32']),
		([0, 1, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32], ['0->1', '3->9', '11->13', '15->16', '18->27', '29->32']),
		([0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], ['0->1', '3->18', '20->32']),
		([1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32], ['1->3', '5->26', '28->32']),
		([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 13, 14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], ['0->9', '12->18', '21->32']),
		([0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], ['0->1', '3->13', '15->32']),
		([0, 1, 2, 3, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], ['0->3', '5', '7', '9->32']),
		([0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], ['0->5', '7->32']),
		([0, 1, 2, 3, 5, 6, 7, 9, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], ['0->3', '5->7', '9', '11->12', '14', '16->32']),
		([1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32], ['1->2', '4->16', '18->26', '29->32']),
		([0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], ['0->6', '8->31']),
		([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], ['0->32']),
		([0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32], ['0->7', '9->30', '32']),
		([1, 2, 3, 4, 6, 7, 8, 9, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32], ['1->4', '6->10', '12->14', '16->26', '28->32']),
		([1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], ['1->3', '5->32']),
		([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 32], ['0->15', '18->23', '25->30', '32']),
		([0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 27, 28, 29, 30, 31, 32], ['0->8', '10', '12->24', '27->32']),
		([0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 19, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], ['0->8', '10->17', '19', '21', '23->32']),
		([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], ['0->10', '12->18', '20->32']),
		([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 23, 25, 26, 27, 28, 29, 30, 31], ['0->9', '11->19', '22->23', '25->31']),
	]
	for case in testCase:
		if test_module.summaryRanges(case[0]) != case[1]:
			raise RuntimeError("testSummaryRanges failed!!")
	print "testSummaryRanges done!"	

def testPowerOfTwo():
	testCase = [
		(-1, False), (-33, False), (0, False), (1, True), (5, False), (3, False), (99, False),(18, False),
		(2, True), (4, True), (8, True), (16, True), (32, True), (64, True),
	]

	for case in testCase:
		if test_module.isPowerOfTwo(case[0]) != case[1]:
			raise RuntimeError("testPowerOfTwo failed! %s" % str(case))

	print "testPowerOfTwo done!"

def testIsPalindromeLinkedList():
	testCase = [
		([0,0], True),
		([], True),
		([0], True),
		([1,2,3,2,1], True),
		([1,2,3,3,2,1], True),
		([1,2,3,1,2,3], False),
		([1,2,3,1,2], False),
	]
	for case in testCase:
		lst = linked_list.createLinkedLst(case[0])
		if test_module.isPalindromeLinkedList(lst) != case[1]:
			raise RuntimeError("testIsPalindromeLinkedList failed! %s", case[0])

	print "testIsPalindromeLinkedList done!"

def testLowestCommonAncestor():
	testCase = [
		("2,1", 1, 2, 2),
		("6,2,8,0,4,7,9,#,#,3,5",3,5,4),
		("6,2,8,0,4,7,9,#,#,3,5",2,8,6),
		("6,2,8,0,4,7,9,#,#,3,5",22,8,None),
	]

	for case in testCase:
		tree = binary_tree.createTreeFromStr(case[0])
		if test_module.lowestCommonAncestor(tree, case[1], case[2]) != case[3]:
			raise RuntimeError("testLowestCommonAncestor failed!! %s" % case[0])

	print "testLowestCommonAncestor done!"


tests = [
	(testCompareVersion, "def compareVersion(version1, version2):"),
	(testHappyNumber, "def isHappyNumber( n ):"),
	(testInvertTree, "def invertTree(root):"),
	(testMergeSortedLst, "def mergeSortedList1(l1, l2):\n\ndef mergeSortedList2(l1, l2):"),
	(testRemoveDuplicates, "def removeDuplicates( A ):"),
	(testRemoveElement, "def removeElement(nums, val):"),
	(testStrStr, "def strStr(haystack, needle):"),
	(testCountAndSay, "def countAndSay(n):"),
	(testLengthOfLastWord, "def lengthOfLastWord(s):"),
	(testPlusOne, "def plusOne(digits):"),
	(testZigZagConvertion, "def zigZagConvertion(s, numRows):"),
	(testReverseInt, "def reverseInt(x):"),
	(testPalindromeNumber, "def palindromeNumber(x):"),
	(testLongestCommonPrefix, "def longestCommonPrefix(strs):"),
	(testMergeSortedArray, "def mergeSortedArray(A, m, B, n):"),
	
	
	(testStringToInterger, "def strToInterger(s):"),
	(testRemoveNthFromEnd, "def removeNthFromEnd(head, n):"),
	(testIsValidParentheses, "def isValidParentheses(s):"),
	(testAddBinary, "def addBinary(a, b):"),
	(testClimbStair, "def climbStairs1(n):\n\ndef climbStairs2(n):"),
	(testDeleteDuplicates, "def deleteDuplicates(head):"),
	(testIsSameTree, "def isSameTree(p, q):"),
	(testSymmetricTree, "def isSymmetric(root):"),
	(testLevelOrder, "def levelOrder(root):"),
	(testMaxDepth, "def maxDepth(root):"),
	(testIsBalanced, "def isBalanced(root):"),
	(testMinDepth, "def minDepth(node):"),
	(testHasPathSum, "def hasPathSum(root, sum):"),
	(testIsPalindromeStr, "def isPalindrome(s):"),
	(testConvertToTitle, "def convertToTitle(n):"),
	(testMajorityElement, "def majorityElement(nums):"),
	(testTitleToNumber, "def titleToNumber(s):"),
	(testTrailingZeroes, "def trailingZeroes(n):"),
	(testRotateArray, "def rotateArray(nums, k):"),
	(testReverseBits, "def reverseBits(n):"),
	(testHammingWeight, "def hammingWeight(n):"),
	
	(testPascalTriangle, "def pascalTriangle(numRows):"),
	(testInterSectionNode, "def getIntersectionNode(headA, headB):"),
	(testHouseRob, "def houseRob(nums):"),
	(testRemoveElements, "def removeElements(head, val):"),
	(testCountPrimes, "def countPrimes(n):"),
	(testIsIsomorphic, "def isIsomorphic(s, t):"),
	(testReverseLinkedLst, "def reverseList1(head):\n\ndef reverseList2(head):"),
	(testContainDuplicate, "def containsDuplicate(nums):"),
	(testContainDuplicate2, "def containsNearbyDuplicate(nums, k):"),
	(testComputeArea, "def computeArea(A, B, C, D, E, F, G, H):"),
	(testSummaryRanges, "def summaryRanges(nums):"),
	(testPowerOfTwo, "def isPowerOfTwo(n):"),
	(testIsPalindromeLinkedList, "def isPalindromeLinkedList(head):"),
	(testLowestCommonAncestor, "def lowestCommonAncestor(root, p, q):"),
]	

import os
import sys
import os
import sys
import shutil

def increaseSolvedCnt( d ):
	tempName = os.path.dirname(os.path.abspath( __file__ ));
	file1 = os.path.join(tempName, "history.txt")
	file2 = os.path.join(tempName, "history_temp.txt")
	
	cnt = 0
	try:
		with open(file1, 'r') as f:
			cnt = int(f.readline())
	except:
		pass

	cnt += d
	with open(file2, 'w') as f:
		f.write("%d" % cnt)

	shutil.move(file2, file1)
	return cnt



def askForQuit():
	while True:
		try:
			r = raw_input("\nquit? y/n: ")
			if r == 'y':
				exit()
			break
		except KeyboardInterrupt:
			exit()

def reloadModule():
	global test_module
	failed = False
	while True:
		try:
			if failed:
				raw_input("reolad test module failed..\n")
			reload(test_module)
			return
		except KeyboardInterrupt:
			exit()
		except:
			print sys.exc_info()[1]
			failed = True
			continue


def pause(msg, needReload = False):
	try:
		ret = raw_input(msg)
	except:
		exit()

	if needReload:
		reloadModule()

	return ret


def getQuestionCnt():
	while True:
		try:
			cnt = input("Please input number of questions:\n")
			break
		except KeyboardInterrupt:
			exit()
		except:
			continue

	return cnt

def initFuncs(testLst, fileName, cnt):
	cnt = min(len(testLst), cnt)
	f = open(fileName, "a")
	funcs = []
	for i in xrange(0, cnt):
		item = testLst.pop()
		print item[0].__name__
		funcs.append(item[0])
		f.write(item[1])
		f.write("\n\n\n\n\n\n\n\n\n")
	f.close()

	return funcs

def callFunc(func):
	global test_module

	while True:
		try:
			func()
			break
		except KeyboardInterrupt:
			askForQuit()
			reloadModule()
			continue
		except:
			print sys.exc_info()[1]
			pause("Press any keys to try again...\n", True)
			continue


def testFuncs(funcs):

	while True:

		pause("Press any keys when ready....\n", True)

		idx = 0
		while idx < len(funcs):
			callFunc(funcs[idx])
			idx += 1

		if pause("try again? y/n\n") == 'n':
			break



def testEx():
	global test_module
	testLst = []
	while len(tests):
		idx = random.randint(0, len(tests)-1)
		testLst.append( tests.pop(idx) )
	
	tempName = os.path.dirname(os.path.abspath( __file__ ));
	tempName = os.path.join(tempName, "test_temp.py")
	
	f = open(tempName, "w")
	f.close()

	test_module = importlib.import_module('test_temp')


	cnt = getQuestionCnt()
	totalCnt = len(testLst)
	progress = 0
	while len(testLst):
		try:
			funcs = initFuncs(testLst, tempName, cnt)
			testFuncs(funcs)
			totalProgress = increaseSolvedCnt(len(funcs))
			progress += len(funcs)
			print "====================(%d/%d, totalProgress:%d)==================" % (progress, totalCnt, totalProgress)
		except KeyboardInterrupt:
			askForQuit()
				
	print "done!"
		
	


def test():
	global test_module
	test_module = importlib.import_module('ltc_easy')
	for test in tests:
		test[0]()
	print "\n\n\n"


test()
testEx()